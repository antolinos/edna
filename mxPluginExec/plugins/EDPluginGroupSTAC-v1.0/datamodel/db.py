#!/usr/bin/env python



#################################################################
#
#   Project:   Python-Jython Asynchronous Action Library Project
#              http://pyaalib.sourceforge.net/
#              http://jyaalib.sourceforge.net/
#
#   Author(s): Romeu A. Pieritz - romeu.pieritz@gmail.com
#
#   Code Generated in Date:      Mon Jun  1 23:18:36 2009
#
#   License:
#   ----------------------------------------------
#   Python-Jython Asynchronous Action Library Project
#   Copyright (c) 2005-2008, PyAALib-JyAALib developers
#   All rights reserved.
#
#   Redistribution and use in source and binary forms,
#   with or without modification, are permitted
#   provided that the following conditions are met:
#
#   Redistributions of source code must retain the
#   above copyright notice,this list of conditions
#   and the following disclaimer.
#
#   Redistributions in binary form must reproduce
#   the above copyright notice,this list of conditions
#   and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the names of PyAALib-JyAALib's copyright owner
#   nor the names of its contributors may be used to endorse
#   or promote products derived from this software without
#   specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
#   AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
#   WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
#   EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#   BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
#   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
#   IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
#   OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
#   THE POSSIBILITY OF SUCH DAMAGE.
#
################################################################
#
#
# Generated by ALExternalPackGenerateDS.py.
#
# This file is generated by a modified version of the original file:
# generateDS.py, proposed by Dave Kuhlman:
#
## LICENSE
#
## Copyright (c) 2003 Dave Kuhlman
#
## Permission is hereby granted, free of charge, to any person obtaining
## a copy of this software and associated documentation files (the
## "Software"), to deal in the Software without restriction, including
## without limitation the rights to use, copy, modify, merge, publish,
## distribute, sublicense, and/or sell copies of the Software, and to
## permit persons to whom the Software is furnished to do so, subject to
## the following conditions:
#
## The above copyright notice and this permission notice shall be
## included in all copies or substantial portions of the Software.
#
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
## IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
## CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
## TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
## SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
##############################################################################

import sys
import getopt
from xml.dom import minidom
from xml.dom import Node


#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')


def showIndentHtml(outfile, level):
    for idx in range(level):
        outfile.write(' &nbsp; &nbsp; &nbsp; &nbsp;')


def quote_xml(inStr):
    s1 = inStr
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('"', '&quot;')
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


class MixedContainer(object):
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')



TEMPLATE_PAGE_P1 = """
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
    <title>AALib Plugin Data Description</title>
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <meta name="description" content="AALib Plugin generation from XSD files">
    <meta name="keywords" content="AALib, xsd, plugin">
    <meta name="author" content="Romeu Pieritz(romeu_pieritz@yahoo.fr)">
    <link href="style.css" rel="stylesheet" type="text/css">
    <base target="main">
</head>
<body>
    <div id="main">
        <div id="block">
          %s
    </div>
"""

TEMPLATE_PAGE_P2 = """
    </div>
</body>
</html>
"""



#
# Class definition
#

class db_proposal(object):
    subclass = None
    def __init__(self, proposal_key=-1, propos_uo_ref=-1, proposal_code='', proposid='', proposal_number='', surname='', labo_name='', labo_pays_code='', propos_tit=''):
        self.proposal_key = proposal_key
        self.propos_uo_ref = propos_uo_ref
        self.proposal_code = proposal_code
        self.proposid = proposid
        self.proposal_number = proposal_number
        self.surname = surname
        self.labo_name = labo_name
        self.labo_pays_code = labo_pays_code
        self.propos_tit = propos_tit
    def factory(*args_, **kwargs_):
        if db_proposal.subclass:
            return db_proposal.subclass(*args_, **kwargs_)
        else:
            return db_proposal(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getProposal_key(self): return self.proposal_key
    def setProposal_key(self, proposal_key): self.proposal_key = proposal_key
    def getPropos_uo_ref(self): return self.propos_uo_ref
    def setPropos_uo_ref(self, propos_uo_ref): self.propos_uo_ref = propos_uo_ref
    def getProposal_code(self): return self.proposal_code
    def setProposal_code(self, proposal_code): self.proposal_code = proposal_code
    def getProposid(self): return self.proposid
    def setProposid(self, proposid): self.proposid = proposid
    def getProposal_number(self): return self.proposal_number
    def setProposal_number(self, proposal_number): self.proposal_number = proposal_number
    def getSurname(self): return self.surname
    def setSurname(self, surname): self.surname = surname
    def getLabo_name(self): return self.labo_name
    def setLabo_name(self, labo_name): self.labo_name = labo_name
    def getLabo_pays_code(self): return self.labo_pays_code
    def setLabo_pays_code(self, labo_pays_code): self.labo_pays_code = labo_pays_code
    def getPropos_tit(self): return self.propos_tit
    def setPropos_tit(self, propos_tit): self.propos_tit = propos_tit
    def export(self, outfile, level = 0, name_='db_proposal'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_proposal'):
        pass
    def exportChildren(self, outfile, level, name_='db_proposal'):
        showIndent(outfile, level)
        outfile.write('<proposal_key>%d</proposal_key>\n' % self.getProposal_key())
        showIndent(outfile, level)
        outfile.write('<propos_uo_ref>%d</propos_uo_ref>\n' % self.getPropos_uo_ref())
        showIndent(outfile, level)
        outfile.write('<proposal_code>%s</proposal_code>\n' % quote_xml(self.getProposal_code()))
        showIndent(outfile, level)
        outfile.write('<proposid>%s</proposid>\n' % quote_xml(self.getProposid()))
        showIndent(outfile, level)
        outfile.write('<proposal_number>%s</proposal_number>\n' % quote_xml(self.getProposal_number()))
        showIndent(outfile, level)
        outfile.write('<surname>%s</surname>\n' % quote_xml(self.getSurname()))
        showIndent(outfile, level)
        outfile.write('<labo_name>%s</labo_name>\n' % quote_xml(self.getLabo_name()))
        showIndent(outfile, level)
        outfile.write('<labo_pays_code>%s</labo_pays_code>\n' % quote_xml(self.getLabo_pays_code()))
        showIndent(outfile, level)
        outfile.write('<propos_tit>%s</propos_tit>\n' % quote_xml(self.getPropos_tit()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_proposal' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_proposal:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_proposal' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_proposal.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_proposal" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_proposal'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('proposal_key = %d,\n' % self.getProposal_key())
        showIndent(outfile, level)
        outfile.write('propos_uo_ref = %d,\n' % self.getPropos_uo_ref())
        showIndent(outfile, level)
        outfile.write('proposal_code = %s,\n' % quote_python(self.getProposal_code()))
        showIndent(outfile, level)
        outfile.write('proposid = %s,\n' % quote_python(self.getProposid()))
        showIndent(outfile, level)
        outfile.write('proposal_number = %s,\n' % quote_python(self.getProposal_number()))
        showIndent(outfile, level)
        outfile.write('surname = %s,\n' % quote_python(self.getSurname()))
        showIndent(outfile, level)
        outfile.write('labo_name = %s,\n' % quote_python(self.getLabo_name()))
        showIndent(outfile, level)
        outfile.write('labo_pays_code = %s,\n' % quote_python(self.getLabo_pays_code()))
        showIndent(outfile, level)
        outfile.write('propos_tit = %s,\n' % quote_python(self.getPropos_tit()))
    def exportLiteralHtml(self, outfile, level = 0, name_='db_proposal'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('proposal_key = <a  href:"#">%d</a><br>\n' % self.getProposal_key())
        showIndentHtml(outfile, level)
        outfile.write('propos_uo_ref = <a  href:"#">%d</a><br>\n' % self.getPropos_uo_ref())
        showIndentHtml(outfile, level)
        outfile.write('proposal_code = <a  href:"#">%s</a><br>\n' % quote_python(self.getProposal_code()))
        showIndentHtml(outfile, level)
        outfile.write('proposid = <a  href:"#">%s</a><br>\n' % quote_python(self.getProposid()))
        showIndentHtml(outfile, level)
        outfile.write('proposal_number = <a  href:"#">%s</a><br>\n' % quote_python(self.getProposal_number()))
        showIndentHtml(outfile, level)
        outfile.write('surname = <a  href:"#">%s</a><br>\n' % quote_python(self.getSurname()))
        showIndentHtml(outfile, level)
        outfile.write('labo_name = <a  href:"#">%s</a><br>\n' % quote_python(self.getLabo_name()))
        showIndentHtml(outfile, level)
        outfile.write('labo_pays_code = <a  href:"#">%s</a><br>\n' % quote_python(self.getLabo_pays_code()))
        showIndentHtml(outfile, level)
        outfile.write('propos_tit = <a  href:"#">%s</a><br>\n' % quote_python(self.getPropos_tit()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'proposal_key':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.proposal_key = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'propos_uo_ref':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.propos_uo_ref = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'proposal_code':
            proposal_code_ = ''
            for text__content_ in child_.childNodes:
                proposal_code_ += text__content_.nodeValue
            self.proposal_code = proposal_code_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'proposid':
            proposid_ = ''
            for text__content_ in child_.childNodes:
                proposid_ += text__content_.nodeValue
            self.proposid = proposid_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'proposal_number':
            proposal_number_ = ''
            for text__content_ in child_.childNodes:
                proposal_number_ += text__content_.nodeValue
            self.proposal_number = proposal_number_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'surname':
            surname_ = ''
            for text__content_ in child_.childNodes:
                surname_ += text__content_.nodeValue
            self.surname = surname_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'labo_name':
            labo_name_ = ''
            for text__content_ in child_.childNodes:
                labo_name_ += text__content_.nodeValue
            self.labo_name = labo_name_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'labo_pays_code':
            labo_pays_code_ = ''
            for text__content_ in child_.childNodes:
                labo_pays_code_ += text__content_.nodeValue
            self.labo_pays_code = labo_pays_code_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'propos_tit':
            propos_tit_ = ''
            for text__content_ in child_.childNodes:
                propos_tit_ += text__content_.nodeValue
            self.propos_tit = propos_tit_
# end class db_proposal


class db_proposal_response(object):
    subclass = None
    def __init__(self, status=None, db_proposal=None, db_session=None):
        self.status = status
        self.db_proposal = db_proposal
        if db_session is None:
            self.db_session = []
        else:
            self.db_session = db_session
    def factory(*args_, **kwargs_):
        if db_proposal_response.subclass:
            return db_proposal_response.subclass(*args_, **kwargs_)
        else:
            return db_proposal_response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getStatus(self): return self.status
    def setStatus(self, status): self.status = status
    def getDb_proposal(self): return self.db_proposal
    def setDb_proposal(self, db_proposal): self.db_proposal = db_proposal
    def getDb_session(self): return self.db_session
    def setDb_session(self, db_session): self.db_session = db_session
    def addDb_session(self, value): self.db_session.append(value)
    def insertDb_session(self, index, value): self.db_session[index] = value
    def export(self, outfile, level = 0, name_='db_proposal_response'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_proposal_response'):
        pass
    def exportChildren(self, outfile, level, name_='db_proposal_response'):
        if self.status:
            self.status.export(outfile, level)
        if self.db_proposal:
            self.db_proposal.export(outfile, level)
        for db_session_ in self.getDb_session():
            db_session_.export(outfile, level)

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_proposal_response' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_proposal_response:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_proposal_response' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_proposal_response.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_proposal_response" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_proposal_response'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.status:
            showIndent(outfile, level)
            outfile.write('status = status(\n')
            self.status.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.db_proposal:
            showIndent(outfile, level)
            outfile.write('db_proposal = db_proposal(\n')
            self.db_proposal.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('db_session=[\n')
        level += 1
        for db_session in self.db_session:
            showIndent(outfile, level)
            outfile.write('db_session(\n')
            db_session.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='db_proposal_response'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        if self.status:
            showIndentHtml(outfile, level)
            outfile.write('status<br>\n')
            self.status.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        if self.db_proposal:
            showIndentHtml(outfile, level)
            outfile.write('db_proposal<br>\n')
            self.db_proposal.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('db_session<br>\n')
        level += 1
        for db_session in self.db_session:
            db_session.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'status':
            obj_ = status.factory()
            obj_.build(child_)
            self.setStatus(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'db_proposal':
            obj_ = db_proposal.factory()
            obj_.build(child_)
            self.setDb_proposal(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'db_session':
            obj_ = db_session.factory()
            obj_.build(child_)
            self.db_session.append(obj_)
# end class db_proposal_response


class db_proposal_session_selection(object):
    subclass = None
    def __init__(self, db_proposal=None, session=None, start_date='', end_date='', run=''):
        self.db_proposal = db_proposal
        self.session = session
        self.start_date = start_date
        self.end_date = end_date
        self.run = run
    def factory(*args_, **kwargs_):
        if db_proposal_session_selection.subclass:
            return db_proposal_session_selection.subclass(*args_, **kwargs_)
        else:
            return db_proposal_session_selection(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getDb_proposal(self): return self.db_proposal
    def setDb_proposal(self, db_proposal): self.db_proposal = db_proposal
    def getSession(self): return self.session
    def setSession(self, session): self.session = session
    def getStart_date(self): return self.start_date
    def setStart_date(self, start_date): self.start_date = start_date
    def getEnd_date(self): return self.end_date
    def setEnd_date(self, end_date): self.end_date = end_date
    def getRun(self): return self.run
    def setRun(self, run): self.run = run
    def export(self, outfile, level = 0, name_='db_proposal_session_selection'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_proposal_session_selection'):
        pass
    def exportChildren(self, outfile, level, name_='db_proposal_session_selection'):
        if self.db_proposal:
            self.db_proposal.export(outfile, level)
        if self.session:
            self.session.export(outfile, level, name_='session')
        showIndent(outfile, level)
        outfile.write('<start_date>%s</start_date>\n' % quote_xml(self.getStart_date()))
        showIndent(outfile, level)
        outfile.write('<end_date>%s</end_date>\n' % quote_xml(self.getEnd_date()))
        showIndent(outfile, level)
        outfile.write('<run>%s</run>\n' % quote_xml(self.getRun()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_proposal_session_selection' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_proposal_session_selection:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_proposal_session_selection' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_proposal_session_selection.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_proposal_session_selection" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_proposal_session_selection'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.db_proposal:
            showIndent(outfile, level)
            outfile.write('db_proposal = db_proposal(\n')
            self.db_proposal.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.session:
            showIndent(outfile, level)
            outfile.write('session = db_session(\n')
            self.session.exportLiteral(outfile, level, name_='session')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('start_date = %s,\n' % quote_python(self.getStart_date()))
        showIndent(outfile, level)
        outfile.write('end_date = %s,\n' % quote_python(self.getEnd_date()))
        showIndent(outfile, level)
        outfile.write('run = %s,\n' % quote_python(self.getRun()))
    def exportLiteralHtml(self, outfile, level = 0, name_='db_proposal_session_selection'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        if self.db_proposal:
            showIndentHtml(outfile, level)
            outfile.write('db_proposal<br>\n')
            self.db_proposal.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        if self.session:
            showIndentHtml(outfile, level)
            outfile.write('session<br>\n')
            self.session.exportLiteralHtml(outfile, level, name_='session')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('start_date = <a  href:"#">%s</a><br>\n' % quote_python(self.getStart_date()))
        showIndentHtml(outfile, level)
        outfile.write('end_date = <a  href:"#">%s</a><br>\n' % quote_python(self.getEnd_date()))
        showIndentHtml(outfile, level)
        outfile.write('run = <a  href:"#">%s</a><br>\n' % quote_python(self.getRun()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'db_proposal':
            obj_ = db_proposal.factory()
            obj_.build(child_)
            self.setDb_proposal(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'session':
            obj_ = db_session.factory()
            obj_.build(child_)
            self.setSession(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'start_date':
            start_date_ = ''
            for text__content_ in child_.childNodes:
                start_date_ += text__content_.nodeValue
            self.start_date = start_date_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'end_date':
            end_date_ = ''
            for text__content_ in child_.childNodes:
                end_date_ += text__content_.nodeValue
            self.end_date = end_date_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'run':
            run_ = ''
            for text__content_ in child_.childNodes:
                run_ += text__content_.nodeValue
            self.run = run_
# end class db_proposal_session_selection


class db_session(object):
    subclass = None
    def __init__(self, sessionno=-1, se_pl_no=-1, user_no=-1, proposal_key=-1, scheduled=-1, local_contact='', date_deb='', date_fin='', no_shifts='', instr_nom='', exp_operator='', no_perf_shifts=0.0, comment='', blom_comment='', lc_comment=''):
        self.sessionno = sessionno
        self.se_pl_no = se_pl_no
        self.user_no = user_no
        self.proposal_key = proposal_key
        self.scheduled = scheduled
        self.local_contact = local_contact
        self.date_deb = date_deb
        self.date_fin = date_fin
        self.no_shifts = no_shifts
        self.instr_nom = instr_nom
        self.exp_operator = exp_operator
        self.no_perf_shifts = no_perf_shifts
        self.comment = comment
        self.blom_comment = blom_comment
        self.lc_comment = lc_comment
    def factory(*args_, **kwargs_):
        if db_session.subclass:
            return db_session.subclass(*args_, **kwargs_)
        else:
            return db_session(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getSessionno(self): return self.sessionno
    def setSessionno(self, sessionno): self.sessionno = sessionno
    def getSe_pl_no(self): return self.se_pl_no
    def setSe_pl_no(self, se_pl_no): self.se_pl_no = se_pl_no
    def getUser_no(self): return self.user_no
    def setUser_no(self, user_no): self.user_no = user_no
    def getProposal_key(self): return self.proposal_key
    def setProposal_key(self, proposal_key): self.proposal_key = proposal_key
    def getScheduled(self): return self.scheduled
    def setScheduled(self, scheduled): self.scheduled = scheduled
    def getLocal_contact(self): return self.local_contact
    def setLocal_contact(self, local_contact): self.local_contact = local_contact
    def getDate_deb(self): return self.date_deb
    def setDate_deb(self, date_deb): self.date_deb = date_deb
    def getDate_fin(self): return self.date_fin
    def setDate_fin(self, date_fin): self.date_fin = date_fin
    def getNo_shifts(self): return self.no_shifts
    def setNo_shifts(self, no_shifts): self.no_shifts = no_shifts
    def getInstr_nom(self): return self.instr_nom
    def setInstr_nom(self, instr_nom): self.instr_nom = instr_nom
    def getExp_operator(self): return self.exp_operator
    def setExp_operator(self, exp_operator): self.exp_operator = exp_operator
    def getNo_perf_shifts(self): return self.no_perf_shifts
    def setNo_perf_shifts(self, no_perf_shifts): self.no_perf_shifts = no_perf_shifts
    def getComment(self): return self.comment
    def setComment(self, comment): self.comment = comment
    def getBlom_comment(self): return self.blom_comment
    def setBlom_comment(self, blom_comment): self.blom_comment = blom_comment
    def getLc_comment(self): return self.lc_comment
    def setLc_comment(self, lc_comment): self.lc_comment = lc_comment
    def export(self, outfile, level = 0, name_='db_session'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_session'):
        pass
    def exportChildren(self, outfile, level, name_='db_session'):
        showIndent(outfile, level)
        outfile.write('<sessionno>%d</sessionno>\n' % self.getSessionno())
        showIndent(outfile, level)
        outfile.write('<se_pl_no>%d</se_pl_no>\n' % self.getSe_pl_no())
        showIndent(outfile, level)
        outfile.write('<user_no>%d</user_no>\n' % self.getUser_no())
        showIndent(outfile, level)
        outfile.write('<proposal_key>%d</proposal_key>\n' % self.getProposal_key())
        showIndent(outfile, level)
        outfile.write('<scheduled>%d</scheduled>\n' % self.getScheduled())
        showIndent(outfile, level)
        outfile.write('<local_contact>%s</local_contact>\n' % quote_xml(self.getLocal_contact()))
        showIndent(outfile, level)
        outfile.write('<date_deb>%s</date_deb>\n' % quote_xml(self.getDate_deb()))
        showIndent(outfile, level)
        outfile.write('<date_fin>%s</date_fin>\n' % quote_xml(self.getDate_fin()))
        showIndent(outfile, level)
        outfile.write('<no_shifts>%s</no_shifts>\n' % quote_xml(self.getNo_shifts()))
        showIndent(outfile, level)
        outfile.write('<instr_nom>%s</instr_nom>\n' % quote_xml(self.getInstr_nom()))
        showIndent(outfile, level)
        outfile.write('<exp_operator>%s</exp_operator>\n' % quote_xml(self.getExp_operator()))
        showIndent(outfile, level)
        outfile.write('<no_perf_shifts>%f</no_perf_shifts>\n' % self.getNo_perf_shifts())
        showIndent(outfile, level)
        outfile.write('<comment>%s</comment>\n' % quote_xml(self.getComment()))
        showIndent(outfile, level)
        outfile.write('<blom_comment>%s</blom_comment>\n' % quote_xml(self.getBlom_comment()))
        showIndent(outfile, level)
        outfile.write('<lc_comment>%s</lc_comment>\n' % quote_xml(self.getLc_comment()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_session' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_session:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_session' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_session.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_session" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_session'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('sessionno = %d,\n' % self.getSessionno())
        showIndent(outfile, level)
        outfile.write('se_pl_no = %d,\n' % self.getSe_pl_no())
        showIndent(outfile, level)
        outfile.write('user_no = %d,\n' % self.getUser_no())
        showIndent(outfile, level)
        outfile.write('proposal_key = %d,\n' % self.getProposal_key())
        showIndent(outfile, level)
        outfile.write('scheduled = %d,\n' % self.getScheduled())
        showIndent(outfile, level)
        outfile.write('local_contact = %s,\n' % quote_python(self.getLocal_contact()))
        showIndent(outfile, level)
        outfile.write('date_deb = %s,\n' % quote_python(self.getDate_deb()))
        showIndent(outfile, level)
        outfile.write('date_fin = %s,\n' % quote_python(self.getDate_fin()))
        showIndent(outfile, level)
        outfile.write('no_shifts = %s,\n' % quote_python(self.getNo_shifts()))
        showIndent(outfile, level)
        outfile.write('instr_nom = %s,\n' % quote_python(self.getInstr_nom()))
        showIndent(outfile, level)
        outfile.write('exp_operator = %s,\n' % quote_python(self.getExp_operator()))
        showIndent(outfile, level)
        outfile.write('no_perf_shifts = %f,\n' % self.getNo_perf_shifts())
        showIndent(outfile, level)
        outfile.write('comment = %s,\n' % quote_python(self.getComment()))
        showIndent(outfile, level)
        outfile.write('blom_comment = %s,\n' % quote_python(self.getBlom_comment()))
        showIndent(outfile, level)
        outfile.write('lc_comment = %s,\n' % quote_python(self.getLc_comment()))
    def exportLiteralHtml(self, outfile, level = 0, name_='db_session'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('sessionno = <a  href:"#">%d</a><br>\n' % self.getSessionno())
        showIndentHtml(outfile, level)
        outfile.write('se_pl_no = <a  href:"#">%d</a><br>\n' % self.getSe_pl_no())
        showIndentHtml(outfile, level)
        outfile.write('user_no = <a  href:"#">%d</a><br>\n' % self.getUser_no())
        showIndentHtml(outfile, level)
        outfile.write('proposal_key = <a  href:"#">%d</a><br>\n' % self.getProposal_key())
        showIndentHtml(outfile, level)
        outfile.write('scheduled = <a  href:"#">%d</a><br>\n' % self.getScheduled())
        showIndentHtml(outfile, level)
        outfile.write('local_contact = <a  href:"#">%s</a><br>\n' % quote_python(self.getLocal_contact()))
        showIndentHtml(outfile, level)
        outfile.write('date_deb = <a  href:"#">%s</a><br>\n' % quote_python(self.getDate_deb()))
        showIndentHtml(outfile, level)
        outfile.write('date_fin = <a  href:"#">%s</a><br>\n' % quote_python(self.getDate_fin()))
        showIndentHtml(outfile, level)
        outfile.write('no_shifts = <a  href:"#">%s</a><br>\n' % quote_python(self.getNo_shifts()))
        showIndentHtml(outfile, level)
        outfile.write('instr_nom = <a  href:"#">%s</a><br>\n' % quote_python(self.getInstr_nom()))
        showIndentHtml(outfile, level)
        outfile.write('exp_operator = <a  href:"#">%s</a><br>\n' % quote_python(self.getExp_operator()))
        showIndentHtml(outfile, level)
        outfile.write('no_perf_shifts = <a  href:"#">%f</a><br>\n' % self.getNo_perf_shifts())
        showIndentHtml(outfile, level)
        outfile.write('comment = <a  href:"#">%s</a><br>\n' % quote_python(self.getComment()))
        showIndentHtml(outfile, level)
        outfile.write('blom_comment = <a  href:"#">%s</a><br>\n' % quote_python(self.getBlom_comment()))
        showIndentHtml(outfile, level)
        outfile.write('lc_comment = <a  href:"#">%s</a><br>\n' % quote_python(self.getLc_comment()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sessionno':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.sessionno = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'se_pl_no':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.se_pl_no = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'user_no':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.user_no = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'proposal_key':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.proposal_key = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'scheduled':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.scheduled = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'local_contact':
            local_contact_ = ''
            for text__content_ in child_.childNodes:
                local_contact_ += text__content_.nodeValue
            self.local_contact = local_contact_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'date_deb':
            date_deb_ = ''
            for text__content_ in child_.childNodes:
                date_deb_ += text__content_.nodeValue
            self.date_deb = date_deb_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'date_fin':
            date_fin_ = ''
            for text__content_ in child_.childNodes:
                date_fin_ += text__content_.nodeValue
            self.date_fin = date_fin_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'no_shifts':
            no_shifts_ = ''
            for text__content_ in child_.childNodes:
                no_shifts_ += text__content_.nodeValue
            self.no_shifts = no_shifts_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'instr_nom':
            instr_nom_ = ''
            for text__content_ in child_.childNodes:
                instr_nom_ += text__content_.nodeValue
            self.instr_nom = instr_nom_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'exp_operator':
            exp_operator_ = ''
            for text__content_ in child_.childNodes:
                exp_operator_ += text__content_.nodeValue
            self.exp_operator = exp_operator_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'no_perf_shifts':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.no_perf_shifts = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'comment':
            comment_ = ''
            for text__content_ in child_.childNodes:
                comment_ += text__content_.nodeValue
            self.comment = comment_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'blom_comment':
            blom_comment_ = ''
            for text__content_ in child_.childNodes:
                blom_comment_ += text__content_.nodeValue
            self.blom_comment = blom_comment_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'lc_comment':
            lc_comment_ = ''
            for text__content_ in child_.childNodes:
                lc_comment_ += text__content_.nodeValue
            self.lc_comment = lc_comment_
# end class db_session


class db_session_response(object):
    subclass = None
    def __init__(self, status=None, db_session=None):
        self.status = status
        if db_session is None:
            self.db_session = []
        else:
            self.db_session = db_session
    def factory(*args_, **kwargs_):
        if db_session_response.subclass:
            return db_session_response.subclass(*args_, **kwargs_)
        else:
            return db_session_response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getStatus(self): return self.status
    def setStatus(self, status): self.status = status
    def getDb_session(self): return self.db_session
    def setDb_session(self, db_session): self.db_session = db_session
    def addDb_session(self, value): self.db_session.append(value)
    def insertDb_session(self, index, value): self.db_session[index] = value
    def export(self, outfile, level = 0, name_='db_session_response'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_session_response'):
        pass
    def exportChildren(self, outfile, level, name_='db_session_response'):
        if self.status:
            self.status.export(outfile, level)
        for db_session_ in self.getDb_session():
            db_session_.export(outfile, level)

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_session_response' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_session_response:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_session_response' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_session_response.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_session_response" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_session_response'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.status:
            showIndent(outfile, level)
            outfile.write('status = status(\n')
            self.status.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('db_session=[\n')
        level += 1
        for db_session in self.db_session:
            showIndent(outfile, level)
            outfile.write('db_session(\n')
            db_session.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='db_session_response'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        if self.status:
            showIndentHtml(outfile, level)
            outfile.write('status<br>\n')
            self.status.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('db_session<br>\n')
        level += 1
        for db_session in self.db_session:
            db_session.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'status':
            obj_ = status.factory()
            obj_.build(child_)
            self.setStatus(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'db_session':
            obj_ = db_session.factory()
            obj_.build(child_)
            self.db_session.append(obj_)
# end class db_session_response


class db_protein(object):
    subclass = None
    def __init__(self, protein_key='', protein_name='', protein_anacronym='', proposal_key='', sample_uo_ref='', molecular_mass=0.0, protein_type='', dna_sequence=''):
        self.protein_key = protein_key
        self.protein_name = protein_name
        self.protein_anacronym = protein_anacronym
        self.proposal_key = proposal_key
        self.sample_uo_ref = sample_uo_ref
        self.molecular_mass = molecular_mass
        self.protein_type = protein_type
        self.dna_sequence = dna_sequence
    def factory(*args_, **kwargs_):
        if db_protein.subclass:
            return db_protein.subclass(*args_, **kwargs_)
        else:
            return db_protein(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getProtein_key(self): return self.protein_key
    def setProtein_key(self, protein_key): self.protein_key = protein_key
    def getProtein_name(self): return self.protein_name
    def setProtein_name(self, protein_name): self.protein_name = protein_name
    def getProtein_anacronym(self): return self.protein_anacronym
    def setProtein_anacronym(self, protein_anacronym): self.protein_anacronym = protein_anacronym
    def getProposal_key(self): return self.proposal_key
    def setProposal_key(self, proposal_key): self.proposal_key = proposal_key
    def getSample_uo_ref(self): return self.sample_uo_ref
    def setSample_uo_ref(self, sample_uo_ref): self.sample_uo_ref = sample_uo_ref
    def getMolecular_mass(self): return self.molecular_mass
    def setMolecular_mass(self, molecular_mass): self.molecular_mass = molecular_mass
    def getProtein_type(self): return self.protein_type
    def setProtein_type(self, protein_type): self.protein_type = protein_type
    def getDna_sequence(self): return self.dna_sequence
    def setDna_sequence(self, dna_sequence): self.dna_sequence = dna_sequence
    def export(self, outfile, level = 0, name_='db_protein'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_protein'):
        pass
    def exportChildren(self, outfile, level, name_='db_protein'):
        showIndent(outfile, level)
        outfile.write('<protein_key>%s</protein_key>\n' % quote_xml(self.getProtein_key()))
        showIndent(outfile, level)
        outfile.write('<protein_name>%s</protein_name>\n' % quote_xml(self.getProtein_name()))
        showIndent(outfile, level)
        outfile.write('<protein_anacronym>%s</protein_anacronym>\n' % quote_xml(self.getProtein_anacronym()))
        showIndent(outfile, level)
        outfile.write('<proposal_key>%s</proposal_key>\n' % quote_xml(self.getProposal_key()))
        showIndent(outfile, level)
        outfile.write('<sample_uo_ref>%s</sample_uo_ref>\n' % quote_xml(self.getSample_uo_ref()))
        showIndent(outfile, level)
        outfile.write('<molecular_mass>%f</molecular_mass>\n' % self.getMolecular_mass())
        showIndent(outfile, level)
        outfile.write('<protein_type>%s</protein_type>\n' % quote_xml(self.getProtein_type()))
        showIndent(outfile, level)
        outfile.write('<dna_sequence>%s</dna_sequence>\n' % quote_xml(self.getDna_sequence()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_protein' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_protein:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_protein' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_protein.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_protein" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_protein'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('protein_key = %s,\n' % quote_python(self.getProtein_key()))
        showIndent(outfile, level)
        outfile.write('protein_name = %s,\n' % quote_python(self.getProtein_name()))
        showIndent(outfile, level)
        outfile.write('protein_anacronym = %s,\n' % quote_python(self.getProtein_anacronym()))
        showIndent(outfile, level)
        outfile.write('proposal_key = %s,\n' % quote_python(self.getProposal_key()))
        showIndent(outfile, level)
        outfile.write('sample_uo_ref = %s,\n' % quote_python(self.getSample_uo_ref()))
        showIndent(outfile, level)
        outfile.write('molecular_mass = %f,\n' % self.getMolecular_mass())
        showIndent(outfile, level)
        outfile.write('protein_type = %s,\n' % quote_python(self.getProtein_type()))
        showIndent(outfile, level)
        outfile.write('dna_sequence = %s,\n' % quote_python(self.getDna_sequence()))
    def exportLiteralHtml(self, outfile, level = 0, name_='db_protein'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('protein_key = <a  href:"#">%s</a><br>\n' % quote_python(self.getProtein_key()))
        showIndentHtml(outfile, level)
        outfile.write('protein_name = <a  href:"#">%s</a><br>\n' % quote_python(self.getProtein_name()))
        showIndentHtml(outfile, level)
        outfile.write('protein_anacronym = <a  href:"#">%s</a><br>\n' % quote_python(self.getProtein_anacronym()))
        showIndentHtml(outfile, level)
        outfile.write('proposal_key = <a  href:"#">%s</a><br>\n' % quote_python(self.getProposal_key()))
        showIndentHtml(outfile, level)
        outfile.write('sample_uo_ref = <a  href:"#">%s</a><br>\n' % quote_python(self.getSample_uo_ref()))
        showIndentHtml(outfile, level)
        outfile.write('molecular_mass = <a  href:"#">%f</a><br>\n' % self.getMolecular_mass())
        showIndentHtml(outfile, level)
        outfile.write('protein_type = <a  href:"#">%s</a><br>\n' % quote_python(self.getProtein_type()))
        showIndentHtml(outfile, level)
        outfile.write('dna_sequence = <a  href:"#">%s</a><br>\n' % quote_python(self.getDna_sequence()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'protein_key':
            protein_key_ = ''
            for text__content_ in child_.childNodes:
                protein_key_ += text__content_.nodeValue
            self.protein_key = protein_key_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'protein_name':
            protein_name_ = ''
            for text__content_ in child_.childNodes:
                protein_name_ += text__content_.nodeValue
            self.protein_name = protein_name_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'protein_anacronym':
            protein_anacronym_ = ''
            for text__content_ in child_.childNodes:
                protein_anacronym_ += text__content_.nodeValue
            self.protein_anacronym = protein_anacronym_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'proposal_key':
            proposal_key_ = ''
            for text__content_ in child_.childNodes:
                proposal_key_ += text__content_.nodeValue
            self.proposal_key = proposal_key_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sample_uo_ref':
            sample_uo_ref_ = ''
            for text__content_ in child_.childNodes:
                sample_uo_ref_ += text__content_.nodeValue
            self.sample_uo_ref = sample_uo_ref_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'molecular_mass':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.molecular_mass = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'protein_type':
            protein_type_ = ''
            for text__content_ in child_.childNodes:
                protein_type_ += text__content_.nodeValue
            self.protein_type = protein_type_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'dna_sequence':
            dna_sequence_ = ''
            for text__content_ in child_.childNodes:
                dna_sequence_ += text__content_.nodeValue
            self.dna_sequence = dna_sequence_
# end class db_protein


class db_crystaltype(object):
    subclass = None
    def __init__(self, crystal_key=-1, protein_key=-1, space_group='', cell_dim_a=0.0, cell_dim_b=0.0, cell_dim_c=0.0, cell_dim_al=0.0, cell_dim_be=0.0, cell_dim_ga=0.0, res_prev=0.0, comments=0.0):
        self.crystal_key = crystal_key
        self.protein_key = protein_key
        self.space_group = space_group
        self.cell_dim_a = cell_dim_a
        self.cell_dim_b = cell_dim_b
        self.cell_dim_c = cell_dim_c
        self.cell_dim_al = cell_dim_al
        self.cell_dim_be = cell_dim_be
        self.cell_dim_ga = cell_dim_ga
        self.res_prev = res_prev
        self.comments = comments
    def factory(*args_, **kwargs_):
        if db_crystaltype.subclass:
            return db_crystaltype.subclass(*args_, **kwargs_)
        else:
            return db_crystaltype(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getCrystal_key(self): return self.crystal_key
    def setCrystal_key(self, crystal_key): self.crystal_key = crystal_key
    def getProtein_key(self): return self.protein_key
    def setProtein_key(self, protein_key): self.protein_key = protein_key
    def getSpace_group(self): return self.space_group
    def setSpace_group(self, space_group): self.space_group = space_group
    def getCell_dim_a(self): return self.cell_dim_a
    def setCell_dim_a(self, cell_dim_a): self.cell_dim_a = cell_dim_a
    def getCell_dim_b(self): return self.cell_dim_b
    def setCell_dim_b(self, cell_dim_b): self.cell_dim_b = cell_dim_b
    def getCell_dim_c(self): return self.cell_dim_c
    def setCell_dim_c(self, cell_dim_c): self.cell_dim_c = cell_dim_c
    def getCell_dim_al(self): return self.cell_dim_al
    def setCell_dim_al(self, cell_dim_al): self.cell_dim_al = cell_dim_al
    def getCell_dim_be(self): return self.cell_dim_be
    def setCell_dim_be(self, cell_dim_be): self.cell_dim_be = cell_dim_be
    def getCell_dim_ga(self): return self.cell_dim_ga
    def setCell_dim_ga(self, cell_dim_ga): self.cell_dim_ga = cell_dim_ga
    def getRes_prev(self): return self.res_prev
    def setRes_prev(self, res_prev): self.res_prev = res_prev
    def getComments(self): return self.comments
    def setComments(self, comments): self.comments = comments
    def export(self, outfile, level = 0, name_='db_crystaltype'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_crystaltype'):
        pass
    def exportChildren(self, outfile, level, name_='db_crystaltype'):
        showIndent(outfile, level)
        outfile.write('<crystal_key>%d</crystal_key>\n' % self.getCrystal_key())
        showIndent(outfile, level)
        outfile.write('<protein_key>%d</protein_key>\n' % self.getProtein_key())
        showIndent(outfile, level)
        outfile.write('<space_group>%s</space_group>\n' % quote_xml(self.getSpace_group()))
        showIndent(outfile, level)
        outfile.write('<cell_dim_a>%f</cell_dim_a>\n' % self.getCell_dim_a())
        showIndent(outfile, level)
        outfile.write('<cell_dim_b>%f</cell_dim_b>\n' % self.getCell_dim_b())
        showIndent(outfile, level)
        outfile.write('<cell_dim_c>%f</cell_dim_c>\n' % self.getCell_dim_c())
        showIndent(outfile, level)
        outfile.write('<cell_dim_al>%f</cell_dim_al>\n' % self.getCell_dim_al())
        showIndent(outfile, level)
        outfile.write('<cell_dim_be>%f</cell_dim_be>\n' % self.getCell_dim_be())
        showIndent(outfile, level)
        outfile.write('<cell_dim_ga>%f</cell_dim_ga>\n' % self.getCell_dim_ga())
        showIndent(outfile, level)
        outfile.write('<res_prev>%f</res_prev>\n' % self.getRes_prev())
        showIndent(outfile, level)
        outfile.write('<comments>%f</comments>\n' % self.getComments())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_crystaltype' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_crystaltype:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_crystaltype' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_crystaltype.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_crystaltype" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_crystaltype'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('crystal_key = %d,\n' % self.getCrystal_key())
        showIndent(outfile, level)
        outfile.write('protein_key = %d,\n' % self.getProtein_key())
        showIndent(outfile, level)
        outfile.write('space_group = %s,\n' % quote_python(self.getSpace_group()))
        showIndent(outfile, level)
        outfile.write('cell_dim_a = %f,\n' % self.getCell_dim_a())
        showIndent(outfile, level)
        outfile.write('cell_dim_b = %f,\n' % self.getCell_dim_b())
        showIndent(outfile, level)
        outfile.write('cell_dim_c = %f,\n' % self.getCell_dim_c())
        showIndent(outfile, level)
        outfile.write('cell_dim_al = %f,\n' % self.getCell_dim_al())
        showIndent(outfile, level)
        outfile.write('cell_dim_be = %f,\n' % self.getCell_dim_be())
        showIndent(outfile, level)
        outfile.write('cell_dim_ga = %f,\n' % self.getCell_dim_ga())
        showIndent(outfile, level)
        outfile.write('res_prev = %f,\n' % self.getRes_prev())
        showIndent(outfile, level)
        outfile.write('comments = %f,\n' % self.getComments())
    def exportLiteralHtml(self, outfile, level = 0, name_='db_crystaltype'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('crystal_key = <a  href:"#">%d</a><br>\n' % self.getCrystal_key())
        showIndentHtml(outfile, level)
        outfile.write('protein_key = <a  href:"#">%d</a><br>\n' % self.getProtein_key())
        showIndentHtml(outfile, level)
        outfile.write('space_group = <a  href:"#">%s</a><br>\n' % quote_python(self.getSpace_group()))
        showIndentHtml(outfile, level)
        outfile.write('cell_dim_a = <a  href:"#">%f</a><br>\n' % self.getCell_dim_a())
        showIndentHtml(outfile, level)
        outfile.write('cell_dim_b = <a  href:"#">%f</a><br>\n' % self.getCell_dim_b())
        showIndentHtml(outfile, level)
        outfile.write('cell_dim_c = <a  href:"#">%f</a><br>\n' % self.getCell_dim_c())
        showIndentHtml(outfile, level)
        outfile.write('cell_dim_al = <a  href:"#">%f</a><br>\n' % self.getCell_dim_al())
        showIndentHtml(outfile, level)
        outfile.write('cell_dim_be = <a  href:"#">%f</a><br>\n' % self.getCell_dim_be())
        showIndentHtml(outfile, level)
        outfile.write('cell_dim_ga = <a  href:"#">%f</a><br>\n' % self.getCell_dim_ga())
        showIndentHtml(outfile, level)
        outfile.write('res_prev = <a  href:"#">%f</a><br>\n' % self.getRes_prev())
        showIndentHtml(outfile, level)
        outfile.write('comments = <a  href:"#">%f</a><br>\n' % self.getComments())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'crystal_key':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.crystal_key = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'protein_key':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.protein_key = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'space_group':
            space_group_ = ''
            for text__content_ in child_.childNodes:
                space_group_ += text__content_.nodeValue
            self.space_group = space_group_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cell_dim_a':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.cell_dim_a = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cell_dim_b':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.cell_dim_b = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cell_dim_c':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.cell_dim_c = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cell_dim_al':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.cell_dim_al = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cell_dim_be':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.cell_dim_be = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cell_dim_ga':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.cell_dim_ga = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'res_prev':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.res_prev = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'comments':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.comments = fval_
# end class db_crystaltype


class db_blsample(object):
    subclass = None
    def __init__(self, sample_key=-1, dewar_key=-1, crystal_key=-1, blsample_name='', uniquecrystalid='', data_set='', crystal_size='', rsym=0.0, res_req=0.0, remarks='', exp_status='', holder_id=''):
        self.sample_key = sample_key
        self.dewar_key = dewar_key
        self.crystal_key = crystal_key
        self.blsample_name = blsample_name
        self.uniquecrystalid = uniquecrystalid
        self.data_set = data_set
        self.crystal_size = crystal_size
        self.rsym = rsym
        self.res_req = res_req
        self.remarks = remarks
        self.exp_status = exp_status
        self.holder_id = holder_id
    def factory(*args_, **kwargs_):
        if db_blsample.subclass:
            return db_blsample.subclass(*args_, **kwargs_)
        else:
            return db_blsample(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getSample_key(self): return self.sample_key
    def setSample_key(self, sample_key): self.sample_key = sample_key
    def getDewar_key(self): return self.dewar_key
    def setDewar_key(self, dewar_key): self.dewar_key = dewar_key
    def getCrystal_key(self): return self.crystal_key
    def setCrystal_key(self, crystal_key): self.crystal_key = crystal_key
    def getBlsample_name(self): return self.blsample_name
    def setBlsample_name(self, blsample_name): self.blsample_name = blsample_name
    def getUniquecrystalid(self): return self.uniquecrystalid
    def setUniquecrystalid(self, uniquecrystalid): self.uniquecrystalid = uniquecrystalid
    def getData_set(self): return self.data_set
    def setData_set(self, data_set): self.data_set = data_set
    def getCrystal_size(self): return self.crystal_size
    def setCrystal_size(self, crystal_size): self.crystal_size = crystal_size
    def getRsym(self): return self.rsym
    def setRsym(self, rsym): self.rsym = rsym
    def getRes_req(self): return self.res_req
    def setRes_req(self, res_req): self.res_req = res_req
    def getRemarks(self): return self.remarks
    def setRemarks(self, remarks): self.remarks = remarks
    def getExp_status(self): return self.exp_status
    def setExp_status(self, exp_status): self.exp_status = exp_status
    def getHolder_id(self): return self.holder_id
    def setHolder_id(self, holder_id): self.holder_id = holder_id
    def export(self, outfile, level = 0, name_='db_blsample'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_blsample'):
        pass
    def exportChildren(self, outfile, level, name_='db_blsample'):
        showIndent(outfile, level)
        outfile.write('<sample_key>%d</sample_key>\n' % self.getSample_key())
        showIndent(outfile, level)
        outfile.write('<dewar_key>%d</dewar_key>\n' % self.getDewar_key())
        showIndent(outfile, level)
        outfile.write('<crystal_key>%d</crystal_key>\n' % self.getCrystal_key())
        showIndent(outfile, level)
        outfile.write('<blsample_name>%s</blsample_name>\n' % quote_xml(self.getBlsample_name()))
        showIndent(outfile, level)
        outfile.write('<uniquecrystalid>%s</uniquecrystalid>\n' % quote_xml(self.getUniquecrystalid()))
        showIndent(outfile, level)
        outfile.write('<data_set>%s</data_set>\n' % quote_xml(self.getData_set()))
        showIndent(outfile, level)
        outfile.write('<crystal_size>%s</crystal_size>\n' % quote_xml(self.getCrystal_size()))
        showIndent(outfile, level)
        outfile.write('<rsym>%f</rsym>\n' % self.getRsym())
        showIndent(outfile, level)
        outfile.write('<res_req>%f</res_req>\n' % self.getRes_req())
        showIndent(outfile, level)
        outfile.write('<remarks>%s</remarks>\n' % quote_xml(self.getRemarks()))
        showIndent(outfile, level)
        outfile.write('<exp_status>%s</exp_status>\n' % quote_xml(self.getExp_status()))
        showIndent(outfile, level)
        outfile.write('<holder_id>%s</holder_id>\n' % quote_xml(self.getHolder_id()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_blsample' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_blsample:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_blsample' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_blsample.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_blsample" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_blsample'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('sample_key = %d,\n' % self.getSample_key())
        showIndent(outfile, level)
        outfile.write('dewar_key = %d,\n' % self.getDewar_key())
        showIndent(outfile, level)
        outfile.write('crystal_key = %d,\n' % self.getCrystal_key())
        showIndent(outfile, level)
        outfile.write('blsample_name = %s,\n' % quote_python(self.getBlsample_name()))
        showIndent(outfile, level)
        outfile.write('uniquecrystalid = %s,\n' % quote_python(self.getUniquecrystalid()))
        showIndent(outfile, level)
        outfile.write('data_set = %s,\n' % quote_python(self.getData_set()))
        showIndent(outfile, level)
        outfile.write('crystal_size = %s,\n' % quote_python(self.getCrystal_size()))
        showIndent(outfile, level)
        outfile.write('rsym = %f,\n' % self.getRsym())
        showIndent(outfile, level)
        outfile.write('res_req = %f,\n' % self.getRes_req())
        showIndent(outfile, level)
        outfile.write('remarks = %s,\n' % quote_python(self.getRemarks()))
        showIndent(outfile, level)
        outfile.write('exp_status = %s,\n' % quote_python(self.getExp_status()))
        showIndent(outfile, level)
        outfile.write('holder_id = %s,\n' % quote_python(self.getHolder_id()))
    def exportLiteralHtml(self, outfile, level = 0, name_='db_blsample'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('sample_key = <a  href:"#">%d</a><br>\n' % self.getSample_key())
        showIndentHtml(outfile, level)
        outfile.write('dewar_key = <a  href:"#">%d</a><br>\n' % self.getDewar_key())
        showIndentHtml(outfile, level)
        outfile.write('crystal_key = <a  href:"#">%d</a><br>\n' % self.getCrystal_key())
        showIndentHtml(outfile, level)
        outfile.write('blsample_name = <a  href:"#">%s</a><br>\n' % quote_python(self.getBlsample_name()))
        showIndentHtml(outfile, level)
        outfile.write('uniquecrystalid = <a  href:"#">%s</a><br>\n' % quote_python(self.getUniquecrystalid()))
        showIndentHtml(outfile, level)
        outfile.write('data_set = <a  href:"#">%s</a><br>\n' % quote_python(self.getData_set()))
        showIndentHtml(outfile, level)
        outfile.write('crystal_size = <a  href:"#">%s</a><br>\n' % quote_python(self.getCrystal_size()))
        showIndentHtml(outfile, level)
        outfile.write('rsym = <a  href:"#">%f</a><br>\n' % self.getRsym())
        showIndentHtml(outfile, level)
        outfile.write('res_req = <a  href:"#">%f</a><br>\n' % self.getRes_req())
        showIndentHtml(outfile, level)
        outfile.write('remarks = <a  href:"#">%s</a><br>\n' % quote_python(self.getRemarks()))
        showIndentHtml(outfile, level)
        outfile.write('exp_status = <a  href:"#">%s</a><br>\n' % quote_python(self.getExp_status()))
        showIndentHtml(outfile, level)
        outfile.write('holder_id = <a  href:"#">%s</a><br>\n' % quote_python(self.getHolder_id()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sample_key':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.sample_key = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'dewar_key':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.dewar_key = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'crystal_key':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.crystal_key = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'blsample_name':
            blsample_name_ = ''
            for text__content_ in child_.childNodes:
                blsample_name_ += text__content_.nodeValue
            self.blsample_name = blsample_name_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'uniquecrystalid':
            uniquecrystalid_ = ''
            for text__content_ in child_.childNodes:
                uniquecrystalid_ += text__content_.nodeValue
            self.uniquecrystalid = uniquecrystalid_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'data_set':
            data_set_ = ''
            for text__content_ in child_.childNodes:
                data_set_ += text__content_.nodeValue
            self.data_set = data_set_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'crystal_size':
            crystal_size_ = ''
            for text__content_ in child_.childNodes:
                crystal_size_ += text__content_.nodeValue
            self.crystal_size = crystal_size_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rsym':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.rsym = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'res_req':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.res_req = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'remarks':
            remarks_ = ''
            for text__content_ in child_.childNodes:
                remarks_ += text__content_.nodeValue
            self.remarks = remarks_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'exp_status':
            exp_status_ = ''
            for text__content_ in child_.childNodes:
                exp_status_ += text__content_.nodeValue
            self.exp_status = exp_status_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'holder_id':
            holder_id_ = ''
            for text__content_ in child_.childNodes:
                holder_id_ += text__content_.nodeValue
            self.holder_id = holder_id_
# end class db_blsample


class db_sample_location(object):
    subclass = None
    def __init__(self, cane=-1, cane_position=-1, sc_basket_id=-1, sample_sc_basket_position=-1, sample_sc_loop_length=-1, sample_sc_pin_length=-1, sample_sc_basket_loaded=-1):
        self.cane = cane
        self.cane_position = cane_position
        self.sc_basket_id = sc_basket_id
        self.sample_sc_basket_position = sample_sc_basket_position
        self.sample_sc_loop_length = sample_sc_loop_length
        self.sample_sc_pin_length = sample_sc_pin_length
        self.sample_sc_basket_loaded = sample_sc_basket_loaded
    def factory(*args_, **kwargs_):
        if db_sample_location.subclass:
            return db_sample_location.subclass(*args_, **kwargs_)
        else:
            return db_sample_location(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getCane(self): return self.cane
    def setCane(self, cane): self.cane = cane
    def getCane_position(self): return self.cane_position
    def setCane_position(self, cane_position): self.cane_position = cane_position
    def getSc_basket_id(self): return self.sc_basket_id
    def setSc_basket_id(self, sc_basket_id): self.sc_basket_id = sc_basket_id
    def getSample_sc_basket_position(self): return self.sample_sc_basket_position
    def setSample_sc_basket_position(self, sample_sc_basket_position): self.sample_sc_basket_position = sample_sc_basket_position
    def getSample_sc_loop_length(self): return self.sample_sc_loop_length
    def setSample_sc_loop_length(self, sample_sc_loop_length): self.sample_sc_loop_length = sample_sc_loop_length
    def getSample_sc_pin_length(self): return self.sample_sc_pin_length
    def setSample_sc_pin_length(self, sample_sc_pin_length): self.sample_sc_pin_length = sample_sc_pin_length
    def getSample_sc_basket_loaded(self): return self.sample_sc_basket_loaded
    def setSample_sc_basket_loaded(self, sample_sc_basket_loaded): self.sample_sc_basket_loaded = sample_sc_basket_loaded
    def export(self, outfile, level = 0, name_='db_sample_location'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_sample_location'):
        pass
    def exportChildren(self, outfile, level, name_='db_sample_location'):
        showIndent(outfile, level)
        outfile.write('<cane>%d</cane>\n' % self.getCane())
        showIndent(outfile, level)
        outfile.write('<cane_position>%d</cane_position>\n' % self.getCane_position())
        showIndent(outfile, level)
        outfile.write('<sc_basket_id>%d</sc_basket_id>\n' % self.getSc_basket_id())
        showIndent(outfile, level)
        outfile.write('<sample_sc_basket_position>%d</sample_sc_basket_position>\n' % self.getSample_sc_basket_position())
        showIndent(outfile, level)
        outfile.write('<sample_sc_loop_length>%d</sample_sc_loop_length>\n' % self.getSample_sc_loop_length())
        showIndent(outfile, level)
        outfile.write('<sample_sc_pin_length>%d</sample_sc_pin_length>\n' % self.getSample_sc_pin_length())
        showIndent(outfile, level)
        outfile.write('<sample_sc_basket_loaded>%d</sample_sc_basket_loaded>\n' % self.getSample_sc_basket_loaded())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_sample_location' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_sample_location:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_sample_location' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_sample_location.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_sample_location" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_sample_location'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('cane = %d,\n' % self.getCane())
        showIndent(outfile, level)
        outfile.write('cane_position = %d,\n' % self.getCane_position())
        showIndent(outfile, level)
        outfile.write('sc_basket_id = %d,\n' % self.getSc_basket_id())
        showIndent(outfile, level)
        outfile.write('sample_sc_basket_position = %d,\n' % self.getSample_sc_basket_position())
        showIndent(outfile, level)
        outfile.write('sample_sc_loop_length = %d,\n' % self.getSample_sc_loop_length())
        showIndent(outfile, level)
        outfile.write('sample_sc_pin_length = %d,\n' % self.getSample_sc_pin_length())
        showIndent(outfile, level)
        outfile.write('sample_sc_basket_loaded = %d,\n' % self.getSample_sc_basket_loaded())
    def exportLiteralHtml(self, outfile, level = 0, name_='db_sample_location'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('cane = <a  href:"#">%d</a><br>\n' % self.getCane())
        showIndentHtml(outfile, level)
        outfile.write('cane_position = <a  href:"#">%d</a><br>\n' % self.getCane_position())
        showIndentHtml(outfile, level)
        outfile.write('sc_basket_id = <a  href:"#">%d</a><br>\n' % self.getSc_basket_id())
        showIndentHtml(outfile, level)
        outfile.write('sample_sc_basket_position = <a  href:"#">%d</a><br>\n' % self.getSample_sc_basket_position())
        showIndentHtml(outfile, level)
        outfile.write('sample_sc_loop_length = <a  href:"#">%d</a><br>\n' % self.getSample_sc_loop_length())
        showIndentHtml(outfile, level)
        outfile.write('sample_sc_pin_length = <a  href:"#">%d</a><br>\n' % self.getSample_sc_pin_length())
        showIndentHtml(outfile, level)
        outfile.write('sample_sc_basket_loaded = <a  href:"#">%d</a><br>\n' % self.getSample_sc_basket_loaded())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cane':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.cane = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cane_position':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.cane_position = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sc_basket_id':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.sc_basket_id = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sample_sc_basket_position':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.sample_sc_basket_position = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sample_sc_loop_length':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.sample_sc_loop_length = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sample_sc_pin_length':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.sample_sc_pin_length = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sample_sc_basket_loaded':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.sample_sc_basket_loaded = ival_
# end class db_sample_location


class db_sample(object):
    subclass = None
    def __init__(self, protein_type=None, crystal_type=None, db_blsample=None, db_sample_location=None):
        self.protein_type = protein_type
        self.crystal_type = crystal_type
        self.db_blsample = db_blsample
        self.db_sample_location = db_sample_location
    def factory(*args_, **kwargs_):
        if db_sample.subclass:
            return db_sample.subclass(*args_, **kwargs_)
        else:
            return db_sample(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getProtein_type(self): return self.protein_type
    def setProtein_type(self, protein_type): self.protein_type = protein_type
    def getCrystal_type(self): return self.crystal_type
    def setCrystal_type(self, crystal_type): self.crystal_type = crystal_type
    def getDb_blsample(self): return self.db_blsample
    def setDb_blsample(self, db_blsample): self.db_blsample = db_blsample
    def getDb_sample_location(self): return self.db_sample_location
    def setDb_sample_location(self, db_sample_location): self.db_sample_location = db_sample_location
    def export(self, outfile, level = 0, name_='db_sample'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_sample'):
        pass
    def exportChildren(self, outfile, level, name_='db_sample'):
        if self.protein_type:
            self.protein_type.export(outfile, level, name_='protein_type')
        if self.crystal_type:
            self.crystal_type.export(outfile, level, name_='crystal_type')
        if self.db_blsample:
            self.db_blsample.export(outfile, level)
        if self.db_sample_location:
            self.db_sample_location.export(outfile, level)

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_sample' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_sample:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_sample' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_sample.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_sample" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_sample'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.protein_type:
            showIndent(outfile, level)
            outfile.write('protein_type = db_protein(\n')
            self.protein_type.exportLiteral(outfile, level, name_='protein_type')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.crystal_type:
            showIndent(outfile, level)
            outfile.write('crystal_type = db_crystaltype(\n')
            self.crystal_type.exportLiteral(outfile, level, name_='crystal_type')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.db_blsample:
            showIndent(outfile, level)
            outfile.write('db_blsample = db_blsample(\n')
            self.db_blsample.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.db_sample_location:
            showIndent(outfile, level)
            outfile.write('db_sample_location = db_sample_location(\n')
            self.db_sample_location.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='db_sample'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        if self.protein_type:
            showIndentHtml(outfile, level)
            outfile.write('protein_type<br>\n')
            self.protein_type.exportLiteralHtml(outfile, level, name_='protein_type')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        if self.crystal_type:
            showIndentHtml(outfile, level)
            outfile.write('crystal_type<br>\n')
            self.crystal_type.exportLiteralHtml(outfile, level, name_='crystal_type')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        if self.db_blsample:
            showIndentHtml(outfile, level)
            outfile.write('db_blsample<br>\n')
            self.db_blsample.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        if self.db_sample_location:
            showIndentHtml(outfile, level)
            outfile.write('db_sample_location<br>\n')
            self.db_sample_location.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'protein_type':
            obj_ = db_protein.factory()
            obj_.build(child_)
            self.setProtein_type(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'crystal_type':
            obj_ = db_crystaltype.factory()
            obj_.build(child_)
            self.setCrystal_type(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'db_blsample':
            obj_ = db_blsample.factory()
            obj_.build(child_)
            self.setDb_blsample(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'db_sample_location':
            obj_ = db_sample_location.factory()
            obj_.build(child_)
            self.setDb_sample_location(obj_)
# end class db_sample


class db_sample_response(object):
    subclass = None
    def __init__(self, db_sample=None, status=None):
        if db_sample is None:
            self.db_sample = []
        else:
            self.db_sample = db_sample
        self.status = status
    def factory(*args_, **kwargs_):
        if db_sample_response.subclass:
            return db_sample_response.subclass(*args_, **kwargs_)
        else:
            return db_sample_response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getDb_sample(self): return self.db_sample
    def setDb_sample(self, db_sample): self.db_sample = db_sample
    def addDb_sample(self, value): self.db_sample.append(value)
    def insertDb_sample(self, index, value): self.db_sample[index] = value
    def getStatus(self): return self.status
    def setStatus(self, status): self.status = status
    def export(self, outfile, level = 0, name_='db_sample_response'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_sample_response'):
        pass
    def exportChildren(self, outfile, level, name_='db_sample_response'):
        for db_sample_ in self.getDb_sample():
            db_sample_.export(outfile, level)
        if self.status:
            self.status.export(outfile, level)

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_sample_response' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_sample_response:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_sample_response' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_sample_response.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_sample_response" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_sample_response'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('db_sample=[\n')
        level += 1
        for db_sample in self.db_sample:
            showIndent(outfile, level)
            outfile.write('db_sample(\n')
            db_sample.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.status:
            showIndent(outfile, level)
            outfile.write('status = status(\n')
            self.status.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='db_sample_response'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('db_sample<br>\n')
        level += 1
        for db_sample in self.db_sample:
            db_sample.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        if self.status:
            showIndentHtml(outfile, level)
            outfile.write('status<br>\n')
            self.status.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'db_sample':
            obj_ = db_sample.factory()
            obj_.build(child_)
            self.db_sample.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'status':
            obj_ = status.factory()
            obj_.build(child_)
            self.setStatus(obj_)
# end class db_sample_response


class db_collect_store_request(object):
    subclass = None
    def __init__(self, db_session=None, fileinfo=None, oscillation_sequence=None, db_sample=None, wavelength=0.0, xbeam=0.0, ybeam=0.0, distance=0.0, resolution=0.0):
        self.db_session = db_session
        self.fileinfo = fileinfo
        if oscillation_sequence is None:
            self.oscillation_sequence = []
        else:
            self.oscillation_sequence = oscillation_sequence
        self.db_sample = db_sample
        self.wavelength = wavelength
        self.xbeam = xbeam
        self.ybeam = ybeam
        self.distance = distance
        self.resolution = resolution
    def factory(*args_, **kwargs_):
        if db_collect_store_request.subclass:
            return db_collect_store_request.subclass(*args_, **kwargs_)
        else:
            return db_collect_store_request(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getDb_session(self): return self.db_session
    def setDb_session(self, db_session): self.db_session = db_session
    def getFileinfo(self): return self.fileinfo
    def setFileinfo(self, fileinfo): self.fileinfo = fileinfo
    def getOscillation_sequence(self): return self.oscillation_sequence
    def setOscillation_sequence(self, oscillation_sequence): self.oscillation_sequence = oscillation_sequence
    def addOscillation_sequence(self, value): self.oscillation_sequence.append(value)
    def insertOscillation_sequence(self, index, value): self.oscillation_sequence[index] = value
    def getDb_sample(self): return self.db_sample
    def setDb_sample(self, db_sample): self.db_sample = db_sample
    def getWavelength(self): return self.wavelength
    def setWavelength(self, wavelength): self.wavelength = wavelength
    def getXbeam(self): return self.xbeam
    def setXbeam(self, xbeam): self.xbeam = xbeam
    def getYbeam(self): return self.ybeam
    def setYbeam(self, ybeam): self.ybeam = ybeam
    def getDistance(self): return self.distance
    def setDistance(self, distance): self.distance = distance
    def getResolution(self): return self.resolution
    def setResolution(self, resolution): self.resolution = resolution
    def export(self, outfile, level = 0, name_='db_collect_store_request'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_collect_store_request'):
        pass
    def exportChildren(self, outfile, level, name_='db_collect_store_request'):
        if self.db_session:
            self.db_session.export(outfile, level)
        if self.fileinfo:
            self.fileinfo.export(outfile, level)
        for oscillation_sequence_ in self.getOscillation_sequence():
            oscillation_sequence_.export(outfile, level)
        if self.db_sample:
            self.db_sample.export(outfile, level)
        showIndent(outfile, level)
        outfile.write('<wavelength>%e</wavelength>\n' % self.getWavelength())
        showIndent(outfile, level)
        outfile.write('<xbeam>%e</xbeam>\n' % self.getXbeam())
        showIndent(outfile, level)
        outfile.write('<ybeam>%e</ybeam>\n' % self.getYbeam())
        showIndent(outfile, level)
        outfile.write('<distance>%e</distance>\n' % self.getDistance())
        showIndent(outfile, level)
        outfile.write('<resolution>%e</resolution>\n' % self.getResolution())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_collect_store_request' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_collect_store_request:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_collect_store_request' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_collect_store_request.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_collect_store_request" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_collect_store_request'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.db_session:
            showIndent(outfile, level)
            outfile.write('db_session = db_session(\n')
            self.db_session.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.fileinfo:
            showIndent(outfile, level)
            outfile.write('fileinfo = fileinfo(\n')
            self.fileinfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('oscillation_sequence=[\n')
        level += 1
        for oscillation_sequence in self.oscillation_sequence:
            showIndent(outfile, level)
            outfile.write('oscillation_sequence(\n')
            oscillation_sequence.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.db_sample:
            showIndent(outfile, level)
            outfile.write('db_sample = db_sample(\n')
            self.db_sample.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('wavelength = %e,\n' % self.getWavelength())
        showIndent(outfile, level)
        outfile.write('xbeam = %e,\n' % self.getXbeam())
        showIndent(outfile, level)
        outfile.write('ybeam = %e,\n' % self.getYbeam())
        showIndent(outfile, level)
        outfile.write('distance = %e,\n' % self.getDistance())
        showIndent(outfile, level)
        outfile.write('resolution = %e,\n' % self.getResolution())
    def exportLiteralHtml(self, outfile, level = 0, name_='db_collect_store_request'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        if self.db_session:
            showIndentHtml(outfile, level)
            outfile.write('db_session<br>\n')
            self.db_session.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        if self.fileinfo:
            showIndentHtml(outfile, level)
            outfile.write('fileinfo<br>\n')
            self.fileinfo.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('oscillation_sequence<br>\n')
        level += 1
        for oscillation_sequence in self.oscillation_sequence:
            oscillation_sequence.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        if self.db_sample:
            showIndentHtml(outfile, level)
            outfile.write('db_sample<br>\n')
            self.db_sample.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('wavelength = <a  href:"#">%e</a><br>\n' % self.getWavelength())
        showIndentHtml(outfile, level)
        outfile.write('xbeam = <a  href:"#">%e</a><br>\n' % self.getXbeam())
        showIndentHtml(outfile, level)
        outfile.write('ybeam = <a  href:"#">%e</a><br>\n' % self.getYbeam())
        showIndentHtml(outfile, level)
        outfile.write('distance = <a  href:"#">%e</a><br>\n' % self.getDistance())
        showIndentHtml(outfile, level)
        outfile.write('resolution = <a  href:"#">%e</a><br>\n' % self.getResolution())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'db_session':
            obj_ = db_session.factory()
            obj_.build(child_)
            self.setDb_session(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'fileinfo':
            obj_ = fileinfo.factory()
            obj_.build(child_)
            self.setFileinfo(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'oscillation_sequence':
            obj_ = oscillation_sequence.factory()
            obj_.build(child_)
            self.oscillation_sequence.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'db_sample':
            obj_ = db_sample.factory()
            obj_.build(child_)
            self.setDb_sample(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'wavelength':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.wavelength = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'xbeam':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.xbeam = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ybeam':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.ybeam = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'distance':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.distance = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'resolution':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.resolution = fval_
# end class db_collect_store_request


class db_run(object):
    subclass = None
    def __init__(self, rununiqueid=-1, sessionno=-1, sample_key=-1, runidentifier=-1, typeid=-1, run_start='', run_end='', run_status=-1):
        self.rununiqueid = rununiqueid
        self.sessionno = sessionno
        self.sample_key = sample_key
        self.runidentifier = runidentifier
        self.typeid = typeid
        self.run_start = run_start
        self.run_end = run_end
        self.run_status = run_status
    def factory(*args_, **kwargs_):
        if db_run.subclass:
            return db_run.subclass(*args_, **kwargs_)
        else:
            return db_run(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getRununiqueid(self): return self.rununiqueid
    def setRununiqueid(self, rununiqueid): self.rununiqueid = rununiqueid
    def getSessionno(self): return self.sessionno
    def setSessionno(self, sessionno): self.sessionno = sessionno
    def getSample_key(self): return self.sample_key
    def setSample_key(self, sample_key): self.sample_key = sample_key
    def getRunidentifier(self): return self.runidentifier
    def setRunidentifier(self, runidentifier): self.runidentifier = runidentifier
    def getTypeid(self): return self.typeid
    def setTypeid(self, typeid): self.typeid = typeid
    def getRun_start(self): return self.run_start
    def setRun_start(self, run_start): self.run_start = run_start
    def getRun_end(self): return self.run_end
    def setRun_end(self, run_end): self.run_end = run_end
    def getRun_status(self): return self.run_status
    def setRun_status(self, run_status): self.run_status = run_status
    def export(self, outfile, level = 0, name_='db_run'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_run'):
        pass
    def exportChildren(self, outfile, level, name_='db_run'):
        showIndent(outfile, level)
        outfile.write('<rununiqueid>%d</rununiqueid>\n' % self.getRununiqueid())
        showIndent(outfile, level)
        outfile.write('<sessionno>%d</sessionno>\n' % self.getSessionno())
        showIndent(outfile, level)
        outfile.write('<sample_key>%d</sample_key>\n' % self.getSample_key())
        showIndent(outfile, level)
        outfile.write('<runidentifier>%d</runidentifier>\n' % self.getRunidentifier())
        showIndent(outfile, level)
        outfile.write('<typeid>%d</typeid>\n' % self.getTypeid())
        showIndent(outfile, level)
        outfile.write('<run_start>%s</run_start>\n' % quote_xml(self.getRun_start()))
        showIndent(outfile, level)
        outfile.write('<run_end>%s</run_end>\n' % quote_xml(self.getRun_end()))
        showIndent(outfile, level)
        outfile.write('<run_status>%d</run_status>\n' % self.getRun_status())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_run' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_run:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_run' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_run.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_run" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_run'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('rununiqueid = %d,\n' % self.getRununiqueid())
        showIndent(outfile, level)
        outfile.write('sessionno = %d,\n' % self.getSessionno())
        showIndent(outfile, level)
        outfile.write('sample_key = %d,\n' % self.getSample_key())
        showIndent(outfile, level)
        outfile.write('runidentifier = %d,\n' % self.getRunidentifier())
        showIndent(outfile, level)
        outfile.write('typeid = %d,\n' % self.getTypeid())
        showIndent(outfile, level)
        outfile.write('run_start = %s,\n' % quote_python(self.getRun_start()))
        showIndent(outfile, level)
        outfile.write('run_end = %s,\n' % quote_python(self.getRun_end()))
        showIndent(outfile, level)
        outfile.write('run_status = %d,\n' % self.getRun_status())
    def exportLiteralHtml(self, outfile, level = 0, name_='db_run'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('rununiqueid = <a  href:"#">%d</a><br>\n' % self.getRununiqueid())
        showIndentHtml(outfile, level)
        outfile.write('sessionno = <a  href:"#">%d</a><br>\n' % self.getSessionno())
        showIndentHtml(outfile, level)
        outfile.write('sample_key = <a  href:"#">%d</a><br>\n' % self.getSample_key())
        showIndentHtml(outfile, level)
        outfile.write('runidentifier = <a  href:"#">%d</a><br>\n' % self.getRunidentifier())
        showIndentHtml(outfile, level)
        outfile.write('typeid = <a  href:"#">%d</a><br>\n' % self.getTypeid())
        showIndentHtml(outfile, level)
        outfile.write('run_start = <a  href:"#">%s</a><br>\n' % quote_python(self.getRun_start()))
        showIndentHtml(outfile, level)
        outfile.write('run_end = <a  href:"#">%s</a><br>\n' % quote_python(self.getRun_end()))
        showIndentHtml(outfile, level)
        outfile.write('run_status = <a  href:"#">%d</a><br>\n' % self.getRun_status())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rununiqueid':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.rununiqueid = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sessionno':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.sessionno = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sample_key':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.sample_key = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'runidentifier':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.runidentifier = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'typeid':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.typeid = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'run_start':
            run_start_ = ''
            for text__content_ in child_.childNodes:
                run_start_ += text__content_.nodeValue
            self.run_start = run_start_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'run_end':
            run_end_ = ''
            for text__content_ in child_.childNodes:
                run_end_ += text__content_.nodeValue
            self.run_end = run_end_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'run_status':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.run_status = ival_
# end class db_run


class db_image(object):
    subclass = None
    def __init__(self, imageid=-1, rununiqueid=-1, ttype=-1, filename='', directory=''):
        self.imageid = imageid
        self.rununiqueid = rununiqueid
        self.ttype = ttype
        self.filename = filename
        self.directory = directory
    def factory(*args_, **kwargs_):
        if db_image.subclass:
            return db_image.subclass(*args_, **kwargs_)
        else:
            return db_image(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getImageid(self): return self.imageid
    def setImageid(self, imageid): self.imageid = imageid
    def getRununiqueid(self): return self.rununiqueid
    def setRununiqueid(self, rununiqueid): self.rununiqueid = rununiqueid
    def getType(self): return self.ttype
    def setType(self, ttype): self.ttype = ttype
    def getFilename(self): return self.filename
    def setFilename(self, filename): self.filename = filename
    def getDirectory(self): return self.directory
    def setDirectory(self, directory): self.directory = directory
    def export(self, outfile, level = 0, name_='db_image'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_image'):
        pass
    def exportChildren(self, outfile, level, name_='db_image'):
        showIndent(outfile, level)
        outfile.write('<imageid>%d</imageid>\n' % self.getImageid())
        showIndent(outfile, level)
        outfile.write('<rununiqueid>%d</rununiqueid>\n' % self.getRununiqueid())
        showIndent(outfile, level)
        outfile.write('<type>%d</type>\n' % self.getType())
        showIndent(outfile, level)
        outfile.write('<filename>%s</filename>\n' % quote_xml(self.getFilename()))
        showIndent(outfile, level)
        outfile.write('<directory>%s</directory>\n' % quote_xml(self.getDirectory()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_image' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_image:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_image' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_image.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_image" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_image'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('imageid = %d,\n' % self.getImageid())
        showIndent(outfile, level)
        outfile.write('rununiqueid = %d,\n' % self.getRununiqueid())
        showIndent(outfile, level)
        outfile.write('ttype = %d,\n' % self.getType())
        showIndent(outfile, level)
        outfile.write('filename = %s,\n' % quote_python(self.getFilename()))
        showIndent(outfile, level)
        outfile.write('directory = %s,\n' % quote_python(self.getDirectory()))
    def exportLiteralHtml(self, outfile, level = 0, name_='db_image'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('imageid = <a  href:"#">%d</a><br>\n' % self.getImageid())
        showIndentHtml(outfile, level)
        outfile.write('rununiqueid = <a  href:"#">%d</a><br>\n' % self.getRununiqueid())
        showIndentHtml(outfile, level)
        outfile.write('ttype = <a  href:"#">%d</a><br>\n' % self.getType())
        showIndentHtml(outfile, level)
        outfile.write('filename = <a  href:"#">%s</a><br>\n' % quote_python(self.getFilename()))
        showIndentHtml(outfile, level)
        outfile.write('directory = <a  href:"#">%s</a><br>\n' % quote_python(self.getDirectory()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'imageid':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.imageid = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rununiqueid':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.rununiqueid = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'type':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.ttype = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'filename':
            filename_ = ''
            for text__content_ in child_.childNodes:
                filename_ += text__content_.nodeValue
            self.filename = filename_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'directory':
            directory_ = ''
            for text__content_ in child_.childNodes:
                directory_ += text__content_.nodeValue
            self.directory = directory_
# end class db_image


class db_image_store_request(object):
    subclass = None
    def __init__(self, db_image=None):
        self.db_image = db_image
    def factory(*args_, **kwargs_):
        if db_image_store_request.subclass:
            return db_image_store_request.subclass(*args_, **kwargs_)
        else:
            return db_image_store_request(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getDb_image(self): return self.db_image
    def setDb_image(self, db_image): self.db_image = db_image
    def export(self, outfile, level = 0, name_='db_image_store_request'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_image_store_request'):
        pass
    def exportChildren(self, outfile, level, name_='db_image_store_request'):
        if self.db_image:
            self.db_image.export(outfile, level)

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_image_store_request' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_image_store_request:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_image_store_request' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_image_store_request.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_image_store_request" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_image_store_request'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.db_image:
            showIndent(outfile, level)
            outfile.write('db_image = db_image(\n')
            self.db_image.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='db_image_store_request'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        if self.db_image:
            showIndentHtml(outfile, level)
            outfile.write('db_image<br>\n')
            self.db_image.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'db_image':
            obj_ = db_image.factory()
            obj_.build(child_)
            self.setDb_image(obj_)
# end class db_image_store_request


class db_image_response(object):
    subclass = None
    def __init__(self, status=None, db_image=None):
        self.status = status
        if db_image is None:
            self.db_image = []
        else:
            self.db_image = db_image
    def factory(*args_, **kwargs_):
        if db_image_response.subclass:
            return db_image_response.subclass(*args_, **kwargs_)
        else:
            return db_image_response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getStatus(self): return self.status
    def setStatus(self, status): self.status = status
    def getDb_image(self): return self.db_image
    def setDb_image(self, db_image): self.db_image = db_image
    def addDb_image(self, value): self.db_image.append(value)
    def insertDb_image(self, index, value): self.db_image[index] = value
    def export(self, outfile, level = 0, name_='db_image_response'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_image_response'):
        pass
    def exportChildren(self, outfile, level, name_='db_image_response'):
        if self.status:
            self.status.export(outfile, level)
        for db_image_ in self.getDb_image():
            db_image_.export(outfile, level)

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_image_response' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_image_response:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_image_response' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_image_response.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_image_response" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_image_response'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.status:
            showIndent(outfile, level)
            outfile.write('status = status(\n')
            self.status.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('db_image=[\n')
        level += 1
        for db_image in self.db_image:
            showIndent(outfile, level)
            outfile.write('db_image(\n')
            db_image.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='db_image_response'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        if self.status:
            showIndentHtml(outfile, level)
            outfile.write('status<br>\n')
            self.status.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('db_image<br>\n')
        level += 1
        for db_image in self.db_image:
            db_image.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'status':
            obj_ = status.factory()
            obj_.build(child_)
            self.setStatus(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'db_image':
            obj_ = db_image.factory()
            obj_.build(child_)
            self.db_image.append(obj_)
# end class db_image_response


class db_collect_store_response(object):
    subclass = None
    def __init__(self, status=None, db_run=None):
        self.status = status
        self.db_run = db_run
    def factory(*args_, **kwargs_):
        if db_collect_store_response.subclass:
            return db_collect_store_response.subclass(*args_, **kwargs_)
        else:
            return db_collect_store_response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getStatus(self): return self.status
    def setStatus(self, status): self.status = status
    def getDb_run(self): return self.db_run
    def setDb_run(self, db_run): self.db_run = db_run
    def export(self, outfile, level = 0, name_='db_collect_store_response'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_collect_store_response'):
        pass
    def exportChildren(self, outfile, level, name_='db_collect_store_response'):
        if self.status:
            self.status.export(outfile, level)
        if self.db_run:
            self.db_run.export(outfile, level)

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_collect_store_response' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_collect_store_response:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_collect_store_response' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_collect_store_response.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_collect_store_response" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_collect_store_response'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.status:
            showIndent(outfile, level)
            outfile.write('status = status(\n')
            self.status.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.db_run:
            showIndent(outfile, level)
            outfile.write('db_run = db_run(\n')
            self.db_run.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='db_collect_store_response'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        if self.status:
            showIndentHtml(outfile, level)
            outfile.write('status<br>\n')
            self.status.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        if self.db_run:
            showIndentHtml(outfile, level)
            outfile.write('db_run<br>\n')
            self.db_run.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'status':
            obj_ = status.factory()
            obj_.build(child_)
            self.setStatus(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'db_run':
            obj_ = db_run.factory()
            obj_.build(child_)
            self.setDb_run(obj_)
# end class db_collect_store_response


class db_dnascreening(object):
    subclass = None
    def __init__(self, DNAScreenID=-1, UniqueCrystalID='', UniqueRunID=-1, TimeStamp='', ProgramVersion=''):
        self.DNAScreenID = DNAScreenID
        self.UniqueCrystalID = UniqueCrystalID
        self.UniqueRunID = UniqueRunID
        self.TimeStamp = TimeStamp
        self.ProgramVersion = ProgramVersion
    def factory(*args_, **kwargs_):
        if db_dnascreening.subclass:
            return db_dnascreening.subclass(*args_, **kwargs_)
        else:
            return db_dnascreening(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getDNAScreenID(self): return self.DNAScreenID
    def setDNAScreenID(self, DNAScreenID): self.DNAScreenID = DNAScreenID
    def getUniqueCrystalID(self): return self.UniqueCrystalID
    def setUniqueCrystalID(self, UniqueCrystalID): self.UniqueCrystalID = UniqueCrystalID
    def getUniqueRunID(self): return self.UniqueRunID
    def setUniqueRunID(self, UniqueRunID): self.UniqueRunID = UniqueRunID
    def getTimeStamp(self): return self.TimeStamp
    def setTimeStamp(self, TimeStamp): self.TimeStamp = TimeStamp
    def getProgramVersion(self): return self.ProgramVersion
    def setProgramVersion(self, ProgramVersion): self.ProgramVersion = ProgramVersion
    def export(self, outfile, level = 0, name_='db_dnascreening'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_dnascreening'):
        pass
    def exportChildren(self, outfile, level, name_='db_dnascreening'):
        showIndent(outfile, level)
        outfile.write('<DNAScreenID>%d</DNAScreenID>\n' % self.getDNAScreenID())
        showIndent(outfile, level)
        outfile.write('<UniqueCrystalID>%s</UniqueCrystalID>\n' % quote_xml(self.getUniqueCrystalID()))
        showIndent(outfile, level)
        outfile.write('<UniqueRunID>%d</UniqueRunID>\n' % self.getUniqueRunID())
        showIndent(outfile, level)
        outfile.write('<TimeStamp>%s</TimeStamp>\n' % quote_xml(self.getTimeStamp()))
        showIndent(outfile, level)
        outfile.write('<ProgramVersion>%s</ProgramVersion>\n' % quote_xml(self.getProgramVersion()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_dnascreening' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_dnascreening:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_dnascreening' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_dnascreening.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_dnascreening" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_dnascreening'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('DNAScreenID = %d,\n' % self.getDNAScreenID())
        showIndent(outfile, level)
        outfile.write('UniqueCrystalID = %s,\n' % quote_python(self.getUniqueCrystalID()))
        showIndent(outfile, level)
        outfile.write('UniqueRunID = %d,\n' % self.getUniqueRunID())
        showIndent(outfile, level)
        outfile.write('TimeStamp = %s,\n' % quote_python(self.getTimeStamp()))
        showIndent(outfile, level)
        outfile.write('ProgramVersion = %s,\n' % quote_python(self.getProgramVersion()))
    def exportLiteralHtml(self, outfile, level = 0, name_='db_dnascreening'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('DNAScreenID = <a  href:"#">%d</a><br>\n' % self.getDNAScreenID())
        showIndentHtml(outfile, level)
        outfile.write('UniqueCrystalID = <a  href:"#">%s</a><br>\n' % quote_python(self.getUniqueCrystalID()))
        showIndentHtml(outfile, level)
        outfile.write('UniqueRunID = <a  href:"#">%d</a><br>\n' % self.getUniqueRunID())
        showIndentHtml(outfile, level)
        outfile.write('TimeStamp = <a  href:"#">%s</a><br>\n' % quote_python(self.getTimeStamp()))
        showIndentHtml(outfile, level)
        outfile.write('ProgramVersion = <a  href:"#">%s</a><br>\n' % quote_python(self.getProgramVersion()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'DNAScreenID':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.DNAScreenID = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'UniqueCrystalID':
            UniqueCrystalID_ = ''
            for text__content_ in child_.childNodes:
                UniqueCrystalID_ += text__content_.nodeValue
            self.UniqueCrystalID = UniqueCrystalID_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'UniqueRunID':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.UniqueRunID = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'TimeStamp':
            TimeStamp_ = ''
            for text__content_ in child_.childNodes:
                TimeStamp_ += text__content_.nodeValue
            self.TimeStamp = TimeStamp_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ProgramVersion':
            ProgramVersion_ = ''
            for text__content_ in child_.childNodes:
                ProgramVersion_ += text__content_.nodeValue
            self.ProgramVersion = ProgramVersion_
# end class db_dnascreening


class db_dnascreeninput(object):
    subclass = None
    def __init__(self, InputParametersID=-1, DNAScreenID=-1, BeamX=0.0, BeamY=0.0, RMSErrorLimits=0.0, MinimumFractionIndexed=0.0, MinimumFractionRejected=0.0, MinimumSignalToNoise=0.0, ResolutionRequested=0.0):
        self.InputParametersID = InputParametersID
        self.DNAScreenID = DNAScreenID
        self.BeamX = BeamX
        self.BeamY = BeamY
        self.RMSErrorLimits = RMSErrorLimits
        self.MinimumFractionIndexed = MinimumFractionIndexed
        self.MinimumFractionRejected = MinimumFractionRejected
        self.MinimumSignalToNoise = MinimumSignalToNoise
        self.ResolutionRequested = ResolutionRequested
    def factory(*args_, **kwargs_):
        if db_dnascreeninput.subclass:
            return db_dnascreeninput.subclass(*args_, **kwargs_)
        else:
            return db_dnascreeninput(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getInputParametersID(self): return self.InputParametersID
    def setInputParametersID(self, InputParametersID): self.InputParametersID = InputParametersID
    def getDNAScreenID(self): return self.DNAScreenID
    def setDNAScreenID(self, DNAScreenID): self.DNAScreenID = DNAScreenID
    def getBeamX(self): return self.BeamX
    def setBeamX(self, BeamX): self.BeamX = BeamX
    def getBeamY(self): return self.BeamY
    def setBeamY(self, BeamY): self.BeamY = BeamY
    def getRMSErrorLimits(self): return self.RMSErrorLimits
    def setRMSErrorLimits(self, RMSErrorLimits): self.RMSErrorLimits = RMSErrorLimits
    def getMinimumFractionIndexed(self): return self.MinimumFractionIndexed
    def setMinimumFractionIndexed(self, MinimumFractionIndexed): self.MinimumFractionIndexed = MinimumFractionIndexed
    def getMinimumFractionRejected(self): return self.MinimumFractionRejected
    def setMinimumFractionRejected(self, MinimumFractionRejected): self.MinimumFractionRejected = MinimumFractionRejected
    def getMinimumSignalToNoise(self): return self.MinimumSignalToNoise
    def setMinimumSignalToNoise(self, MinimumSignalToNoise): self.MinimumSignalToNoise = MinimumSignalToNoise
    def getResolutionRequested(self): return self.ResolutionRequested
    def setResolutionRequested(self, ResolutionRequested): self.ResolutionRequested = ResolutionRequested
    def export(self, outfile, level = 0, name_='db_dnascreeninput'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_dnascreeninput'):
        pass
    def exportChildren(self, outfile, level, name_='db_dnascreeninput'):
        showIndent(outfile, level)
        outfile.write('<InputParametersID>%d</InputParametersID>\n' % self.getInputParametersID())
        showIndent(outfile, level)
        outfile.write('<DNAScreenID>%d</DNAScreenID>\n' % self.getDNAScreenID())
        showIndent(outfile, level)
        outfile.write('<BeamX>%f</BeamX>\n' % self.getBeamX())
        showIndent(outfile, level)
        outfile.write('<BeamY>%f</BeamY>\n' % self.getBeamY())
        showIndent(outfile, level)
        outfile.write('<RMSErrorLimits>%f</RMSErrorLimits>\n' % self.getRMSErrorLimits())
        showIndent(outfile, level)
        outfile.write('<MinimumFractionIndexed>%f</MinimumFractionIndexed>\n' % self.getMinimumFractionIndexed())
        showIndent(outfile, level)
        outfile.write('<MinimumFractionRejected>%f</MinimumFractionRejected>\n' % self.getMinimumFractionRejected())
        showIndent(outfile, level)
        outfile.write('<MinimumSignalToNoise>%f</MinimumSignalToNoise>\n' % self.getMinimumSignalToNoise())
        showIndent(outfile, level)
        outfile.write('<ResolutionRequested>%f</ResolutionRequested>\n' % self.getResolutionRequested())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_dnascreeninput' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_dnascreeninput:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_dnascreeninput' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_dnascreeninput.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_dnascreeninput" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_dnascreeninput'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('InputParametersID = %d,\n' % self.getInputParametersID())
        showIndent(outfile, level)
        outfile.write('DNAScreenID = %d,\n' % self.getDNAScreenID())
        showIndent(outfile, level)
        outfile.write('BeamX = %f,\n' % self.getBeamX())
        showIndent(outfile, level)
        outfile.write('BeamY = %f,\n' % self.getBeamY())
        showIndent(outfile, level)
        outfile.write('RMSErrorLimits = %f,\n' % self.getRMSErrorLimits())
        showIndent(outfile, level)
        outfile.write('MinimumFractionIndexed = %f,\n' % self.getMinimumFractionIndexed())
        showIndent(outfile, level)
        outfile.write('MinimumFractionRejected = %f,\n' % self.getMinimumFractionRejected())
        showIndent(outfile, level)
        outfile.write('MinimumSignalToNoise = %f,\n' % self.getMinimumSignalToNoise())
        showIndent(outfile, level)
        outfile.write('ResolutionRequested = %f,\n' % self.getResolutionRequested())
    def exportLiteralHtml(self, outfile, level = 0, name_='db_dnascreeninput'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('InputParametersID = <a  href:"#">%d</a><br>\n' % self.getInputParametersID())
        showIndentHtml(outfile, level)
        outfile.write('DNAScreenID = <a  href:"#">%d</a><br>\n' % self.getDNAScreenID())
        showIndentHtml(outfile, level)
        outfile.write('BeamX = <a  href:"#">%f</a><br>\n' % self.getBeamX())
        showIndentHtml(outfile, level)
        outfile.write('BeamY = <a  href:"#">%f</a><br>\n' % self.getBeamY())
        showIndentHtml(outfile, level)
        outfile.write('RMSErrorLimits = <a  href:"#">%f</a><br>\n' % self.getRMSErrorLimits())
        showIndentHtml(outfile, level)
        outfile.write('MinimumFractionIndexed = <a  href:"#">%f</a><br>\n' % self.getMinimumFractionIndexed())
        showIndentHtml(outfile, level)
        outfile.write('MinimumFractionRejected = <a  href:"#">%f</a><br>\n' % self.getMinimumFractionRejected())
        showIndentHtml(outfile, level)
        outfile.write('MinimumSignalToNoise = <a  href:"#">%f</a><br>\n' % self.getMinimumSignalToNoise())
        showIndentHtml(outfile, level)
        outfile.write('ResolutionRequested = <a  href:"#">%f</a><br>\n' % self.getResolutionRequested())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'InputParametersID':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.InputParametersID = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'DNAScreenID':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.DNAScreenID = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'BeamX':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.BeamX = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'BeamY':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.BeamY = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'RMSErrorLimits':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.RMSErrorLimits = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'MinimumFractionIndexed':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.MinimumFractionIndexed = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'MinimumFractionRejected':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.MinimumFractionRejected = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'MinimumSignalToNoise':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.MinimumSignalToNoise = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ResolutionRequested':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.ResolutionRequested = fval_
# end class db_dnascreeninput


class db_dnascreenoutput(object):
    subclass = None
    def __init__(self, OutputResultsID=-1, DNAScreenID=-1, RawOrientationMatrix=0.0, StatusDescription='', ReflectedReflections=-1, ResolutionObtained=0.0, SpotDeviationR=0.0, SpotDeviationTheta=0.0, UnitCell=0.0, SpaceGroup='', BeamShift=-1, NumSpotsFound=-1, NumSpotsUsed=-1, NumSpotsRejected=-1, Mosaicity=0.0):
        self.OutputResultsID = OutputResultsID
        self.DNAScreenID = DNAScreenID
        self.RawOrientationMatrix = RawOrientationMatrix
        self.StatusDescription = StatusDescription
        self.ReflectedReflections = ReflectedReflections
        self.ResolutionObtained = ResolutionObtained
        self.SpotDeviationR = SpotDeviationR
        self.SpotDeviationTheta = SpotDeviationTheta
        self.UnitCell = UnitCell
        self.SpaceGroup = SpaceGroup
        self.BeamShift = BeamShift
        self.NumSpotsFound = NumSpotsFound
        self.NumSpotsUsed = NumSpotsUsed
        self.NumSpotsRejected = NumSpotsRejected
        self.Mosaicity = Mosaicity
    def factory(*args_, **kwargs_):
        if db_dnascreenoutput.subclass:
            return db_dnascreenoutput.subclass(*args_, **kwargs_)
        else:
            return db_dnascreenoutput(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getOutputResultsID(self): return self.OutputResultsID
    def setOutputResultsID(self, OutputResultsID): self.OutputResultsID = OutputResultsID
    def getDNAScreenID(self): return self.DNAScreenID
    def setDNAScreenID(self, DNAScreenID): self.DNAScreenID = DNAScreenID
    def getRawOrientationMatrix(self): return self.RawOrientationMatrix
    def setRawOrientationMatrix(self, RawOrientationMatrix): self.RawOrientationMatrix = RawOrientationMatrix
    def getStatusDescription(self): return self.StatusDescription
    def setStatusDescription(self, StatusDescription): self.StatusDescription = StatusDescription
    def getReflectedReflections(self): return self.ReflectedReflections
    def setReflectedReflections(self, ReflectedReflections): self.ReflectedReflections = ReflectedReflections
    def getResolutionObtained(self): return self.ResolutionObtained
    def setResolutionObtained(self, ResolutionObtained): self.ResolutionObtained = ResolutionObtained
    def getSpotDeviationR(self): return self.SpotDeviationR
    def setSpotDeviationR(self, SpotDeviationR): self.SpotDeviationR = SpotDeviationR
    def getSpotDeviationTheta(self): return self.SpotDeviationTheta
    def setSpotDeviationTheta(self, SpotDeviationTheta): self.SpotDeviationTheta = SpotDeviationTheta
    def getUnitCell(self): return self.UnitCell
    def setUnitCell(self, UnitCell): self.UnitCell = UnitCell
    def getSpaceGroup(self): return self.SpaceGroup
    def setSpaceGroup(self, SpaceGroup): self.SpaceGroup = SpaceGroup
    def getBeamShift(self): return self.BeamShift
    def setBeamShift(self, BeamShift): self.BeamShift = BeamShift
    def getNumSpotsFound(self): return self.NumSpotsFound
    def setNumSpotsFound(self, NumSpotsFound): self.NumSpotsFound = NumSpotsFound
    def getNumSpotsUsed(self): return self.NumSpotsUsed
    def setNumSpotsUsed(self, NumSpotsUsed): self.NumSpotsUsed = NumSpotsUsed
    def getNumSpotsRejected(self): return self.NumSpotsRejected
    def setNumSpotsRejected(self, NumSpotsRejected): self.NumSpotsRejected = NumSpotsRejected
    def getMosaicity(self): return self.Mosaicity
    def setMosaicity(self, Mosaicity): self.Mosaicity = Mosaicity
    def export(self, outfile, level = 0, name_='db_dnascreenoutput'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_dnascreenoutput'):
        pass
    def exportChildren(self, outfile, level, name_='db_dnascreenoutput'):
        showIndent(outfile, level)
        outfile.write('<OutputResultsID>%d</OutputResultsID>\n' % self.getOutputResultsID())
        showIndent(outfile, level)
        outfile.write('<DNAScreenID>%d</DNAScreenID>\n' % self.getDNAScreenID())
        showIndent(outfile, level)
        outfile.write('<RawOrientationMatrix>%f</RawOrientationMatrix>\n' % self.getRawOrientationMatrix())
        showIndent(outfile, level)
        outfile.write('<StatusDescription>%s</StatusDescription>\n' % quote_xml(self.getStatusDescription()))
        showIndent(outfile, level)
        outfile.write('<ReflectedReflections>%d</ReflectedReflections>\n' % self.getReflectedReflections())
        showIndent(outfile, level)
        outfile.write('<ResolutionObtained>%f</ResolutionObtained>\n' % self.getResolutionObtained())
        showIndent(outfile, level)
        outfile.write('<SpotDeviationR>%f</SpotDeviationR>\n' % self.getSpotDeviationR())
        showIndent(outfile, level)
        outfile.write('<SpotDeviationTheta>%f</SpotDeviationTheta>\n' % self.getSpotDeviationTheta())
        showIndent(outfile, level)
        outfile.write('<UnitCell>%f</UnitCell>\n' % self.getUnitCell())
        showIndent(outfile, level)
        outfile.write('<SpaceGroup>%s</SpaceGroup>\n' % quote_xml(self.getSpaceGroup()))
        showIndent(outfile, level)
        outfile.write('<BeamShift>%d</BeamShift>\n' % self.getBeamShift())
        showIndent(outfile, level)
        outfile.write('<NumSpotsFound>%d</NumSpotsFound>\n' % self.getNumSpotsFound())
        showIndent(outfile, level)
        outfile.write('<NumSpotsUsed>%d</NumSpotsUsed>\n' % self.getNumSpotsUsed())
        showIndent(outfile, level)
        outfile.write('<NumSpotsRejected>%d</NumSpotsRejected>\n' % self.getNumSpotsRejected())
        showIndent(outfile, level)
        outfile.write('<Mosaicity>%f</Mosaicity>\n' % self.getMosaicity())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_dnascreenoutput' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_dnascreenoutput:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_dnascreenoutput' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_dnascreenoutput.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_dnascreenoutput" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_dnascreenoutput'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('OutputResultsID = %d,\n' % self.getOutputResultsID())
        showIndent(outfile, level)
        outfile.write('DNAScreenID = %d,\n' % self.getDNAScreenID())
        showIndent(outfile, level)
        outfile.write('RawOrientationMatrix = %f,\n' % self.getRawOrientationMatrix())
        showIndent(outfile, level)
        outfile.write('StatusDescription = %s,\n' % quote_python(self.getStatusDescription()))
        showIndent(outfile, level)
        outfile.write('ReflectedReflections = %d,\n' % self.getReflectedReflections())
        showIndent(outfile, level)
        outfile.write('ResolutionObtained = %f,\n' % self.getResolutionObtained())
        showIndent(outfile, level)
        outfile.write('SpotDeviationR = %f,\n' % self.getSpotDeviationR())
        showIndent(outfile, level)
        outfile.write('SpotDeviationTheta = %f,\n' % self.getSpotDeviationTheta())
        showIndent(outfile, level)
        outfile.write('UnitCell = %f,\n' % self.getUnitCell())
        showIndent(outfile, level)
        outfile.write('SpaceGroup = %s,\n' % quote_python(self.getSpaceGroup()))
        showIndent(outfile, level)
        outfile.write('BeamShift = %d,\n' % self.getBeamShift())
        showIndent(outfile, level)
        outfile.write('NumSpotsFound = %d,\n' % self.getNumSpotsFound())
        showIndent(outfile, level)
        outfile.write('NumSpotsUsed = %d,\n' % self.getNumSpotsUsed())
        showIndent(outfile, level)
        outfile.write('NumSpotsRejected = %d,\n' % self.getNumSpotsRejected())
        showIndent(outfile, level)
        outfile.write('Mosaicity = %f,\n' % self.getMosaicity())
    def exportLiteralHtml(self, outfile, level = 0, name_='db_dnascreenoutput'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('OutputResultsID = <a  href:"#">%d</a><br>\n' % self.getOutputResultsID())
        showIndentHtml(outfile, level)
        outfile.write('DNAScreenID = <a  href:"#">%d</a><br>\n' % self.getDNAScreenID())
        showIndentHtml(outfile, level)
        outfile.write('RawOrientationMatrix = <a  href:"#">%f</a><br>\n' % self.getRawOrientationMatrix())
        showIndentHtml(outfile, level)
        outfile.write('StatusDescription = <a  href:"#">%s</a><br>\n' % quote_python(self.getStatusDescription()))
        showIndentHtml(outfile, level)
        outfile.write('ReflectedReflections = <a  href:"#">%d</a><br>\n' % self.getReflectedReflections())
        showIndentHtml(outfile, level)
        outfile.write('ResolutionObtained = <a  href:"#">%f</a><br>\n' % self.getResolutionObtained())
        showIndentHtml(outfile, level)
        outfile.write('SpotDeviationR = <a  href:"#">%f</a><br>\n' % self.getSpotDeviationR())
        showIndentHtml(outfile, level)
        outfile.write('SpotDeviationTheta = <a  href:"#">%f</a><br>\n' % self.getSpotDeviationTheta())
        showIndentHtml(outfile, level)
        outfile.write('UnitCell = <a  href:"#">%f</a><br>\n' % self.getUnitCell())
        showIndentHtml(outfile, level)
        outfile.write('SpaceGroup = <a  href:"#">%s</a><br>\n' % quote_python(self.getSpaceGroup()))
        showIndentHtml(outfile, level)
        outfile.write('BeamShift = <a  href:"#">%d</a><br>\n' % self.getBeamShift())
        showIndentHtml(outfile, level)
        outfile.write('NumSpotsFound = <a  href:"#">%d</a><br>\n' % self.getNumSpotsFound())
        showIndentHtml(outfile, level)
        outfile.write('NumSpotsUsed = <a  href:"#">%d</a><br>\n' % self.getNumSpotsUsed())
        showIndentHtml(outfile, level)
        outfile.write('NumSpotsRejected = <a  href:"#">%d</a><br>\n' % self.getNumSpotsRejected())
        showIndentHtml(outfile, level)
        outfile.write('Mosaicity = <a  href:"#">%f</a><br>\n' % self.getMosaicity())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'OutputResultsID':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.OutputResultsID = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'DNAScreenID':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.DNAScreenID = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'RawOrientationMatrix':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.RawOrientationMatrix = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'StatusDescription':
            StatusDescription_ = ''
            for text__content_ in child_.childNodes:
                StatusDescription_ += text__content_.nodeValue
            self.StatusDescription = StatusDescription_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ReflectedReflections':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.ReflectedReflections = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ResolutionObtained':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.ResolutionObtained = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SpotDeviationR':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.SpotDeviationR = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SpotDeviationTheta':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.SpotDeviationTheta = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'UnitCell':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.UnitCell = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SpaceGroup':
            SpaceGroup_ = ''
            for text__content_ in child_.childNodes:
                SpaceGroup_ += text__content_.nodeValue
            self.SpaceGroup = SpaceGroup_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'BeamShift':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.BeamShift = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'NumSpotsFound':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.NumSpotsFound = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'NumSpotsUsed':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.NumSpotsUsed = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'NumSpotsRejected':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                self.NumSpotsRejected = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Mosaicity':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.Mosaicity = fval_
# end class db_dnascreenoutput


class db_dnascreen_request(object):
    subclass = None
    def __init__(self, db_dnascreening=None, db_dnascreeninput=None, db_dnascreenoutput=None):
        self.db_dnascreening = db_dnascreening
        self.db_dnascreeninput = db_dnascreeninput
        self.db_dnascreenoutput = db_dnascreenoutput
    def factory(*args_, **kwargs_):
        if db_dnascreen_request.subclass:
            return db_dnascreen_request.subclass(*args_, **kwargs_)
        else:
            return db_dnascreen_request(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getDb_dnascreening(self): return self.db_dnascreening
    def setDb_dnascreening(self, db_dnascreening): self.db_dnascreening = db_dnascreening
    def getDb_dnascreeninput(self): return self.db_dnascreeninput
    def setDb_dnascreeninput(self, db_dnascreeninput): self.db_dnascreeninput = db_dnascreeninput
    def getDb_dnascreenoutput(self): return self.db_dnascreenoutput
    def setDb_dnascreenoutput(self, db_dnascreenoutput): self.db_dnascreenoutput = db_dnascreenoutput
    def export(self, outfile, level = 0, name_='db_dnascreen_request'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_dnascreen_request'):
        pass
    def exportChildren(self, outfile, level, name_='db_dnascreen_request'):
        if self.db_dnascreening:
            self.db_dnascreening.export(outfile, level)
        if self.db_dnascreeninput:
            self.db_dnascreeninput.export(outfile, level)
        if self.db_dnascreenoutput:
            self.db_dnascreenoutput.export(outfile, level)

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_dnascreen_request' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_dnascreen_request:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_dnascreen_request' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_dnascreen_request.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_dnascreen_request" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_dnascreen_request'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.db_dnascreening:
            showIndent(outfile, level)
            outfile.write('db_dnascreening = db_dnascreening(\n')
            self.db_dnascreening.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.db_dnascreeninput:
            showIndent(outfile, level)
            outfile.write('db_dnascreeninput = db_dnascreeninput(\n')
            self.db_dnascreeninput.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.db_dnascreenoutput:
            showIndent(outfile, level)
            outfile.write('db_dnascreenoutput = db_dnascreenoutput(\n')
            self.db_dnascreenoutput.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='db_dnascreen_request'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        if self.db_dnascreening:
            showIndentHtml(outfile, level)
            outfile.write('db_dnascreening<br>\n')
            self.db_dnascreening.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        if self.db_dnascreeninput:
            showIndentHtml(outfile, level)
            outfile.write('db_dnascreeninput<br>\n')
            self.db_dnascreeninput.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        if self.db_dnascreenoutput:
            showIndentHtml(outfile, level)
            outfile.write('db_dnascreenoutput<br>\n')
            self.db_dnascreenoutput.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'db_dnascreening':
            obj_ = db_dnascreening.factory()
            obj_.build(child_)
            self.setDb_dnascreening(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'db_dnascreeninput':
            obj_ = db_dnascreeninput.factory()
            obj_.build(child_)
            self.setDb_dnascreeninput(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'db_dnascreenoutput':
            obj_ = db_dnascreenoutput.factory()
            obj_.build(child_)
            self.setDb_dnascreenoutput(obj_)
# end class db_dnascreen_request


class db_dnascreen_response(object):
    subclass = None
    def __init__(self, status=None, db_dnascreen_request=None):
        self.status = status
        self.db_dnascreen_request = db_dnascreen_request
    def factory(*args_, **kwargs_):
        if db_dnascreen_response.subclass:
            return db_dnascreen_response.subclass(*args_, **kwargs_)
        else:
            return db_dnascreen_response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getStatus(self): return self.status
    def setStatus(self, status): self.status = status
    def getDb_dnascreen_request(self): return self.db_dnascreen_request
    def setDb_dnascreen_request(self, db_dnascreen_request): self.db_dnascreen_request = db_dnascreen_request
    def export(self, outfile, level = 0, name_='db_dnascreen_response'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='db_dnascreen_response'):
        pass
    def exportChildren(self, outfile, level, name_='db_dnascreen_response'):
        if self.status:
            self.status.export(outfile, level)
        if self.db_dnascreen_request:
            self.db_dnascreen_request.export(outfile, level)

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='db_dnascreen_response' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">db_dnascreen_response:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='db_dnascreen_response' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = db_dnascreen_response.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="db_dnascreen_response" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='db_dnascreen_response'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.status:
            showIndent(outfile, level)
            outfile.write('status = status(\n')
            self.status.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.db_dnascreen_request:
            showIndent(outfile, level)
            outfile.write('db_dnascreen_request = db_dnascreen_request(\n')
            self.db_dnascreen_request.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='db_dnascreen_response'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        if self.status:
            showIndentHtml(outfile, level)
            outfile.write('status<br>\n')
            self.status.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        if self.db_dnascreen_request:
            showIndentHtml(outfile, level)
            outfile.write('db_dnascreen_request<br>\n')
            self.db_dnascreen_request.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'status':
            obj_ = status.factory()
            obj_.build(child_)
            self.setStatus(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'db_dnascreen_request':
            obj_ = db_dnascreen_request.factory()
            obj_.build(child_)
            self.setDb_dnascreen_request(obj_)
# end class db_dnascreen_response


class mosflm_commands(object):
    subclass = None
    def __init__(self, command=None):
        if command is None:
            self.command = []
        else:
            self.command = command
    def factory(*args_, **kwargs_):
        if mosflm_commands.subclass:
            return mosflm_commands.subclass(*args_, **kwargs_)
        else:
            return mosflm_commands(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getCommand(self): return self.command
    def setCommand(self, command): self.command = command
    def addCommand(self, value): self.command.append(value)
    def insertCommand(self, index, value): self.command[index] = value
    def export(self, outfile, level = 0, name_='mosflm_commands'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='mosflm_commands'):
        pass
    def exportChildren(self, outfile, level, name_='mosflm_commands'):
        for command_ in self.getCommand():
            showIndent(outfile, level)
            outfile.write('<command>%s</command>\n' % quote_xml(command_))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='mosflm_commands' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">mosflm_commands:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='mosflm_commands' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = mosflm_commands.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="mosflm_commands" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='mosflm_commands'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('command=[\n')
        level += 1
        for command in self.command:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(command))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='mosflm_commands'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('command<br>\n')
        level += 1
        for command in self.command:
            showIndentHtml(outfile, level)
            outfile.write('<a  href:"#">%s</a><br>\n' % quote_python(command))
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'command':
            command_ = ''
            for text__content_ in child_.childNodes:
                command_ += text__content_.nodeValue
            self.command.append(command_)
# end class mosflm_commands


class scala_commands(object):
    subclass = None
    def __init__(self, command=None):
        if command is None:
            self.command = []
        else:
            self.command = command
    def factory(*args_, **kwargs_):
        if scala_commands.subclass:
            return scala_commands.subclass(*args_, **kwargs_)
        else:
            return scala_commands(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getCommand(self): return self.command
    def setCommand(self, command): self.command = command
    def addCommand(self, value): self.command.append(value)
    def insertCommand(self, index, value): self.command[index] = value
    def export(self, outfile, level = 0, name_='scala_commands'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='scala_commands'):
        pass
    def exportChildren(self, outfile, level, name_='scala_commands'):
        for command_ in self.getCommand():
            showIndent(outfile, level)
            outfile.write('<command>%s</command>\n' % quote_xml(command_))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='scala_commands' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">scala_commands:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='scala_commands' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = scala_commands.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="scala_commands" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='scala_commands'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('command=[\n')
        level += 1
        for command in self.command:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(command))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='scala_commands'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('command<br>\n')
        level += 1
        for command in self.command:
            showIndentHtml(outfile, level)
            outfile.write('<a  href:"#">%s</a><br>\n' % quote_python(command))
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'command':
            command_ = ''
            for text__content_ in child_.childNodes:
                command_ += text__content_.nodeValue
            self.command.append(command_)
# end class scala_commands


class xds_commands(object):
    subclass = None
    def __init__(self, command=None):
        if command is None:
            self.command = []
        else:
            self.command = command
    def factory(*args_, **kwargs_):
        if xds_commands.subclass:
            return xds_commands.subclass(*args_, **kwargs_)
        else:
            return xds_commands(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getCommand(self): return self.command
    def setCommand(self, command): self.command = command
    def addCommand(self, value): self.command.append(value)
    def insertCommand(self, index, value): self.command[index] = value
    def export(self, outfile, level = 0, name_='xds_commands'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='xds_commands'):
        pass
    def exportChildren(self, outfile, level, name_='xds_commands'):
        for command_ in self.getCommand():
            showIndent(outfile, level)
            outfile.write('<command>%s</command>\n' % quote_xml(command_))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='xds_commands' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">xds_commands:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='xds_commands' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = xds_commands.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="xds_commands" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='xds_commands'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('command=[\n')
        level += 1
        for command in self.command:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(command))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='xds_commands'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('command<br>\n')
        level += 1
        for command in self.command:
            showIndentHtml(outfile, level)
            outfile.write('<a  href:"#">%s</a><br>\n' % quote_python(command))
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'command':
            command_ = ''
            for text__content_ in child_.childNodes:
                command_ += text__content_.nodeValue
            self.command.append(command_)
# end class xds_commands


class extra_commands(object):
    subclass = None
    def __init__(self, mosflm_commands=None, scala_commands=None, xds_commands=None):
        self.mosflm_commands = mosflm_commands
        self.scala_commands = scala_commands
        self.xds_commands = xds_commands
    def factory(*args_, **kwargs_):
        if extra_commands.subclass:
            return extra_commands.subclass(*args_, **kwargs_)
        else:
            return extra_commands(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getMosflm_commands(self): return self.mosflm_commands
    def setMosflm_commands(self, mosflm_commands): self.mosflm_commands = mosflm_commands
    def getScala_commands(self): return self.scala_commands
    def setScala_commands(self, scala_commands): self.scala_commands = scala_commands
    def getXds_commands(self): return self.xds_commands
    def setXds_commands(self, xds_commands): self.xds_commands = xds_commands
    def export(self, outfile, level = 0, name_='extra_commands'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='extra_commands'):
        pass
    def exportChildren(self, outfile, level, name_='extra_commands'):
        if self.mosflm_commands:
            self.mosflm_commands.export(outfile, level)
        if self.scala_commands:
            self.scala_commands.export(outfile, level)
        if self.xds_commands:
            self.xds_commands.export(outfile, level)

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='extra_commands' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">extra_commands:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='extra_commands' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = extra_commands.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="extra_commands" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='extra_commands'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.mosflm_commands:
            showIndent(outfile, level)
            outfile.write('mosflm_commands = mosflm_commands(\n')
            self.mosflm_commands.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.scala_commands:
            showIndent(outfile, level)
            outfile.write('scala_commands = scala_commands(\n')
            self.scala_commands.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.xds_commands:
            showIndent(outfile, level)
            outfile.write('xds_commands = xds_commands(\n')
            self.xds_commands.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='extra_commands'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        if self.mosflm_commands:
            showIndentHtml(outfile, level)
            outfile.write('mosflm_commands<br>\n')
            self.mosflm_commands.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        if self.scala_commands:
            showIndentHtml(outfile, level)
            outfile.write('scala_commands<br>\n')
            self.scala_commands.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        if self.xds_commands:
            showIndentHtml(outfile, level)
            outfile.write('xds_commands<br>\n')
            self.xds_commands.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'mosflm_commands':
            obj_ = mosflm_commands.factory()
            obj_.build(child_)
            self.setMosflm_commands(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'scala_commands':
            obj_ = scala_commands.factory()
            obj_.build(child_)
            self.setScala_commands(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'xds_commands':
            obj_ = xds_commands.factory()
            obj_.build(child_)
            self.setXds_commands(obj_)
# end class extra_commands


class status(object):
    subclass = None
    def __init__(self, code='', message=''):
        self.code = code
        self.message = message
    def factory(*args_, **kwargs_):
        if status.subclass:
            return status.subclass(*args_, **kwargs_)
        else:
            return status(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getCode(self): return self.code
    def setCode(self, code): self.code = code
    def getMessage(self): return self.message
    def setMessage(self, message): self.message = message
    def export(self, outfile, level = 0, name_='status'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='status'):
        pass
    def exportChildren(self, outfile, level, name_='status'):
        showIndent(outfile, level)
        outfile.write('<code>%s</code>\n' % quote_xml(self.getCode()))
        showIndent(outfile, level)
        outfile.write('<message>%s</message>\n' % quote_xml(self.getMessage()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='status' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">status:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='status' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = status.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="status" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='status'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('code = %s,\n' % quote_python(self.getCode()))
        showIndent(outfile, level)
        outfile.write('message = %s,\n' % quote_python(self.getMessage()))
    def exportLiteralHtml(self, outfile, level = 0, name_='status'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('code = <a  href:"#">%s</a><br>\n' % quote_python(self.getCode()))
        showIndentHtml(outfile, level)
        outfile.write('message = <a  href:"#">%s</a><br>\n' % quote_python(self.getMessage()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'code':
            code_ = ''
            for text__content_ in child_.childNodes:
                code_ += text__content_.nodeValue
            self.code = code_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'message':
            message_ = ''
            for text__content_ in child_.childNodes:
                message_ += text__content_.nodeValue
            self.message = message_
# end class status


class fileinfo(object):
    subclass = None
    def __init__(self, directory='', prefix='', suffix='', template='', run_number=''):
        self.directory = directory
        self.prefix = prefix
        self.suffix = suffix
        self.template = template
        self.run_number = run_number
    def factory(*args_, **kwargs_):
        if fileinfo.subclass:
            return fileinfo.subclass(*args_, **kwargs_)
        else:
            return fileinfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getDirectory(self): return self.directory
    def setDirectory(self, directory): self.directory = directory
    def getPrefix(self): return self.prefix
    def setPrefix(self, prefix): self.prefix = prefix
    def getSuffix(self): return self.suffix
    def setSuffix(self, suffix): self.suffix = suffix
    def getTemplate(self): return self.template
    def setTemplate(self, template): self.template = template
    def getRun_number(self): return self.run_number
    def setRun_number(self, run_number): self.run_number = run_number
    def export(self, outfile, level = 0, name_='fileinfo'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='fileinfo'):
        pass
    def exportChildren(self, outfile, level, name_='fileinfo'):
        showIndent(outfile, level)
        outfile.write('<directory>%s</directory>\n' % quote_xml(self.getDirectory()))
        showIndent(outfile, level)
        outfile.write('<prefix>%s</prefix>\n' % quote_xml(self.getPrefix()))
        showIndent(outfile, level)
        outfile.write('<suffix>%s</suffix>\n' % quote_xml(self.getSuffix()))
        showIndent(outfile, level)
        outfile.write('<template>%s</template>\n' % quote_xml(self.getTemplate()))
        showIndent(outfile, level)
        outfile.write('<run_number>%s</run_number>\n' % quote_xml(self.getRun_number()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='fileinfo' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">fileinfo:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='fileinfo' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = fileinfo.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="fileinfo" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='fileinfo'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('directory = %s,\n' % quote_python(self.getDirectory()))
        showIndent(outfile, level)
        outfile.write('prefix = %s,\n' % quote_python(self.getPrefix()))
        showIndent(outfile, level)
        outfile.write('suffix = %s,\n' % quote_python(self.getSuffix()))
        showIndent(outfile, level)
        outfile.write('template = %s,\n' % quote_python(self.getTemplate()))
        showIndent(outfile, level)
        outfile.write('run_number = %s,\n' % quote_python(self.getRun_number()))
    def exportLiteralHtml(self, outfile, level = 0, name_='fileinfo'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('directory = <a  href:"#">%s</a><br>\n' % quote_python(self.getDirectory()))
        showIndentHtml(outfile, level)
        outfile.write('prefix = <a  href:"#">%s</a><br>\n' % quote_python(self.getPrefix()))
        showIndentHtml(outfile, level)
        outfile.write('suffix = <a  href:"#">%s</a><br>\n' % quote_python(self.getSuffix()))
        showIndentHtml(outfile, level)
        outfile.write('template = <a  href:"#">%s</a><br>\n' % quote_python(self.getTemplate()))
        showIndentHtml(outfile, level)
        outfile.write('run_number = <a  href:"#">%s</a><br>\n' % quote_python(self.getRun_number()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'directory':
            directory_ = ''
            for text__content_ in child_.childNodes:
                directory_ += text__content_.nodeValue
            self.directory = directory_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'prefix':
            prefix_ = ''
            for text__content_ in child_.childNodes:
                prefix_ += text__content_.nodeValue
            self.prefix = prefix_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'suffix':
            suffix_ = ''
            for text__content_ in child_.childNodes:
                suffix_ += text__content_.nodeValue
            self.suffix = suffix_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'template':
            template_ = ''
            for text__content_ in child_.childNodes:
                template_ += text__content_.nodeValue
            self.template = template_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'run_number':
            run_number_ = ''
            for text__content_ in child_.childNodes:
                run_number_ += text__content_.nodeValue
            self.run_number = run_number_
# end class fileinfo


class oscillation_sequence(object):
    subclass = None
    def __init__(self, start=0.0, end=0.0, range=0.0, number_of_images='', overlap=0.0, exposure_time=0.0, start_image_number='', number_of_passes=''):
        self.start = start
        self.end = end
        self.range = range
        self.number_of_images = number_of_images
        self.overlap = overlap
        self.exposure_time = exposure_time
        self.start_image_number = start_image_number
        self.number_of_passes = number_of_passes
    def factory(*args_, **kwargs_):
        if oscillation_sequence.subclass:
            return oscillation_sequence.subclass(*args_, **kwargs_)
        else:
            return oscillation_sequence(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getStart(self): return self.start
    def setStart(self, start): self.start = start
    def getEnd(self): return self.end
    def setEnd(self, end): self.end = end
    def getRange(self): return self.range
    def setRange(self, range): self.range = range
    def getNumber_of_images(self): return self.number_of_images
    def setNumber_of_images(self, number_of_images): self.number_of_images = number_of_images
    def getOverlap(self): return self.overlap
    def setOverlap(self, overlap): self.overlap = overlap
    def getExposure_time(self): return self.exposure_time
    def setExposure_time(self, exposure_time): self.exposure_time = exposure_time
    def getStart_image_number(self): return self.start_image_number
    def setStart_image_number(self, start_image_number): self.start_image_number = start_image_number
    def getNumber_of_passes(self): return self.number_of_passes
    def setNumber_of_passes(self, number_of_passes): self.number_of_passes = number_of_passes
    def export(self, outfile, level = 0, name_='oscillation_sequence'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='oscillation_sequence'):
        pass
    def exportChildren(self, outfile, level, name_='oscillation_sequence'):
        showIndent(outfile, level)
        outfile.write('<start>%e</start>\n' % self.getStart())
        showIndent(outfile, level)
        outfile.write('<end>%e</end>\n' % self.getEnd())
        showIndent(outfile, level)
        outfile.write('<range>%e</range>\n' % self.getRange())
        showIndent(outfile, level)
        outfile.write('<number_of_images>%s</number_of_images>\n' % quote_xml(self.getNumber_of_images()))
        showIndent(outfile, level)
        outfile.write('<overlap>%e</overlap>\n' % self.getOverlap())
        showIndent(outfile, level)
        outfile.write('<exposure_time>%e</exposure_time>\n' % self.getExposure_time())
        showIndent(outfile, level)
        outfile.write('<start_image_number>%s</start_image_number>\n' % quote_xml(self.getStart_image_number()))
        showIndent(outfile, level)
        outfile.write('<number_of_passes>%s</number_of_passes>\n' % quote_xml(self.getNumber_of_passes()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='oscillation_sequence' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">oscillation_sequence:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='oscillation_sequence' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = oscillation_sequence.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="oscillation_sequence" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='oscillation_sequence'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('start = %e,\n' % self.getStart())
        showIndent(outfile, level)
        outfile.write('end = %e,\n' % self.getEnd())
        showIndent(outfile, level)
        outfile.write('range = %e,\n' % self.getRange())
        showIndent(outfile, level)
        outfile.write('number_of_images = %s,\n' % quote_python(self.getNumber_of_images()))
        showIndent(outfile, level)
        outfile.write('overlap = %e,\n' % self.getOverlap())
        showIndent(outfile, level)
        outfile.write('exposure_time = %e,\n' % self.getExposure_time())
        showIndent(outfile, level)
        outfile.write('start_image_number = %s,\n' % quote_python(self.getStart_image_number()))
        showIndent(outfile, level)
        outfile.write('number_of_passes = %s,\n' % quote_python(self.getNumber_of_passes()))
    def exportLiteralHtml(self, outfile, level = 0, name_='oscillation_sequence'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('start = <a  href:"#">%e</a><br>\n' % self.getStart())
        showIndentHtml(outfile, level)
        outfile.write('end = <a  href:"#">%e</a><br>\n' % self.getEnd())
        showIndentHtml(outfile, level)
        outfile.write('range = <a  href:"#">%e</a><br>\n' % self.getRange())
        showIndentHtml(outfile, level)
        outfile.write('number_of_images = <a  href:"#">%s</a><br>\n' % quote_python(self.getNumber_of_images()))
        showIndentHtml(outfile, level)
        outfile.write('overlap = <a  href:"#">%e</a><br>\n' % self.getOverlap())
        showIndentHtml(outfile, level)
        outfile.write('exposure_time = <a  href:"#">%e</a><br>\n' % self.getExposure_time())
        showIndentHtml(outfile, level)
        outfile.write('start_image_number = <a  href:"#">%s</a><br>\n' % quote_python(self.getStart_image_number()))
        showIndentHtml(outfile, level)
        outfile.write('number_of_passes = <a  href:"#">%s</a><br>\n' % quote_python(self.getNumber_of_passes()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'start':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.start = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'end':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.end = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'range':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.range = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'number_of_images':
            number_of_images_ = ''
            for text__content_ in child_.childNodes:
                number_of_images_ += text__content_.nodeValue
            self.number_of_images = number_of_images_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'overlap':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.overlap = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'exposure_time':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.exposure_time = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'start_image_number':
            start_image_number_ = ''
            for text__content_ in child_.childNodes:
                start_image_number_ += text__content_.nodeValue
            self.start_image_number = start_image_number_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'number_of_passes':
            number_of_passes_ = ''
            for text__content_ in child_.childNodes:
                number_of_passes_ += text__content_.nodeValue
            self.number_of_passes = number_of_passes_
# end class oscillation_sequence


class detector(object):
    subclass = None
    def __init__(self, ttype='', suffix=''):
        self.ttype = ttype
        self.suffix = suffix
    def factory(*args_, **kwargs_):
        if detector.subclass:
            return detector.subclass(*args_, **kwargs_)
        else:
            return detector(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getType(self): return self.ttype
    def setType(self, ttype): self.ttype = ttype
    def getSuffix(self): return self.suffix
    def setSuffix(self, suffix): self.suffix = suffix
    def export(self, outfile, level = 0, name_='detector'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='detector'):
        pass
    def exportChildren(self, outfile, level, name_='detector'):
        showIndent(outfile, level)
        outfile.write('<type>%s</type>\n' % quote_xml(self.getType()))
        showIndent(outfile, level)
        outfile.write('<suffix>%s</suffix>\n' % quote_xml(self.getSuffix()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='detector' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">detector:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='detector' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = detector.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="detector" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='detector'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('ttype = %s,\n' % quote_python(self.getType()))
        showIndent(outfile, level)
        outfile.write('suffix = %s,\n' % quote_python(self.getSuffix()))
    def exportLiteralHtml(self, outfile, level = 0, name_='detector'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('ttype = <a  href:"#">%s</a><br>\n' % quote_python(self.getType()))
        showIndentHtml(outfile, level)
        outfile.write('suffix = <a  href:"#">%s</a><br>\n' % quote_python(self.getSuffix()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'type':
            type_ = ''
            for text__content_ in child_.childNodes:
                type_ += text__content_.nodeValue
            self.ttype = type_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'suffix':
            suffix_ = ''
            for text__content_ in child_.childNodes:
                suffix_ += text__content_.nodeValue
            self.suffix = suffix_
# end class detector


class beam(object):
    subclass = None
    def __init__(self, x=0.0, y=0.0):
        self.x = x
        self.y = y
    def factory(*args_, **kwargs_):
        if beam.subclass:
            return beam.subclass(*args_, **kwargs_)
        else:
            return beam(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getX(self): return self.x
    def setX(self, x): self.x = x
    def getY(self): return self.y
    def setY(self, y): self.y = y
    def export(self, outfile, level = 0, name_='beam'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='beam'):
        pass
    def exportChildren(self, outfile, level, name_='beam'):
        showIndent(outfile, level)
        outfile.write('<x>%e</x>\n' % self.getX())
        showIndent(outfile, level)
        outfile.write('<y>%e</y>\n' % self.getY())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='beam' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">beam:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='beam' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = beam.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="beam" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='beam'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('x = %e,\n' % self.getX())
        showIndent(outfile, level)
        outfile.write('y = %e,\n' % self.getY())
    def exportLiteralHtml(self, outfile, level = 0, name_='beam'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('x = <a  href:"#">%e</a><br>\n' % self.getX())
        showIndentHtml(outfile, level)
        outfile.write('y = <a  href:"#">%e</a><br>\n' % self.getY())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'x':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.x = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'y':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.y = fval_
# end class beam


class cell(object):
    subclass = None
    def __init__(self, a=0.0, b=0.0, c=0.0, alpha=0.0, beta=0.0, gamma=0.0):
        self.a = a
        self.b = b
        self.c = c
        self.alpha = alpha
        self.beta = beta
        self.gamma = gamma
    def factory(*args_, **kwargs_):
        if cell.subclass:
            return cell.subclass(*args_, **kwargs_)
        else:
            return cell(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getA(self): return self.a
    def setA(self, a): self.a = a
    def getB(self): return self.b
    def setB(self, b): self.b = b
    def getC(self): return self.c
    def setC(self, c): self.c = c
    def getAlpha(self): return self.alpha
    def setAlpha(self, alpha): self.alpha = alpha
    def getBeta(self): return self.beta
    def setBeta(self, beta): self.beta = beta
    def getGamma(self): return self.gamma
    def setGamma(self, gamma): self.gamma = gamma
    def export(self, outfile, level = 0, name_='cell'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='cell'):
        pass
    def exportChildren(self, outfile, level, name_='cell'):
        showIndent(outfile, level)
        outfile.write('<a>%e</a>\n' % self.getA())
        showIndent(outfile, level)
        outfile.write('<b>%e</b>\n' % self.getB())
        showIndent(outfile, level)
        outfile.write('<c>%e</c>\n' % self.getC())
        showIndent(outfile, level)
        outfile.write('<alpha>%e</alpha>\n' % self.getAlpha())
        showIndent(outfile, level)
        outfile.write('<beta>%e</beta>\n' % self.getBeta())
        showIndent(outfile, level)
        outfile.write('<gamma>%e</gamma>\n' % self.getGamma())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='cell' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">cell:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='cell' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = cell.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="cell" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='cell'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('a = %e,\n' % self.getA())
        showIndent(outfile, level)
        outfile.write('b = %e,\n' % self.getB())
        showIndent(outfile, level)
        outfile.write('c = %e,\n' % self.getC())
        showIndent(outfile, level)
        outfile.write('alpha = %e,\n' % self.getAlpha())
        showIndent(outfile, level)
        outfile.write('beta = %e,\n' % self.getBeta())
        showIndent(outfile, level)
        outfile.write('gamma = %e,\n' % self.getGamma())
    def exportLiteralHtml(self, outfile, level = 0, name_='cell'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('a = <a  href:"#">%e</a><br>\n' % self.getA())
        showIndentHtml(outfile, level)
        outfile.write('b = <a  href:"#">%e</a><br>\n' % self.getB())
        showIndentHtml(outfile, level)
        outfile.write('c = <a  href:"#">%e</a><br>\n' % self.getC())
        showIndentHtml(outfile, level)
        outfile.write('alpha = <a  href:"#">%e</a><br>\n' % self.getAlpha())
        showIndentHtml(outfile, level)
        outfile.write('beta = <a  href:"#">%e</a><br>\n' % self.getBeta())
        showIndentHtml(outfile, level)
        outfile.write('gamma = <a  href:"#">%e</a><br>\n' % self.getGamma())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'a':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.a = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'b':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.b = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'c':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.c = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'alpha':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.alpha = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'beta':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.beta = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'gamma':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.gamma = fval_
# end class cell


class experiment(object):
    subclass = None
    def __init__(self, wavelength=0.0, distance=0.0, resolution=None):
        self.wavelength = wavelength
        self.distance = distance
        self.resolution = resolution
    def factory(*args_, **kwargs_):
        if experiment.subclass:
            return experiment.subclass(*args_, **kwargs_)
        else:
            return experiment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getWavelength(self): return self.wavelength
    def setWavelength(self, wavelength): self.wavelength = wavelength
    def getDistance(self): return self.distance
    def setDistance(self, distance): self.distance = distance
    def getResolution(self): return self.resolution
    def setResolution(self, resolution): self.resolution = resolution
    def export(self, outfile, level = 0, name_='experiment'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='experiment'):
        pass
    def exportChildren(self, outfile, level, name_='experiment'):
        showIndent(outfile, level)
        outfile.write('<wavelength>%e</wavelength>\n' % self.getWavelength())
        showIndent(outfile, level)
        outfile.write('<distance>%e</distance>\n' % self.getDistance())
        if self.resolution:
            self.resolution.export(outfile, level)

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='experiment' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">experiment:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='experiment' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = experiment.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="experiment" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='experiment'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('wavelength = %e,\n' % self.getWavelength())
        showIndent(outfile, level)
        outfile.write('distance = %e,\n' % self.getDistance())
        if self.resolution:
            showIndent(outfile, level)
            outfile.write('resolution = resolution(\n')
            self.resolution.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='experiment'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('wavelength = <a  href:"#">%e</a><br>\n' % self.getWavelength())
        showIndentHtml(outfile, level)
        outfile.write('distance = <a  href:"#">%e</a><br>\n' % self.getDistance())
        if self.resolution:
            showIndentHtml(outfile, level)
            outfile.write('resolution<br>\n')
            self.resolution.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'wavelength':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.wavelength = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'distance':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.distance = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'resolution':
            obj_ = resolution.factory()
            obj_.build(child_)
            self.setResolution(obj_)
# end class experiment


class matrix(object):
    subclass = None
    def __init__(self, e11=0.0, e12=0.0, e13=0.0, e21=0.0, e22=0.0, e23=0.0, e31=0.0, e32=0.0, e33=0.0):
        self.e11 = e11
        self.e12 = e12
        self.e13 = e13
        self.e21 = e21
        self.e22 = e22
        self.e23 = e23
        self.e31 = e31
        self.e32 = e32
        self.e33 = e33
    def factory(*args_, **kwargs_):
        if matrix.subclass:
            return matrix.subclass(*args_, **kwargs_)
        else:
            return matrix(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getE11(self): return self.e11
    def setE11(self, e11): self.e11 = e11
    def getE12(self): return self.e12
    def setE12(self, e12): self.e12 = e12
    def getE13(self): return self.e13
    def setE13(self, e13): self.e13 = e13
    def getE21(self): return self.e21
    def setE21(self, e21): self.e21 = e21
    def getE22(self): return self.e22
    def setE22(self, e22): self.e22 = e22
    def getE23(self): return self.e23
    def setE23(self, e23): self.e23 = e23
    def getE31(self): return self.e31
    def setE31(self, e31): self.e31 = e31
    def getE32(self): return self.e32
    def setE32(self, e32): self.e32 = e32
    def getE33(self): return self.e33
    def setE33(self, e33): self.e33 = e33
    def export(self, outfile, level = 0, name_='matrix'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='matrix'):
        pass
    def exportChildren(self, outfile, level, name_='matrix'):
        showIndent(outfile, level)
        outfile.write('<e11>%e</e11>\n' % self.getE11())
        showIndent(outfile, level)
        outfile.write('<e12>%e</e12>\n' % self.getE12())
        showIndent(outfile, level)
        outfile.write('<e13>%e</e13>\n' % self.getE13())
        showIndent(outfile, level)
        outfile.write('<e21>%e</e21>\n' % self.getE21())
        showIndent(outfile, level)
        outfile.write('<e22>%e</e22>\n' % self.getE22())
        showIndent(outfile, level)
        outfile.write('<e23>%e</e23>\n' % self.getE23())
        showIndent(outfile, level)
        outfile.write('<e31>%e</e31>\n' % self.getE31())
        showIndent(outfile, level)
        outfile.write('<e32>%e</e32>\n' % self.getE32())
        showIndent(outfile, level)
        outfile.write('<e33>%e</e33>\n' % self.getE33())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='matrix' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">matrix:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='matrix' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = matrix.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="matrix" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='matrix'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('e11 = %e,\n' % self.getE11())
        showIndent(outfile, level)
        outfile.write('e12 = %e,\n' % self.getE12())
        showIndent(outfile, level)
        outfile.write('e13 = %e,\n' % self.getE13())
        showIndent(outfile, level)
        outfile.write('e21 = %e,\n' % self.getE21())
        showIndent(outfile, level)
        outfile.write('e22 = %e,\n' % self.getE22())
        showIndent(outfile, level)
        outfile.write('e23 = %e,\n' % self.getE23())
        showIndent(outfile, level)
        outfile.write('e31 = %e,\n' % self.getE31())
        showIndent(outfile, level)
        outfile.write('e32 = %e,\n' % self.getE32())
        showIndent(outfile, level)
        outfile.write('e33 = %e,\n' % self.getE33())
    def exportLiteralHtml(self, outfile, level = 0, name_='matrix'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('e11 = <a  href:"#">%e</a><br>\n' % self.getE11())
        showIndentHtml(outfile, level)
        outfile.write('e12 = <a  href:"#">%e</a><br>\n' % self.getE12())
        showIndentHtml(outfile, level)
        outfile.write('e13 = <a  href:"#">%e</a><br>\n' % self.getE13())
        showIndentHtml(outfile, level)
        outfile.write('e21 = <a  href:"#">%e</a><br>\n' % self.getE21())
        showIndentHtml(outfile, level)
        outfile.write('e22 = <a  href:"#">%e</a><br>\n' % self.getE22())
        showIndentHtml(outfile, level)
        outfile.write('e23 = <a  href:"#">%e</a><br>\n' % self.getE23())
        showIndentHtml(outfile, level)
        outfile.write('e31 = <a  href:"#">%e</a><br>\n' % self.getE31())
        showIndentHtml(outfile, level)
        outfile.write('e32 = <a  href:"#">%e</a><br>\n' % self.getE32())
        showIndentHtml(outfile, level)
        outfile.write('e33 = <a  href:"#">%e</a><br>\n' % self.getE33())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'e11':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.e11 = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'e12':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.e12 = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'e13':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.e13 = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'e21':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.e21 = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'e22':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.e22 = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'e23':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.e23 = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'e31':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.e31 = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'e32':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.e32 = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'e33':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.e33 = fval_
# end class matrix


class dna_message(object):
    subclass = None
    def __init__(self, ttype='', content_type='', level='', message=''):
        self.ttype = ttype
        self.content_type = content_type
        self.level = level
        self.message = message
    def factory(*args_, **kwargs_):
        if dna_message.subclass:
            return dna_message.subclass(*args_, **kwargs_)
        else:
            return dna_message(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getType(self): return self.ttype
    def setType(self, ttype): self.ttype = ttype
    def getContent_type(self): return self.content_type
    def setContent_type(self, content_type): self.content_type = content_type
    def getLevel(self): return self.level
    def setLevel(self, level): self.level = level
    def getMessage(self): return self.message
    def setMessage(self, message): self.message = message
    def export(self, outfile, level = 0, name_='dna_message'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='dna_message'):
        pass
    def exportChildren(self, outfile, level, name_='dna_message'):
        showIndent(outfile, level)
        outfile.write('<type>%s</type>\n' % quote_xml(self.getType()))
        showIndent(outfile, level)
        outfile.write('<content_type>%s</content_type>\n' % quote_xml(self.getContent_type()))
        showIndent(outfile, level)
        outfile.write('<level>%s</level>\n' % quote_xml(self.getLevel()))
        showIndent(outfile, level)
        outfile.write('<message>%s</message>\n' % quote_xml(self.getMessage()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='dna_message' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">dna_message:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='dna_message' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = dna_message.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="dna_message" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='dna_message'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('ttype = %s,\n' % quote_python(self.getType()))
        showIndent(outfile, level)
        outfile.write('content_type = %s,\n' % quote_python(self.getContent_type()))
        showIndent(outfile, level)
        outfile.write('level = %s,\n' % quote_python(self.getLevel()))
        showIndent(outfile, level)
        outfile.write('message = %s,\n' % quote_python(self.getMessage()))
    def exportLiteralHtml(self, outfile, level = 0, name_='dna_message'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('ttype = <a  href:"#">%s</a><br>\n' % quote_python(self.getType()))
        showIndentHtml(outfile, level)
        outfile.write('content_type = <a  href:"#">%s</a><br>\n' % quote_python(self.getContent_type()))
        showIndentHtml(outfile, level)
        outfile.write('level = <a  href:"#">%s</a><br>\n' % quote_python(self.getLevel()))
        showIndentHtml(outfile, level)
        outfile.write('message = <a  href:"#">%s</a><br>\n' % quote_python(self.getMessage()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'type':
            type_ = ''
            for text__content_ in child_.childNodes:
                type_ += text__content_.nodeValue
            self.ttype = type_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'content_type':
            content_type_ = ''
            for text__content_ in child_.childNodes:
                content_type_ += text__content_.nodeValue
            self.content_type = content_type_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'level':
            level_ = ''
            for text__content_ in child_.childNodes:
                level_ += text__content_.nodeValue
            self.level = level_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'message':
            message_ = ''
            for text__content_ in child_.childNodes:
                message_ += text__content_.nodeValue
            self.message = message_
# end class dna_message


class input_reflections(object):
    subclass = None
    def __init__(self, hklin=None):
        if hklin is None:
            self.hklin = []
        else:
            self.hklin = hklin
    def factory(*args_, **kwargs_):
        if input_reflections.subclass:
            return input_reflections.subclass(*args_, **kwargs_)
        else:
            return input_reflections(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getHklin(self): return self.hklin
    def setHklin(self, hklin): self.hklin = hklin
    def addHklin(self, value): self.hklin.append(value)
    def insertHklin(self, index, value): self.hklin[index] = value
    def export(self, outfile, level = 0, name_='input_reflections'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='input_reflections'):
        pass
    def exportChildren(self, outfile, level, name_='input_reflections'):
        for hklin_ in self.getHklin():
            showIndent(outfile, level)
            outfile.write('<hklin>%s</hklin>\n' % quote_xml(hklin_))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='input_reflections' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">input_reflections:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='input_reflections' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = input_reflections.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="input_reflections" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='input_reflections'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('hklin=[\n')
        level += 1
        for hklin in self.hklin:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(hklin))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='input_reflections'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('hklin<br>\n')
        level += 1
        for hklin in self.hklin:
            showIndentHtml(outfile, level)
            outfile.write('<a  href:"#">%s</a><br>\n' % quote_python(hklin))
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'hklin':
            hklin_ = ''
            for text__content_ in child_.childNodes:
                hklin_ += text__content_.nodeValue
            self.hklin.append(hklin_)
# end class input_reflections


class output_reflections(object):
    subclass = None
    def __init__(self, hklout=''):
        self.hklout = hklout
    def factory(*args_, **kwargs_):
        if output_reflections.subclass:
            return output_reflections.subclass(*args_, **kwargs_)
        else:
            return output_reflections(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getHklout(self): return self.hklout
    def setHklout(self, hklout): self.hklout = hklout
    def export(self, outfile, level = 0, name_='output_reflections'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='output_reflections'):
        pass
    def exportChildren(self, outfile, level, name_='output_reflections'):
        showIndent(outfile, level)
        outfile.write('<hklout>%s</hklout>\n' % quote_xml(self.getHklout()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='output_reflections' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">output_reflections:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='output_reflections' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = output_reflections.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="output_reflections" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='output_reflections'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('hklout = %s,\n' % quote_python(self.getHklout()))
    def exportLiteralHtml(self, outfile, level = 0, name_='output_reflections'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('hklout = <a  href:"#">%s</a><br>\n' % quote_python(self.getHklout()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'hklout':
            hklout_ = ''
            for text__content_ in child_.childNodes:
                hklout_ += text__content_.nodeValue
            self.hklout = hklout_
# end class output_reflections


class resolution(object):
    subclass = None
    def __init__(self, lower=0.0, upper=0.0):
        self.lower = lower
        self.upper = upper
    def factory(*args_, **kwargs_):
        if resolution.subclass:
            return resolution.subclass(*args_, **kwargs_)
        else:
            return resolution(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getLower(self): return self.lower
    def setLower(self, lower): self.lower = lower
    def getUpper(self): return self.upper
    def setUpper(self, upper): self.upper = upper
    def export(self, outfile, level = 0, name_='resolution'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='resolution'):
        pass
    def exportChildren(self, outfile, level, name_='resolution'):
        showIndent(outfile, level)
        outfile.write('<lower>%e</lower>\n' % self.getLower())
        showIndent(outfile, level)
        outfile.write('<upper>%e</upper>\n' % self.getUpper())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='resolution' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">resolution:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='resolution' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = resolution.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="resolution" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='resolution'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('lower = %e,\n' % self.getLower())
        showIndent(outfile, level)
        outfile.write('upper = %e,\n' % self.getUpper())
    def exportLiteralHtml(self, outfile, level = 0, name_='resolution'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('lower = <a  href:"#">%e</a><br>\n' % self.getLower())
        showIndentHtml(outfile, level)
        outfile.write('upper = <a  href:"#">%e</a><br>\n' % self.getUpper())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'lower':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.lower = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'upper':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.upper = fval_
# end class resolution


class abort_request(object):
    subclass = None
    def __init__(self, level=''):
        self.level = level
    def factory(*args_, **kwargs_):
        if abort_request.subclass:
            return abort_request.subclass(*args_, **kwargs_)
        else:
            return abort_request(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getLevel(self): return self.level
    def setLevel(self, level): self.level = level
    def export(self, outfile, level = 0, name_='abort_request'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='abort_request'):
        pass
    def exportChildren(self, outfile, level, name_='abort_request'):
        showIndent(outfile, level)
        outfile.write('<level>%s</level>\n' % quote_xml(self.getLevel()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='abort_request' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">abort_request:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='abort_request' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = abort_request.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="abort_request" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='abort_request'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('level = %s,\n' % quote_python(self.getLevel()))
    def exportLiteralHtml(self, outfile, level = 0, name_='abort_request'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('level = <a  href:"#">%s</a><br>\n' % quote_python(self.getLevel()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'level':
            level_ = ''
            for text__content_ in child_.childNodes:
                level_ += text__content_.nodeValue
            self.level = level_
# end class abort_request


class abort_response(object):
    subclass = None
    def __init__(self, status=None):
        self.status = status
    def factory(*args_, **kwargs_):
        if abort_response.subclass:
            return abort_response.subclass(*args_, **kwargs_)
        else:
            return abort_response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getStatus(self): return self.status
    def setStatus(self, status): self.status = status
    def export(self, outfile, level = 0, name_='abort_response'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='abort_response'):
        pass
    def exportChildren(self, outfile, level, name_='abort_response'):
        if self.status:
            self.status.export(outfile, level)

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='abort_response' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">abort_response:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='abort_response' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = abort_response.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="abort_response" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='abort_response'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.status:
            showIndent(outfile, level)
            outfile.write('status = status(\n')
            self.status.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='abort_response'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        if self.status:
            showIndentHtml(outfile, level)
            outfile.write('status<br>\n')
            self.status.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'status':
            obj_ = status.factory()
            obj_.build(child_)
            self.setStatus(obj_)
# end class abort_response


class sample_reference(object):
    subclass = None
    def __init__(self, code='', container_reference='', container_code='', sample_location='', blSampleId=''):
        self.code = code
        self.container_reference = container_reference
        self.container_code = container_code
        self.sample_location = sample_location
        self.blSampleId = blSampleId
    def factory(*args_, **kwargs_):
        if sample_reference.subclass:
            return sample_reference.subclass(*args_, **kwargs_)
        else:
            return sample_reference(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getCode(self): return self.code
    def setCode(self, code): self.code = code
    def getContainer_reference(self): return self.container_reference
    def setContainer_reference(self, container_reference): self.container_reference = container_reference
    def getContainer_code(self): return self.container_code
    def setContainer_code(self, container_code): self.container_code = container_code
    def getSample_location(self): return self.sample_location
    def setSample_location(self, sample_location): self.sample_location = sample_location
    def getBlSampleId(self): return self.blSampleId
    def setBlSampleId(self, blSampleId): self.blSampleId = blSampleId
    def export(self, outfile, level = 0, name_='sample_reference'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='sample_reference'):
        pass
    def exportChildren(self, outfile, level, name_='sample_reference'):
        showIndent(outfile, level)
        outfile.write('<code>%s</code>\n' % quote_xml(self.getCode()))
        showIndent(outfile, level)
        outfile.write('<container_reference>%s</container_reference>\n' % quote_xml(self.getContainer_reference()))
        showIndent(outfile, level)
        outfile.write('<container_code>%s</container_code>\n' % quote_xml(self.getContainer_code()))
        showIndent(outfile, level)
        outfile.write('<sample_location>%s</sample_location>\n' % quote_xml(self.getSample_location()))
        showIndent(outfile, level)
        outfile.write('<blSampleId>%s</blSampleId>\n' % quote_xml(self.getBlSampleId()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='sample_reference' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">sample_reference:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='sample_reference' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = sample_reference.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="sample_reference" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='sample_reference'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('code = %s,\n' % quote_python(self.getCode()))
        showIndent(outfile, level)
        outfile.write('container_reference = %s,\n' % quote_python(self.getContainer_reference()))
        showIndent(outfile, level)
        outfile.write('container_code = %s,\n' % quote_python(self.getContainer_code()))
        showIndent(outfile, level)
        outfile.write('sample_location = %s,\n' % quote_python(self.getSample_location()))
        showIndent(outfile, level)
        outfile.write('blSampleId = %s,\n' % quote_python(self.getBlSampleId()))
    def exportLiteralHtml(self, outfile, level = 0, name_='sample_reference'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('code = <a  href:"#">%s</a><br>\n' % quote_python(self.getCode()))
        showIndentHtml(outfile, level)
        outfile.write('container_reference = <a  href:"#">%s</a><br>\n' % quote_python(self.getContainer_reference()))
        showIndentHtml(outfile, level)
        outfile.write('container_code = <a  href:"#">%s</a><br>\n' % quote_python(self.getContainer_code()))
        showIndentHtml(outfile, level)
        outfile.write('sample_location = <a  href:"#">%s</a><br>\n' % quote_python(self.getSample_location()))
        showIndentHtml(outfile, level)
        outfile.write('blSampleId = <a  href:"#">%s</a><br>\n' % quote_python(self.getBlSampleId()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'code':
            code_ = ''
            for text__content_ in child_.childNodes:
                code_ += text__content_.nodeValue
            self.code = code_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'container_reference':
            container_reference_ = ''
            for text__content_ in child_.childNodes:
                container_reference_ += text__content_.nodeValue
            self.container_reference = container_reference_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'container_code':
            container_code_ = ''
            for text__content_ in child_.childNodes:
                container_code_ += text__content_.nodeValue
            self.container_code = container_code_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sample_location':
            sample_location_ = ''
            for text__content_ in child_.childNodes:
                sample_location_ += text__content_.nodeValue
            self.sample_location = sample_location_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'blSampleId':
            blSampleId_ = ''
            for text__content_ in child_.childNodes:
                blSampleId_ += text__content_.nodeValue
            self.blSampleId = blSampleId_
# end class sample_reference


class beamline_parameters(object):
    subclass = None
    def __init__(self, maximum_exposure=0.0, minimum_exposure_time=0.0, minimum_phi_speed=0.0, maximum_phi_speed=0.0, minimum_phi_oscillation=0.0):
        self.maximum_exposure = maximum_exposure
        self.minimum_exposure_time = minimum_exposure_time
        self.minimum_phi_speed = minimum_phi_speed
        self.maximum_phi_speed = maximum_phi_speed
        self.minimum_phi_oscillation = minimum_phi_oscillation
    def factory(*args_, **kwargs_):
        if beamline_parameters.subclass:
            return beamline_parameters.subclass(*args_, **kwargs_)
        else:
            return beamline_parameters(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getMaximum_exposure(self): return self.maximum_exposure
    def setMaximum_exposure(self, maximum_exposure): self.maximum_exposure = maximum_exposure
    def getMinimum_exposure_time(self): return self.minimum_exposure_time
    def setMinimum_exposure_time(self, minimum_exposure_time): self.minimum_exposure_time = minimum_exposure_time
    def getMinimum_phi_speed(self): return self.minimum_phi_speed
    def setMinimum_phi_speed(self, minimum_phi_speed): self.minimum_phi_speed = minimum_phi_speed
    def getMaximum_phi_speed(self): return self.maximum_phi_speed
    def setMaximum_phi_speed(self, maximum_phi_speed): self.maximum_phi_speed = maximum_phi_speed
    def getMinimum_phi_oscillation(self): return self.minimum_phi_oscillation
    def setMinimum_phi_oscillation(self, minimum_phi_oscillation): self.minimum_phi_oscillation = minimum_phi_oscillation
    def export(self, outfile, level = 0, name_='beamline_parameters'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='beamline_parameters'):
        pass
    def exportChildren(self, outfile, level, name_='beamline_parameters'):
        showIndent(outfile, level)
        outfile.write('<maximum_exposure>%e</maximum_exposure>\n' % self.getMaximum_exposure())
        showIndent(outfile, level)
        outfile.write('<minimum_exposure_time>%e</minimum_exposure_time>\n' % self.getMinimum_exposure_time())
        showIndent(outfile, level)
        outfile.write('<minimum_phi_speed>%e</minimum_phi_speed>\n' % self.getMinimum_phi_speed())
        showIndent(outfile, level)
        outfile.write('<maximum_phi_speed>%e</maximum_phi_speed>\n' % self.getMaximum_phi_speed())
        showIndent(outfile, level)
        outfile.write('<minimum_phi_oscillation>%e</minimum_phi_oscillation>\n' % self.getMinimum_phi_oscillation())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='beamline_parameters' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">beamline_parameters:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='beamline_parameters' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = beamline_parameters.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="beamline_parameters" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='beamline_parameters'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('maximum_exposure = %e,\n' % self.getMaximum_exposure())
        showIndent(outfile, level)
        outfile.write('minimum_exposure_time = %e,\n' % self.getMinimum_exposure_time())
        showIndent(outfile, level)
        outfile.write('minimum_phi_speed = %e,\n' % self.getMinimum_phi_speed())
        showIndent(outfile, level)
        outfile.write('maximum_phi_speed = %e,\n' % self.getMaximum_phi_speed())
        showIndent(outfile, level)
        outfile.write('minimum_phi_oscillation = %e,\n' % self.getMinimum_phi_oscillation())
    def exportLiteralHtml(self, outfile, level = 0, name_='beamline_parameters'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('maximum_exposure = <a  href:"#">%e</a><br>\n' % self.getMaximum_exposure())
        showIndentHtml(outfile, level)
        outfile.write('minimum_exposure_time = <a  href:"#">%e</a><br>\n' % self.getMinimum_exposure_time())
        showIndentHtml(outfile, level)
        outfile.write('minimum_phi_speed = <a  href:"#">%e</a><br>\n' % self.getMinimum_phi_speed())
        showIndentHtml(outfile, level)
        outfile.write('maximum_phi_speed = <a  href:"#">%e</a><br>\n' % self.getMaximum_phi_speed())
        showIndentHtml(outfile, level)
        outfile.write('minimum_phi_oscillation = <a  href:"#">%e</a><br>\n' % self.getMinimum_phi_oscillation())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'maximum_exposure':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.maximum_exposure = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'minimum_exposure_time':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.minimum_exposure_time = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'minimum_phi_speed':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.minimum_phi_speed = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'maximum_phi_speed':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.maximum_phi_speed = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'minimum_phi_oscillation':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.minimum_phi_oscillation = fval_
# end class beamline_parameters




def parse(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = db_proposal.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc.unlink()
#    doc = None
    return rootObj


def parseString(inString):
    doc = minidom.parseString(inString)
    rootNode = doc.documentElement
    rootObj = db_proposal.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc.unlink()
#    doc = None
#    sys.stdout.write('<?xml version="1.0" ?>\n')
#    rootObj.export(sys.stdout, 0, name_="db_proposal")
    return rootObj


# AAlib Modifications for marshalling and unmarshalling
# Creating program data constructs from XML
def unMarshalling( _inFileName ):
    return parse(  _inFileName )


# Serializing program data constructs to XML
def marshalling( _oObject, _inFileName ):
    oFile = open( _inFileName, "w" )
    oFile.write('<?xml version="1.0" ?>\n')
    _oObject.export( oFile, 0, name_="db_proposal" )
    oFile.close()

