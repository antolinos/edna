#!/usr/bin/env python



#################################################################
#
#   Project:   Python-Jython Asynchronous Action Library Project
#              http://pyaalib.sourceforge.net/
#              http://jyaalib.sourceforge.net/
#
#   Author(s): Romeu A. Pieritz - romeu.pieritz@gmail.com
#
#   Code Generated in Date:      Mon Jun  1 23:18:40 2009
#
#   License:
#   ----------------------------------------------
#   Python-Jython Asynchronous Action Library Project
#   Copyright (c) 2005-2008, PyAALib-JyAALib developers
#   All rights reserved.
#
#   Redistribution and use in source and binary forms,
#   with or without modification, are permitted
#   provided that the following conditions are met:
#
#   Redistributions of source code must retain the
#   above copyright notice,this list of conditions
#   and the following disclaimer.
#
#   Redistributions in binary form must reproduce
#   the above copyright notice,this list of conditions
#   and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the names of PyAALib-JyAALib's copyright owner
#   nor the names of its contributors may be used to endorse
#   or promote products derived from this software without
#   specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
#   AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
#   WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
#   EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#   BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
#   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
#   IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
#   OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
#   THE POSSIBILITY OF SUCH DAMAGE.
#
################################################################
#
#
# Generated by ALExternalPackGenerateDS.py.
#
# This file is generated by a modified version of the original file:
# generateDS.py, proposed by Dave Kuhlman:
#
## LICENSE
#
## Copyright (c) 2003 Dave Kuhlman
#
## Permission is hereby granted, free of charge, to any person obtaining
## a copy of this software and associated documentation files (the
## "Software"), to deal in the Software without restriction, including
## without limitation the rights to use, copy, modify, merge, publish,
## distribute, sublicense, and/or sell copies of the Software, and to
## permit persons to whom the Software is furnished to do so, subject to
## the following conditions:
#
## The above copyright notice and this permission notice shall be
## included in all copies or substantial portions of the Software.
#
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
## IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
## CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
## TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
## SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
##############################################################################

import sys
import getopt
from xml.dom import minidom
from xml.dom import Node


#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')


def showIndentHtml(outfile, level):
    for idx in range(level):
        outfile.write(' &nbsp; &nbsp; &nbsp; &nbsp;')


def quote_xml(inStr):
    s1 = inStr
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('"', '&quot;')
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


class MixedContainer(object):
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')



TEMPLATE_PAGE_P1 = """
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
    <title>AALib Plugin Data Description</title>
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <meta name="description" content="AALib Plugin generation from XSD files">
    <meta name="keywords" content="AALib, xsd, plugin">
    <meta name="author" content="Romeu Pieritz(romeu_pieritz@yahoo.fr)">
    <link href="style.css" rel="stylesheet" type="text/css">
    <base target="main">
</head>
<body>
    <div id="main">
        <div id="block">
          %s
    </div>
"""

TEMPLATE_PAGE_P2 = """
    </div>
</body>
</html>
"""



#
# Class definition
#

class AnomalousScatterer(object):
    subclass = None
    def __init__(self, anomalousScattererId='', crystalId='', element='', numberOfInstances='', incorporation='', assessmentMethod=''):
        self.anomalousScattererId = anomalousScattererId
        self.crystalId = crystalId
        self.element = element
        self.numberOfInstances = numberOfInstances
        self.incorporation = incorporation
        self.assessmentMethod = assessmentMethod
    def factory(*args_, **kwargs_):
        if AnomalousScatterer.subclass:
            return AnomalousScatterer.subclass(*args_, **kwargs_)
        else:
            return AnomalousScatterer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getAnomalousScattererId(self): return self.anomalousScattererId
    def setAnomalousScattererId(self, anomalousScattererId): self.anomalousScattererId = anomalousScattererId
    def getCrystalId(self): return self.crystalId
    def setCrystalId(self, crystalId): self.crystalId = crystalId
    def getElement(self): return self.element
    def setElement(self, element): self.element = element
    def getNumberOfInstances(self): return self.numberOfInstances
    def setNumberOfInstances(self, numberOfInstances): self.numberOfInstances = numberOfInstances
    def getIncorporation(self): return self.incorporation
    def setIncorporation(self, incorporation): self.incorporation = incorporation
    def getAssessmentMethod(self): return self.assessmentMethod
    def setAssessmentMethod(self, assessmentMethod): self.assessmentMethod = assessmentMethod
    def export(self, outfile, level = 0, name_='AnomalousScatterer'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='AnomalousScatterer'):
        pass
    def exportChildren(self, outfile, level, name_='AnomalousScatterer'):
        showIndent(outfile, level)
        outfile.write('<anomalousScattererId>%s</anomalousScattererId>\n' % quote_xml(self.getAnomalousScattererId()))
        showIndent(outfile, level)
        outfile.write('<crystalId>%s</crystalId>\n' % quote_xml(self.getCrystalId()))
        showIndent(outfile, level)
        outfile.write('<element>%s</element>\n' % quote_xml(self.getElement()))
        showIndent(outfile, level)
        outfile.write('<numberOfInstances>%s</numberOfInstances>\n' % quote_xml(self.getNumberOfInstances()))
        showIndent(outfile, level)
        outfile.write('<incorporation>%s</incorporation>\n' % quote_xml(self.getIncorporation()))
        showIndent(outfile, level)
        outfile.write('<assessmentMethod>%s</assessmentMethod>\n' % quote_xml(self.getAssessmentMethod()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='AnomalousScatterer' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">AnomalousScatterer:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='AnomalousScatterer' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = AnomalousScatterer.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="AnomalousScatterer" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='AnomalousScatterer'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('anomalousScattererId = %s,\n' % quote_python(self.getAnomalousScattererId()))
        showIndent(outfile, level)
        outfile.write('crystalId = %s,\n' % quote_python(self.getCrystalId()))
        showIndent(outfile, level)
        outfile.write('element = %s,\n' % quote_python(self.getElement()))
        showIndent(outfile, level)
        outfile.write('numberOfInstances = %s,\n' % quote_python(self.getNumberOfInstances()))
        showIndent(outfile, level)
        outfile.write('incorporation = %s,\n' % quote_python(self.getIncorporation()))
        showIndent(outfile, level)
        outfile.write('assessmentMethod = %s,\n' % quote_python(self.getAssessmentMethod()))
    def exportLiteralHtml(self, outfile, level = 0, name_='AnomalousScatterer'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('anomalousScattererId = <a  href:"#">%s</a><br>\n' % quote_python(self.getAnomalousScattererId()))
        showIndentHtml(outfile, level)
        outfile.write('crystalId = <a  href:"#">%s</a><br>\n' % quote_python(self.getCrystalId()))
        showIndentHtml(outfile, level)
        outfile.write('element = <a  href:"#">%s</a><br>\n' % quote_python(self.getElement()))
        showIndentHtml(outfile, level)
        outfile.write('numberOfInstances = <a  href:"#">%s</a><br>\n' % quote_python(self.getNumberOfInstances()))
        showIndentHtml(outfile, level)
        outfile.write('incorporation = <a  href:"#">%s</a><br>\n' % quote_python(self.getIncorporation()))
        showIndentHtml(outfile, level)
        outfile.write('assessmentMethod = <a  href:"#">%s</a><br>\n' % quote_python(self.getAssessmentMethod()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'anomalousScattererId':
            anomalousScattererId_ = ''
            for text__content_ in child_.childNodes:
                anomalousScattererId_ += text__content_.nodeValue
            self.anomalousScattererId = anomalousScattererId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'crystalId':
            crystalId_ = ''
            for text__content_ in child_.childNodes:
                crystalId_ += text__content_.nodeValue
            self.crystalId = crystalId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'element':
            element_ = ''
            for text__content_ in child_.childNodes:
                element_ += text__content_.nodeValue
            self.element = element_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'numberOfInstances':
            numberOfInstances_ = ''
            for text__content_ in child_.childNodes:
                numberOfInstances_ += text__content_.nodeValue
            self.numberOfInstances = numberOfInstances_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'incorporation':
            incorporation_ = ''
            for text__content_ in child_.childNodes:
                incorporation_ += text__content_.nodeValue
            self.incorporation = incorporation_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'assessmentMethod':
            assessmentMethod_ = ''
            for text__content_ in child_.childNodes:
                assessmentMethod_ += text__content_.nodeValue
            self.assessmentMethod = assessmentMethod_
# end class AnomalousScatterer


class AnomalousScattering(object):
    subclass = None
    def __init__(self, anomalousScatteringId='', dataCollectionId='', element='', fPrime=0.0, fDoublePrime=0.0):
        self.anomalousScatteringId = anomalousScatteringId
        self.dataCollectionId = dataCollectionId
        self.element = element
        self.fPrime = fPrime
        self.fDoublePrime = fDoublePrime
    def factory(*args_, **kwargs_):
        if AnomalousScattering.subclass:
            return AnomalousScattering.subclass(*args_, **kwargs_)
        else:
            return AnomalousScattering(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getAnomalousScatteringId(self): return self.anomalousScatteringId
    def setAnomalousScatteringId(self, anomalousScatteringId): self.anomalousScatteringId = anomalousScatteringId
    def getDataCollectionId(self): return self.dataCollectionId
    def setDataCollectionId(self, dataCollectionId): self.dataCollectionId = dataCollectionId
    def getElement(self): return self.element
    def setElement(self, element): self.element = element
    def getFPrime(self): return self.fPrime
    def setFPrime(self, fPrime): self.fPrime = fPrime
    def getFDoublePrime(self): return self.fDoublePrime
    def setFDoublePrime(self, fDoublePrime): self.fDoublePrime = fDoublePrime
    def export(self, outfile, level = 0, name_='AnomalousScattering'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='AnomalousScattering'):
        pass
    def exportChildren(self, outfile, level, name_='AnomalousScattering'):
        showIndent(outfile, level)
        outfile.write('<anomalousScatteringId>%s</anomalousScatteringId>\n' % quote_xml(self.getAnomalousScatteringId()))
        showIndent(outfile, level)
        outfile.write('<dataCollectionId>%s</dataCollectionId>\n' % quote_xml(self.getDataCollectionId()))
        showIndent(outfile, level)
        outfile.write('<element>%s</element>\n' % quote_xml(self.getElement()))
        showIndent(outfile, level)
        outfile.write('<fPrime>%e</fPrime>\n' % self.getFPrime())
        showIndent(outfile, level)
        outfile.write('<fDoublePrime>%e</fDoublePrime>\n' % self.getFDoublePrime())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='AnomalousScattering' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">AnomalousScattering:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='AnomalousScattering' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = AnomalousScattering.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="AnomalousScattering" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='AnomalousScattering'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('anomalousScatteringId = %s,\n' % quote_python(self.getAnomalousScatteringId()))
        showIndent(outfile, level)
        outfile.write('dataCollectionId = %s,\n' % quote_python(self.getDataCollectionId()))
        showIndent(outfile, level)
        outfile.write('element = %s,\n' % quote_python(self.getElement()))
        showIndent(outfile, level)
        outfile.write('fPrime = %e,\n' % self.getFPrime())
        showIndent(outfile, level)
        outfile.write('fDoublePrime = %e,\n' % self.getFDoublePrime())
    def exportLiteralHtml(self, outfile, level = 0, name_='AnomalousScattering'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('anomalousScatteringId = <a  href:"#">%s</a><br>\n' % quote_python(self.getAnomalousScatteringId()))
        showIndentHtml(outfile, level)
        outfile.write('dataCollectionId = <a  href:"#">%s</a><br>\n' % quote_python(self.getDataCollectionId()))
        showIndentHtml(outfile, level)
        outfile.write('element = <a  href:"#">%s</a><br>\n' % quote_python(self.getElement()))
        showIndentHtml(outfile, level)
        outfile.write('fPrime = <a  href:"#">%e</a><br>\n' % self.getFPrime())
        showIndentHtml(outfile, level)
        outfile.write('fDoublePrime = <a  href:"#">%e</a><br>\n' % self.getFDoublePrime())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'anomalousScatteringId':
            anomalousScatteringId_ = ''
            for text__content_ in child_.childNodes:
                anomalousScatteringId_ += text__content_.nodeValue
            self.anomalousScatteringId = anomalousScatteringId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'dataCollectionId':
            dataCollectionId_ = ''
            for text__content_ in child_.childNodes:
                dataCollectionId_ += text__content_.nodeValue
            self.dataCollectionId = dataCollectionId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'element':
            element_ = ''
            for text__content_ in child_.childNodes:
                element_ += text__content_.nodeValue
            self.element = element_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'fPrime':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.fPrime = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'fDoublePrime':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.fDoublePrime = fval_
# end class AnomalousScattering


class BLSample(object):
    subclass = None
    def __init__(self, blSampleId='', diffractionPlanId='', crystalId='', containerId='', name='', code='', location='', holderLength=0.0, loopLength=0.0, loopType='', wireWidth=0.0, comments='', completionStage='', structureStage='', publicationStage='', publicationComments='', blSampleStatus='', isInSampleChanger=False, lastKnownCenteringPosition=''):
        self.blSampleId = blSampleId
        self.diffractionPlanId = diffractionPlanId
        self.crystalId = crystalId
        self.containerId = containerId
        self.name = name
        self.code = code
        self.location = location
        self.holderLength = holderLength
        self.loopLength = loopLength
        self.loopType = loopType
        self.wireWidth = wireWidth
        self.comments = comments
        self.completionStage = completionStage
        self.structureStage = structureStage
        self.publicationStage = publicationStage
        self.publicationComments = publicationComments
        self.blSampleStatus = blSampleStatus
        self.isInSampleChanger = isInSampleChanger
        self.lastKnownCenteringPosition = lastKnownCenteringPosition
    def factory(*args_, **kwargs_):
        if BLSample.subclass:
            return BLSample.subclass(*args_, **kwargs_)
        else:
            return BLSample(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getBlSampleId(self): return self.blSampleId
    def setBlSampleId(self, blSampleId): self.blSampleId = blSampleId
    def getDiffractionPlanId(self): return self.diffractionPlanId
    def setDiffractionPlanId(self, diffractionPlanId): self.diffractionPlanId = diffractionPlanId
    def getCrystalId(self): return self.crystalId
    def setCrystalId(self, crystalId): self.crystalId = crystalId
    def getContainerId(self): return self.containerId
    def setContainerId(self, containerId): self.containerId = containerId
    def getName(self): return self.name
    def setName(self, name): self.name = name
    def getCode(self): return self.code
    def setCode(self, code): self.code = code
    def getLocation(self): return self.location
    def setLocation(self, location): self.location = location
    def getHolderLength(self): return self.holderLength
    def setHolderLength(self, holderLength): self.holderLength = holderLength
    def getLoopLength(self): return self.loopLength
    def setLoopLength(self, loopLength): self.loopLength = loopLength
    def getLoopType(self): return self.loopType
    def setLoopType(self, loopType): self.loopType = loopType
    def getWireWidth(self): return self.wireWidth
    def setWireWidth(self, wireWidth): self.wireWidth = wireWidth
    def getComments(self): return self.comments
    def setComments(self, comments): self.comments = comments
    def getCompletionStage(self): return self.completionStage
    def setCompletionStage(self, completionStage): self.completionStage = completionStage
    def getStructureStage(self): return self.structureStage
    def setStructureStage(self, structureStage): self.structureStage = structureStage
    def getPublicationStage(self): return self.publicationStage
    def setPublicationStage(self, publicationStage): self.publicationStage = publicationStage
    def getPublicationComments(self): return self.publicationComments
    def setPublicationComments(self, publicationComments): self.publicationComments = publicationComments
    def getBlSampleStatus(self): return self.blSampleStatus
    def setBlSampleStatus(self, blSampleStatus): self.blSampleStatus = blSampleStatus
    def getIsInSampleChanger(self): return self.isInSampleChanger
    def setIsInSampleChanger(self, isInSampleChanger): self.isInSampleChanger = isInSampleChanger
    def getLastKnownCenteringPosition(self): return self.lastKnownCenteringPosition
    def setLastKnownCenteringPosition(self, lastKnownCenteringPosition): self.lastKnownCenteringPosition = lastKnownCenteringPosition
    def export(self, outfile, level = 0, name_='BLSample'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='BLSample'):
        pass
    def exportChildren(self, outfile, level, name_='BLSample'):
        showIndent(outfile, level)
        outfile.write('<blSampleId>%s</blSampleId>\n' % quote_xml(self.getBlSampleId()))
        showIndent(outfile, level)
        outfile.write('<diffractionPlanId>%s</diffractionPlanId>\n' % quote_xml(self.getDiffractionPlanId()))
        showIndent(outfile, level)
        outfile.write('<crystalId>%s</crystalId>\n' % quote_xml(self.getCrystalId()))
        showIndent(outfile, level)
        outfile.write('<containerId>%s</containerId>\n' % quote_xml(self.getContainerId()))
        showIndent(outfile, level)
        outfile.write('<name>%s</name>\n' % quote_xml(self.getName()))
        showIndent(outfile, level)
        outfile.write('<code>%s</code>\n' % quote_xml(self.getCode()))
        showIndent(outfile, level)
        outfile.write('<location>%s</location>\n' % quote_xml(self.getLocation()))
        showIndent(outfile, level)
        outfile.write('<holderLength>%e</holderLength>\n' % self.getHolderLength())
        showIndent(outfile, level)
        outfile.write('<loopLength>%e</loopLength>\n' % self.getLoopLength())
        showIndent(outfile, level)
        outfile.write('<loopType>%s</loopType>\n' % quote_xml(self.getLoopType()))
        showIndent(outfile, level)
        outfile.write('<wireWidth>%e</wireWidth>\n' % self.getWireWidth())
        showIndent(outfile, level)
        outfile.write('<comments>%s</comments>\n' % quote_xml(self.getComments()))
        showIndent(outfile, level)
        outfile.write('<completionStage>%s</completionStage>\n' % quote_xml(self.getCompletionStage()))
        showIndent(outfile, level)
        outfile.write('<structureStage>%s</structureStage>\n' % quote_xml(self.getStructureStage()))
        showIndent(outfile, level)
        outfile.write('<publicationStage>%s</publicationStage>\n' % quote_xml(self.getPublicationStage()))
        showIndent(outfile, level)
        outfile.write('<publicationComments>%s</publicationComments>\n' % quote_xml(self.getPublicationComments()))
        showIndent(outfile, level)
        outfile.write('<blSampleStatus>%s</blSampleStatus>\n' % quote_xml(self.getBlSampleStatus()))
        showIndent(outfile, level)
        outfile.write('<isInSampleChanger>%s</isInSampleChanger>\n' % self.getIsInSampleChanger())
        showIndent(outfile, level)
        outfile.write('<lastKnownCenteringPosition>%s</lastKnownCenteringPosition>\n' % quote_xml(self.getLastKnownCenteringPosition()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='BLSample' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">BLSample:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='BLSample' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = BLSample.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="BLSample" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='BLSample'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('blSampleId = %s,\n' % quote_python(self.getBlSampleId()))
        showIndent(outfile, level)
        outfile.write('diffractionPlanId = %s,\n' % quote_python(self.getDiffractionPlanId()))
        showIndent(outfile, level)
        outfile.write('crystalId = %s,\n' % quote_python(self.getCrystalId()))
        showIndent(outfile, level)
        outfile.write('containerId = %s,\n' % quote_python(self.getContainerId()))
        showIndent(outfile, level)
        outfile.write('name = %s,\n' % quote_python(self.getName()))
        showIndent(outfile, level)
        outfile.write('code = %s,\n' % quote_python(self.getCode()))
        showIndent(outfile, level)
        outfile.write('location = %s,\n' % quote_python(self.getLocation()))
        showIndent(outfile, level)
        outfile.write('holderLength = %e,\n' % self.getHolderLength())
        showIndent(outfile, level)
        outfile.write('loopLength = %e,\n' % self.getLoopLength())
        showIndent(outfile, level)
        outfile.write('loopType = %s,\n' % quote_python(self.getLoopType()))
        showIndent(outfile, level)
        outfile.write('wireWidth = %e,\n' % self.getWireWidth())
        showIndent(outfile, level)
        outfile.write('comments = %s,\n' % quote_python(self.getComments()))
        showIndent(outfile, level)
        outfile.write('completionStage = %s,\n' % quote_python(self.getCompletionStage()))
        showIndent(outfile, level)
        outfile.write('structureStage = %s,\n' % quote_python(self.getStructureStage()))
        showIndent(outfile, level)
        outfile.write('publicationStage = %s,\n' % quote_python(self.getPublicationStage()))
        showIndent(outfile, level)
        outfile.write('publicationComments = %s,\n' % quote_python(self.getPublicationComments()))
        showIndent(outfile, level)
        outfile.write('blSampleStatus = %s,\n' % quote_python(self.getBlSampleStatus()))
        showIndent(outfile, level)
        outfile.write('isInSampleChanger = %s,\n' % self.getIsInSampleChanger())
        showIndent(outfile, level)
        outfile.write('lastKnownCenteringPosition = %s,\n' % quote_python(self.getLastKnownCenteringPosition()))
    def exportLiteralHtml(self, outfile, level = 0, name_='BLSample'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('blSampleId = <a  href:"#">%s</a><br>\n' % quote_python(self.getBlSampleId()))
        showIndentHtml(outfile, level)
        outfile.write('diffractionPlanId = <a  href:"#">%s</a><br>\n' % quote_python(self.getDiffractionPlanId()))
        showIndentHtml(outfile, level)
        outfile.write('crystalId = <a  href:"#">%s</a><br>\n' % quote_python(self.getCrystalId()))
        showIndentHtml(outfile, level)
        outfile.write('containerId = <a  href:"#">%s</a><br>\n' % quote_python(self.getContainerId()))
        showIndentHtml(outfile, level)
        outfile.write('name = <a  href:"#">%s</a><br>\n' % quote_python(self.getName()))
        showIndentHtml(outfile, level)
        outfile.write('code = <a  href:"#">%s</a><br>\n' % quote_python(self.getCode()))
        showIndentHtml(outfile, level)
        outfile.write('location = <a  href:"#">%s</a><br>\n' % quote_python(self.getLocation()))
        showIndentHtml(outfile, level)
        outfile.write('holderLength = <a  href:"#">%e</a><br>\n' % self.getHolderLength())
        showIndentHtml(outfile, level)
        outfile.write('loopLength = <a  href:"#">%e</a><br>\n' % self.getLoopLength())
        showIndentHtml(outfile, level)
        outfile.write('loopType = <a  href:"#">%s</a><br>\n' % quote_python(self.getLoopType()))
        showIndentHtml(outfile, level)
        outfile.write('wireWidth = <a  href:"#">%e</a><br>\n' % self.getWireWidth())
        showIndentHtml(outfile, level)
        outfile.write('comments = <a  href:"#">%s</a><br>\n' % quote_python(self.getComments()))
        showIndentHtml(outfile, level)
        outfile.write('completionStage = <a  href:"#">%s</a><br>\n' % quote_python(self.getCompletionStage()))
        showIndentHtml(outfile, level)
        outfile.write('structureStage = <a  href:"#">%s</a><br>\n' % quote_python(self.getStructureStage()))
        showIndentHtml(outfile, level)
        outfile.write('publicationStage = <a  href:"#">%s</a><br>\n' % quote_python(self.getPublicationStage()))
        showIndentHtml(outfile, level)
        outfile.write('publicationComments = <a  href:"#">%s</a><br>\n' % quote_python(self.getPublicationComments()))
        showIndentHtml(outfile, level)
        outfile.write('blSampleStatus = <a  href:"#">%s</a><br>\n' % quote_python(self.getBlSampleStatus()))
        showIndentHtml(outfile, level)
        outfile.write('isInSampleChanger = <a  href:"#">%s</a><br>\n' % self.getIsInSampleChanger())
        showIndentHtml(outfile, level)
        outfile.write('lastKnownCenteringPosition = <a  href:"#">%s</a><br>\n' % quote_python(self.getLastKnownCenteringPosition()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'blSampleId':
            blSampleId_ = ''
            for text__content_ in child_.childNodes:
                blSampleId_ += text__content_.nodeValue
            self.blSampleId = blSampleId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'diffractionPlanId':
            diffractionPlanId_ = ''
            for text__content_ in child_.childNodes:
                diffractionPlanId_ += text__content_.nodeValue
            self.diffractionPlanId = diffractionPlanId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'crystalId':
            crystalId_ = ''
            for text__content_ in child_.childNodes:
                crystalId_ += text__content_.nodeValue
            self.crystalId = crystalId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'containerId':
            containerId_ = ''
            for text__content_ in child_.childNodes:
                containerId_ += text__content_.nodeValue
            self.containerId = containerId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'name':
            name_ = ''
            for text__content_ in child_.childNodes:
                name_ += text__content_.nodeValue
            self.name = name_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'code':
            code_ = ''
            for text__content_ in child_.childNodes:
                code_ += text__content_.nodeValue
            self.code = code_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'location':
            location_ = ''
            for text__content_ in child_.childNodes:
                location_ += text__content_.nodeValue
            self.location = location_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'holderLength':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.holderLength = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'loopLength':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.loopLength = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'loopType':
            loopType_ = ''
            for text__content_ in child_.childNodes:
                loopType_ += text__content_.nodeValue
            self.loopType = loopType_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'wireWidth':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.wireWidth = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'comments':
            comments_ = ''
            for text__content_ in child_.childNodes:
                comments_ += text__content_.nodeValue
            self.comments = comments_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'completionStage':
            completionStage_ = ''
            for text__content_ in child_.childNodes:
                completionStage_ += text__content_.nodeValue
            self.completionStage = completionStage_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'structureStage':
            structureStage_ = ''
            for text__content_ in child_.childNodes:
                structureStage_ += text__content_.nodeValue
            self.structureStage = structureStage_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'publicationStage':
            publicationStage_ = ''
            for text__content_ in child_.childNodes:
                publicationStage_ += text__content_.nodeValue
            self.publicationStage = publicationStage_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'publicationComments':
            publicationComments_ = ''
            for text__content_ in child_.childNodes:
                publicationComments_ += text__content_.nodeValue
            self.publicationComments = publicationComments_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'blSampleStatus':
            blSampleStatus_ = ''
            for text__content_ in child_.childNodes:
                blSampleStatus_ += text__content_.nodeValue
            self.blSampleStatus = blSampleStatus_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'isInSampleChanger':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', 'True', '1'):
                    ival_ = True
                elif sval_ in ('false', 'False', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.isInSampleChanger = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'lastKnownCenteringPosition':
            lastKnownCenteringPosition_ = ''
            for text__content_ in child_.childNodes:
                lastKnownCenteringPosition_ += text__content_.nodeValue
            self.lastKnownCenteringPosition = lastKnownCenteringPosition_
# end class BLSample


class BLSample_has_EnergyScan(object):
    subclass = None
    def __init__(self, blSampleId='', energyScanId=''):
        self.blSampleId = blSampleId
        self.energyScanId = energyScanId
    def factory(*args_, **kwargs_):
        if BLSample_has_EnergyScan.subclass:
            return BLSample_has_EnergyScan.subclass(*args_, **kwargs_)
        else:
            return BLSample_has_EnergyScan(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getBlSampleId(self): return self.blSampleId
    def setBlSampleId(self, blSampleId): self.blSampleId = blSampleId
    def getEnergyScanId(self): return self.energyScanId
    def setEnergyScanId(self, energyScanId): self.energyScanId = energyScanId
    def export(self, outfile, level = 0, name_='BLSample_has_EnergyScan'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='BLSample_has_EnergyScan'):
        pass
    def exportChildren(self, outfile, level, name_='BLSample_has_EnergyScan'):
        showIndent(outfile, level)
        outfile.write('<blSampleId>%s</blSampleId>\n' % quote_xml(self.getBlSampleId()))
        showIndent(outfile, level)
        outfile.write('<energyScanId>%s</energyScanId>\n' % quote_xml(self.getEnergyScanId()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='BLSample_has_EnergyScan' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">BLSample_has_EnergyScan:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='BLSample_has_EnergyScan' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = BLSample_has_EnergyScan.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="BLSample_has_EnergyScan" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='BLSample_has_EnergyScan'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('blSampleId = %s,\n' % quote_python(self.getBlSampleId()))
        showIndent(outfile, level)
        outfile.write('energyScanId = %s,\n' % quote_python(self.getEnergyScanId()))
    def exportLiteralHtml(self, outfile, level = 0, name_='BLSample_has_EnergyScan'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('blSampleId = <a  href:"#">%s</a><br>\n' % quote_python(self.getBlSampleId()))
        showIndentHtml(outfile, level)
        outfile.write('energyScanId = <a  href:"#">%s</a><br>\n' % quote_python(self.getEnergyScanId()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'blSampleId':
            blSampleId_ = ''
            for text__content_ in child_.childNodes:
                blSampleId_ += text__content_.nodeValue
            self.blSampleId = blSampleId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'energyScanId':
            energyScanId_ = ''
            for text__content_ in child_.childNodes:
                energyScanId_ += text__content_.nodeValue
            self.energyScanId = energyScanId_
# end class BLSample_has_EnergyScan


class BeamLineSetup(object):
    subclass = None
    def __init__(self, beamLineSetupId='', synchrotronMode='', detectorType='', detectorManufacturer='', detectorModel='', detectorPixelSizeHorizontal=0.0, detectorPixelSizeVertical=0.0, undulatorType1='', undulatorType2='', undulatorType3='', focalSpotSizeAtSample=0.0, focusingOptic='', beamDivergenceHorizontal=0.0, beamDivergenceVertical=0.0, polarisation=0.0, monochromatorType='', setupDate='', synchrotronName=''):
        self.beamLineSetupId = beamLineSetupId
        self.synchrotronMode = synchrotronMode
        self.detectorType = detectorType
        self.detectorManufacturer = detectorManufacturer
        self.detectorModel = detectorModel
        self.detectorPixelSizeHorizontal = detectorPixelSizeHorizontal
        self.detectorPixelSizeVertical = detectorPixelSizeVertical
        self.undulatorType1 = undulatorType1
        self.undulatorType2 = undulatorType2
        self.undulatorType3 = undulatorType3
        self.focalSpotSizeAtSample = focalSpotSizeAtSample
        self.focusingOptic = focusingOptic
        self.beamDivergenceHorizontal = beamDivergenceHorizontal
        self.beamDivergenceVertical = beamDivergenceVertical
        self.polarisation = polarisation
        self.monochromatorType = monochromatorType
        self.setupDate = setupDate
        self.synchrotronName = synchrotronName
    def factory(*args_, **kwargs_):
        if BeamLineSetup.subclass:
            return BeamLineSetup.subclass(*args_, **kwargs_)
        else:
            return BeamLineSetup(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getBeamLineSetupId(self): return self.beamLineSetupId
    def setBeamLineSetupId(self, beamLineSetupId): self.beamLineSetupId = beamLineSetupId
    def getSynchrotronMode(self): return self.synchrotronMode
    def setSynchrotronMode(self, synchrotronMode): self.synchrotronMode = synchrotronMode
    def getDetectorType(self): return self.detectorType
    def setDetectorType(self, detectorType): self.detectorType = detectorType
    def getDetectorManufacturer(self): return self.detectorManufacturer
    def setDetectorManufacturer(self, detectorManufacturer): self.detectorManufacturer = detectorManufacturer
    def getDetectorModel(self): return self.detectorModel
    def setDetectorModel(self, detectorModel): self.detectorModel = detectorModel
    def getDetectorPixelSizeHorizontal(self): return self.detectorPixelSizeHorizontal
    def setDetectorPixelSizeHorizontal(self, detectorPixelSizeHorizontal): self.detectorPixelSizeHorizontal = detectorPixelSizeHorizontal
    def getDetectorPixelSizeVertical(self): return self.detectorPixelSizeVertical
    def setDetectorPixelSizeVertical(self, detectorPixelSizeVertical): self.detectorPixelSizeVertical = detectorPixelSizeVertical
    def getUndulatorType1(self): return self.undulatorType1
    def setUndulatorType1(self, undulatorType1): self.undulatorType1 = undulatorType1
    def getUndulatorType2(self): return self.undulatorType2
    def setUndulatorType2(self, undulatorType2): self.undulatorType2 = undulatorType2
    def getUndulatorType3(self): return self.undulatorType3
    def setUndulatorType3(self, undulatorType3): self.undulatorType3 = undulatorType3
    def getFocalSpotSizeAtSample(self): return self.focalSpotSizeAtSample
    def setFocalSpotSizeAtSample(self, focalSpotSizeAtSample): self.focalSpotSizeAtSample = focalSpotSizeAtSample
    def getFocusingOptic(self): return self.focusingOptic
    def setFocusingOptic(self, focusingOptic): self.focusingOptic = focusingOptic
    def getBeamDivergenceHorizontal(self): return self.beamDivergenceHorizontal
    def setBeamDivergenceHorizontal(self, beamDivergenceHorizontal): self.beamDivergenceHorizontal = beamDivergenceHorizontal
    def getBeamDivergenceVertical(self): return self.beamDivergenceVertical
    def setBeamDivergenceVertical(self, beamDivergenceVertical): self.beamDivergenceVertical = beamDivergenceVertical
    def getPolarisation(self): return self.polarisation
    def setPolarisation(self, polarisation): self.polarisation = polarisation
    def getMonochromatorType(self): return self.monochromatorType
    def setMonochromatorType(self, monochromatorType): self.monochromatorType = monochromatorType
    def getSetupDate(self): return self.setupDate
    def setSetupDate(self, setupDate): self.setupDate = setupDate
    def getSynchrotronName(self): return self.synchrotronName
    def setSynchrotronName(self, synchrotronName): self.synchrotronName = synchrotronName
    def export(self, outfile, level = 0, name_='BeamLineSetup'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='BeamLineSetup'):
        pass
    def exportChildren(self, outfile, level, name_='BeamLineSetup'):
        showIndent(outfile, level)
        outfile.write('<beamLineSetupId>%s</beamLineSetupId>\n' % quote_xml(self.getBeamLineSetupId()))
        showIndent(outfile, level)
        outfile.write('<synchrotronMode>%s</synchrotronMode>\n' % quote_xml(self.getSynchrotronMode()))
        showIndent(outfile, level)
        outfile.write('<detectorType>%s</detectorType>\n' % quote_xml(self.getDetectorType()))
        showIndent(outfile, level)
        outfile.write('<detectorManufacturer>%s</detectorManufacturer>\n' % quote_xml(self.getDetectorManufacturer()))
        showIndent(outfile, level)
        outfile.write('<detectorModel>%s</detectorModel>\n' % quote_xml(self.getDetectorModel()))
        showIndent(outfile, level)
        outfile.write('<detectorPixelSizeHorizontal>%e</detectorPixelSizeHorizontal>\n' % self.getDetectorPixelSizeHorizontal())
        showIndent(outfile, level)
        outfile.write('<detectorPixelSizeVertical>%e</detectorPixelSizeVertical>\n' % self.getDetectorPixelSizeVertical())
        showIndent(outfile, level)
        outfile.write('<undulatorType1>%s</undulatorType1>\n' % quote_xml(self.getUndulatorType1()))
        showIndent(outfile, level)
        outfile.write('<undulatorType2>%s</undulatorType2>\n' % quote_xml(self.getUndulatorType2()))
        showIndent(outfile, level)
        outfile.write('<undulatorType3>%s</undulatorType3>\n' % quote_xml(self.getUndulatorType3()))
        showIndent(outfile, level)
        outfile.write('<focalSpotSizeAtSample>%e</focalSpotSizeAtSample>\n' % self.getFocalSpotSizeAtSample())
        showIndent(outfile, level)
        outfile.write('<focusingOptic>%s</focusingOptic>\n' % quote_xml(self.getFocusingOptic()))
        showIndent(outfile, level)
        outfile.write('<beamDivergenceHorizontal>%e</beamDivergenceHorizontal>\n' % self.getBeamDivergenceHorizontal())
        showIndent(outfile, level)
        outfile.write('<beamDivergenceVertical>%e</beamDivergenceVertical>\n' % self.getBeamDivergenceVertical())
        showIndent(outfile, level)
        outfile.write('<polarisation>%e</polarisation>\n' % self.getPolarisation())
        showIndent(outfile, level)
        outfile.write('<monochromatorType>%s</monochromatorType>\n' % quote_xml(self.getMonochromatorType()))
        showIndent(outfile, level)
        outfile.write('<setupDate>%s</setupDate>\n' % quote_xml(self.getSetupDate()))
        showIndent(outfile, level)
        outfile.write('<synchrotronName>%s</synchrotronName>\n' % quote_xml(self.getSynchrotronName()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='BeamLineSetup' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">BeamLineSetup:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='BeamLineSetup' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = BeamLineSetup.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="BeamLineSetup" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='BeamLineSetup'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('beamLineSetupId = %s,\n' % quote_python(self.getBeamLineSetupId()))
        showIndent(outfile, level)
        outfile.write('synchrotronMode = %s,\n' % quote_python(self.getSynchrotronMode()))
        showIndent(outfile, level)
        outfile.write('detectorType = %s,\n' % quote_python(self.getDetectorType()))
        showIndent(outfile, level)
        outfile.write('detectorManufacturer = %s,\n' % quote_python(self.getDetectorManufacturer()))
        showIndent(outfile, level)
        outfile.write('detectorModel = %s,\n' % quote_python(self.getDetectorModel()))
        showIndent(outfile, level)
        outfile.write('detectorPixelSizeHorizontal = %e,\n' % self.getDetectorPixelSizeHorizontal())
        showIndent(outfile, level)
        outfile.write('detectorPixelSizeVertical = %e,\n' % self.getDetectorPixelSizeVertical())
        showIndent(outfile, level)
        outfile.write('undulatorType1 = %s,\n' % quote_python(self.getUndulatorType1()))
        showIndent(outfile, level)
        outfile.write('undulatorType2 = %s,\n' % quote_python(self.getUndulatorType2()))
        showIndent(outfile, level)
        outfile.write('undulatorType3 = %s,\n' % quote_python(self.getUndulatorType3()))
        showIndent(outfile, level)
        outfile.write('focalSpotSizeAtSample = %e,\n' % self.getFocalSpotSizeAtSample())
        showIndent(outfile, level)
        outfile.write('focusingOptic = %s,\n' % quote_python(self.getFocusingOptic()))
        showIndent(outfile, level)
        outfile.write('beamDivergenceHorizontal = %e,\n' % self.getBeamDivergenceHorizontal())
        showIndent(outfile, level)
        outfile.write('beamDivergenceVertical = %e,\n' % self.getBeamDivergenceVertical())
        showIndent(outfile, level)
        outfile.write('polarisation = %e,\n' % self.getPolarisation())
        showIndent(outfile, level)
        outfile.write('monochromatorType = %s,\n' % quote_python(self.getMonochromatorType()))
        showIndent(outfile, level)
        outfile.write('setupDate = %s,\n' % quote_python(self.getSetupDate()))
        showIndent(outfile, level)
        outfile.write('synchrotronName = %s,\n' % quote_python(self.getSynchrotronName()))
    def exportLiteralHtml(self, outfile, level = 0, name_='BeamLineSetup'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('beamLineSetupId = <a  href:"#">%s</a><br>\n' % quote_python(self.getBeamLineSetupId()))
        showIndentHtml(outfile, level)
        outfile.write('synchrotronMode = <a  href:"#">%s</a><br>\n' % quote_python(self.getSynchrotronMode()))
        showIndentHtml(outfile, level)
        outfile.write('detectorType = <a  href:"#">%s</a><br>\n' % quote_python(self.getDetectorType()))
        showIndentHtml(outfile, level)
        outfile.write('detectorManufacturer = <a  href:"#">%s</a><br>\n' % quote_python(self.getDetectorManufacturer()))
        showIndentHtml(outfile, level)
        outfile.write('detectorModel = <a  href:"#">%s</a><br>\n' % quote_python(self.getDetectorModel()))
        showIndentHtml(outfile, level)
        outfile.write('detectorPixelSizeHorizontal = <a  href:"#">%e</a><br>\n' % self.getDetectorPixelSizeHorizontal())
        showIndentHtml(outfile, level)
        outfile.write('detectorPixelSizeVertical = <a  href:"#">%e</a><br>\n' % self.getDetectorPixelSizeVertical())
        showIndentHtml(outfile, level)
        outfile.write('undulatorType1 = <a  href:"#">%s</a><br>\n' % quote_python(self.getUndulatorType1()))
        showIndentHtml(outfile, level)
        outfile.write('undulatorType2 = <a  href:"#">%s</a><br>\n' % quote_python(self.getUndulatorType2()))
        showIndentHtml(outfile, level)
        outfile.write('undulatorType3 = <a  href:"#">%s</a><br>\n' % quote_python(self.getUndulatorType3()))
        showIndentHtml(outfile, level)
        outfile.write('focalSpotSizeAtSample = <a  href:"#">%e</a><br>\n' % self.getFocalSpotSizeAtSample())
        showIndentHtml(outfile, level)
        outfile.write('focusingOptic = <a  href:"#">%s</a><br>\n' % quote_python(self.getFocusingOptic()))
        showIndentHtml(outfile, level)
        outfile.write('beamDivergenceHorizontal = <a  href:"#">%e</a><br>\n' % self.getBeamDivergenceHorizontal())
        showIndentHtml(outfile, level)
        outfile.write('beamDivergenceVertical = <a  href:"#">%e</a><br>\n' % self.getBeamDivergenceVertical())
        showIndentHtml(outfile, level)
        outfile.write('polarisation = <a  href:"#">%e</a><br>\n' % self.getPolarisation())
        showIndentHtml(outfile, level)
        outfile.write('monochromatorType = <a  href:"#">%s</a><br>\n' % quote_python(self.getMonochromatorType()))
        showIndentHtml(outfile, level)
        outfile.write('setupDate = <a  href:"#">%s</a><br>\n' % quote_python(self.getSetupDate()))
        showIndentHtml(outfile, level)
        outfile.write('synchrotronName = <a  href:"#">%s</a><br>\n' % quote_python(self.getSynchrotronName()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'beamLineSetupId':
            beamLineSetupId_ = ''
            for text__content_ in child_.childNodes:
                beamLineSetupId_ += text__content_.nodeValue
            self.beamLineSetupId = beamLineSetupId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'synchrotronMode':
            synchrotronMode_ = ''
            for text__content_ in child_.childNodes:
                synchrotronMode_ += text__content_.nodeValue
            self.synchrotronMode = synchrotronMode_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'detectorType':
            detectorType_ = ''
            for text__content_ in child_.childNodes:
                detectorType_ += text__content_.nodeValue
            self.detectorType = detectorType_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'detectorManufacturer':
            detectorManufacturer_ = ''
            for text__content_ in child_.childNodes:
                detectorManufacturer_ += text__content_.nodeValue
            self.detectorManufacturer = detectorManufacturer_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'detectorModel':
            detectorModel_ = ''
            for text__content_ in child_.childNodes:
                detectorModel_ += text__content_.nodeValue
            self.detectorModel = detectorModel_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'detectorPixelSizeHorizontal':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.detectorPixelSizeHorizontal = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'detectorPixelSizeVertical':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.detectorPixelSizeVertical = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'undulatorType1':
            undulatorType1_ = ''
            for text__content_ in child_.childNodes:
                undulatorType1_ += text__content_.nodeValue
            self.undulatorType1 = undulatorType1_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'undulatorType2':
            undulatorType2_ = ''
            for text__content_ in child_.childNodes:
                undulatorType2_ += text__content_.nodeValue
            self.undulatorType2 = undulatorType2_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'undulatorType3':
            undulatorType3_ = ''
            for text__content_ in child_.childNodes:
                undulatorType3_ += text__content_.nodeValue
            self.undulatorType3 = undulatorType3_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'focalSpotSizeAtSample':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.focalSpotSizeAtSample = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'focusingOptic':
            focusingOptic_ = ''
            for text__content_ in child_.childNodes:
                focusingOptic_ += text__content_.nodeValue
            self.focusingOptic = focusingOptic_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'beamDivergenceHorizontal':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.beamDivergenceHorizontal = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'beamDivergenceVertical':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.beamDivergenceVertical = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'polarisation':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.polarisation = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'monochromatorType':
            monochromatorType_ = ''
            for text__content_ in child_.childNodes:
                monochromatorType_ += text__content_.nodeValue
            self.monochromatorType = monochromatorType_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'setupDate':
            setupDate_ = ''
            for text__content_ in child_.childNodes:
                setupDate_ += text__content_.nodeValue
            self.setupDate = setupDate_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'synchrotronName':
            synchrotronName_ = ''
            for text__content_ in child_.childNodes:
                synchrotronName_ += text__content_.nodeValue
            self.synchrotronName = synchrotronName_
# end class BeamLineSetup


class Container(object):
    subclass = None
    def __init__(self, containerId='', dewarId='', code='', containerType='', capacity='', sampleChangerLocation='', containerStatus='', timeStamp=''):
        self.containerId = containerId
        self.dewarId = dewarId
        self.code = code
        self.containerType = containerType
        self.capacity = capacity
        self.sampleChangerLocation = sampleChangerLocation
        self.containerStatus = containerStatus
        self.timeStamp = timeStamp
    def factory(*args_, **kwargs_):
        if Container.subclass:
            return Container.subclass(*args_, **kwargs_)
        else:
            return Container(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getContainerId(self): return self.containerId
    def setContainerId(self, containerId): self.containerId = containerId
    def getDewarId(self): return self.dewarId
    def setDewarId(self, dewarId): self.dewarId = dewarId
    def getCode(self): return self.code
    def setCode(self, code): self.code = code
    def getContainerType(self): return self.containerType
    def setContainerType(self, containerType): self.containerType = containerType
    def getCapacity(self): return self.capacity
    def setCapacity(self, capacity): self.capacity = capacity
    def getSampleChangerLocation(self): return self.sampleChangerLocation
    def setSampleChangerLocation(self, sampleChangerLocation): self.sampleChangerLocation = sampleChangerLocation
    def getContainerStatus(self): return self.containerStatus
    def setContainerStatus(self, containerStatus): self.containerStatus = containerStatus
    def getTimeStamp(self): return self.timeStamp
    def setTimeStamp(self, timeStamp): self.timeStamp = timeStamp
    def export(self, outfile, level = 0, name_='Container'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='Container'):
        pass
    def exportChildren(self, outfile, level, name_='Container'):
        showIndent(outfile, level)
        outfile.write('<containerId>%s</containerId>\n' % quote_xml(self.getContainerId()))
        showIndent(outfile, level)
        outfile.write('<dewarId>%s</dewarId>\n' % quote_xml(self.getDewarId()))
        showIndent(outfile, level)
        outfile.write('<code>%s</code>\n' % quote_xml(self.getCode()))
        showIndent(outfile, level)
        outfile.write('<containerType>%s</containerType>\n' % quote_xml(self.getContainerType()))
        showIndent(outfile, level)
        outfile.write('<capacity>%s</capacity>\n' % quote_xml(self.getCapacity()))
        showIndent(outfile, level)
        outfile.write('<sampleChangerLocation>%s</sampleChangerLocation>\n' % quote_xml(self.getSampleChangerLocation()))
        showIndent(outfile, level)
        outfile.write('<containerStatus>%s</containerStatus>\n' % quote_xml(self.getContainerStatus()))
        showIndent(outfile, level)
        outfile.write('<timeStamp>%s</timeStamp>\n' % quote_xml(self.getTimeStamp()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='Container' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">Container:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='Container' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = Container.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="Container" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='Container'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('containerId = %s,\n' % quote_python(self.getContainerId()))
        showIndent(outfile, level)
        outfile.write('dewarId = %s,\n' % quote_python(self.getDewarId()))
        showIndent(outfile, level)
        outfile.write('code = %s,\n' % quote_python(self.getCode()))
        showIndent(outfile, level)
        outfile.write('containerType = %s,\n' % quote_python(self.getContainerType()))
        showIndent(outfile, level)
        outfile.write('capacity = %s,\n' % quote_python(self.getCapacity()))
        showIndent(outfile, level)
        outfile.write('sampleChangerLocation = %s,\n' % quote_python(self.getSampleChangerLocation()))
        showIndent(outfile, level)
        outfile.write('containerStatus = %s,\n' % quote_python(self.getContainerStatus()))
        showIndent(outfile, level)
        outfile.write('timeStamp = %s,\n' % quote_python(self.getTimeStamp()))
    def exportLiteralHtml(self, outfile, level = 0, name_='Container'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('containerId = <a  href:"#">%s</a><br>\n' % quote_python(self.getContainerId()))
        showIndentHtml(outfile, level)
        outfile.write('dewarId = <a  href:"#">%s</a><br>\n' % quote_python(self.getDewarId()))
        showIndentHtml(outfile, level)
        outfile.write('code = <a  href:"#">%s</a><br>\n' % quote_python(self.getCode()))
        showIndentHtml(outfile, level)
        outfile.write('containerType = <a  href:"#">%s</a><br>\n' % quote_python(self.getContainerType()))
        showIndentHtml(outfile, level)
        outfile.write('capacity = <a  href:"#">%s</a><br>\n' % quote_python(self.getCapacity()))
        showIndentHtml(outfile, level)
        outfile.write('sampleChangerLocation = <a  href:"#">%s</a><br>\n' % quote_python(self.getSampleChangerLocation()))
        showIndentHtml(outfile, level)
        outfile.write('containerStatus = <a  href:"#">%s</a><br>\n' % quote_python(self.getContainerStatus()))
        showIndentHtml(outfile, level)
        outfile.write('timeStamp = <a  href:"#">%s</a><br>\n' % quote_python(self.getTimeStamp()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'containerId':
            containerId_ = ''
            for text__content_ in child_.childNodes:
                containerId_ += text__content_.nodeValue
            self.containerId = containerId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'dewarId':
            dewarId_ = ''
            for text__content_ in child_.childNodes:
                dewarId_ += text__content_.nodeValue
            self.dewarId = dewarId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'code':
            code_ = ''
            for text__content_ in child_.childNodes:
                code_ += text__content_.nodeValue
            self.code = code_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'containerType':
            containerType_ = ''
            for text__content_ in child_.childNodes:
                containerType_ += text__content_.nodeValue
            self.containerType = containerType_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'capacity':
            capacity_ = ''
            for text__content_ in child_.childNodes:
                capacity_ += text__content_.nodeValue
            self.capacity = capacity_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sampleChangerLocation':
            sampleChangerLocation_ = ''
            for text__content_ in child_.childNodes:
                sampleChangerLocation_ += text__content_.nodeValue
            self.sampleChangerLocation = sampleChangerLocation_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'containerStatus':
            containerStatus_ = ''
            for text__content_ in child_.childNodes:
                containerStatus_ += text__content_.nodeValue
            self.containerStatus = containerStatus_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'timeStamp':
            timeStamp_ = ''
            for text__content_ in child_.childNodes:
                timeStamp_ += text__content_.nodeValue
            self.timeStamp = timeStamp_
# end class Container


class Crystal(object):
    subclass = None
    def __init__(self, crystalId='', diffractionPlanId='', proteinId='', crystalUUID='', name='', spaceGroup='', morphology='', color='', size_X=0.0, size_Y=0.0, size_Z=0.0, cell_a=0.0, cell_b=0.0, cell_c=0.0, cell_alpha=0.0, cell_beta=0.0, cell_gamma=0.0, comments=''):
        self.crystalId = crystalId
        self.diffractionPlanId = diffractionPlanId
        self.proteinId = proteinId
        self.crystalUUID = crystalUUID
        self.name = name
        self.spaceGroup = spaceGroup
        self.morphology = morphology
        self.color = color
        self.size_X = size_X
        self.size_Y = size_Y
        self.size_Z = size_Z
        self.cell_a = cell_a
        self.cell_b = cell_b
        self.cell_c = cell_c
        self.cell_alpha = cell_alpha
        self.cell_beta = cell_beta
        self.cell_gamma = cell_gamma
        self.comments = comments
    def factory(*args_, **kwargs_):
        if Crystal.subclass:
            return Crystal.subclass(*args_, **kwargs_)
        else:
            return Crystal(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getCrystalId(self): return self.crystalId
    def setCrystalId(self, crystalId): self.crystalId = crystalId
    def getDiffractionPlanId(self): return self.diffractionPlanId
    def setDiffractionPlanId(self, diffractionPlanId): self.diffractionPlanId = diffractionPlanId
    def getProteinId(self): return self.proteinId
    def setProteinId(self, proteinId): self.proteinId = proteinId
    def getCrystalUUID(self): return self.crystalUUID
    def setCrystalUUID(self, crystalUUID): self.crystalUUID = crystalUUID
    def getName(self): return self.name
    def setName(self, name): self.name = name
    def getSpaceGroup(self): return self.spaceGroup
    def setSpaceGroup(self, spaceGroup): self.spaceGroup = spaceGroup
    def getMorphology(self): return self.morphology
    def setMorphology(self, morphology): self.morphology = morphology
    def getColor(self): return self.color
    def setColor(self, color): self.color = color
    def getSize_X(self): return self.size_X
    def setSize_X(self, size_X): self.size_X = size_X
    def getSize_Y(self): return self.size_Y
    def setSize_Y(self, size_Y): self.size_Y = size_Y
    def getSize_Z(self): return self.size_Z
    def setSize_Z(self, size_Z): self.size_Z = size_Z
    def getCell_a(self): return self.cell_a
    def setCell_a(self, cell_a): self.cell_a = cell_a
    def getCell_b(self): return self.cell_b
    def setCell_b(self, cell_b): self.cell_b = cell_b
    def getCell_c(self): return self.cell_c
    def setCell_c(self, cell_c): self.cell_c = cell_c
    def getCell_alpha(self): return self.cell_alpha
    def setCell_alpha(self, cell_alpha): self.cell_alpha = cell_alpha
    def getCell_beta(self): return self.cell_beta
    def setCell_beta(self, cell_beta): self.cell_beta = cell_beta
    def getCell_gamma(self): return self.cell_gamma
    def setCell_gamma(self, cell_gamma): self.cell_gamma = cell_gamma
    def getComments(self): return self.comments
    def setComments(self, comments): self.comments = comments
    def export(self, outfile, level = 0, name_='Crystal'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='Crystal'):
        pass
    def exportChildren(self, outfile, level, name_='Crystal'):
        showIndent(outfile, level)
        outfile.write('<crystalId>%s</crystalId>\n' % quote_xml(self.getCrystalId()))
        showIndent(outfile, level)
        outfile.write('<diffractionPlanId>%s</diffractionPlanId>\n' % quote_xml(self.getDiffractionPlanId()))
        showIndent(outfile, level)
        outfile.write('<proteinId>%s</proteinId>\n' % quote_xml(self.getProteinId()))
        showIndent(outfile, level)
        outfile.write('<crystalUUID>%s</crystalUUID>\n' % quote_xml(self.getCrystalUUID()))
        showIndent(outfile, level)
        outfile.write('<name>%s</name>\n' % quote_xml(self.getName()))
        showIndent(outfile, level)
        outfile.write('<spaceGroup>%s</spaceGroup>\n' % quote_xml(self.getSpaceGroup()))
        showIndent(outfile, level)
        outfile.write('<morphology>%s</morphology>\n' % quote_xml(self.getMorphology()))
        showIndent(outfile, level)
        outfile.write('<color>%s</color>\n' % quote_xml(self.getColor()))
        showIndent(outfile, level)
        outfile.write('<size_X>%e</size_X>\n' % self.getSize_X())
        showIndent(outfile, level)
        outfile.write('<size_Y>%e</size_Y>\n' % self.getSize_Y())
        showIndent(outfile, level)
        outfile.write('<size_Z>%e</size_Z>\n' % self.getSize_Z())
        showIndent(outfile, level)
        outfile.write('<cell_a>%e</cell_a>\n' % self.getCell_a())
        showIndent(outfile, level)
        outfile.write('<cell_b>%e</cell_b>\n' % self.getCell_b())
        showIndent(outfile, level)
        outfile.write('<cell_c>%e</cell_c>\n' % self.getCell_c())
        showIndent(outfile, level)
        outfile.write('<cell_alpha>%e</cell_alpha>\n' % self.getCell_alpha())
        showIndent(outfile, level)
        outfile.write('<cell_beta>%e</cell_beta>\n' % self.getCell_beta())
        showIndent(outfile, level)
        outfile.write('<cell_gamma>%e</cell_gamma>\n' % self.getCell_gamma())
        showIndent(outfile, level)
        outfile.write('<comments>%s</comments>\n' % quote_xml(self.getComments()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='Crystal' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">Crystal:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='Crystal' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = Crystal.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="Crystal" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='Crystal'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('crystalId = %s,\n' % quote_python(self.getCrystalId()))
        showIndent(outfile, level)
        outfile.write('diffractionPlanId = %s,\n' % quote_python(self.getDiffractionPlanId()))
        showIndent(outfile, level)
        outfile.write('proteinId = %s,\n' % quote_python(self.getProteinId()))
        showIndent(outfile, level)
        outfile.write('crystalUUID = %s,\n' % quote_python(self.getCrystalUUID()))
        showIndent(outfile, level)
        outfile.write('name = %s,\n' % quote_python(self.getName()))
        showIndent(outfile, level)
        outfile.write('spaceGroup = %s,\n' % quote_python(self.getSpaceGroup()))
        showIndent(outfile, level)
        outfile.write('morphology = %s,\n' % quote_python(self.getMorphology()))
        showIndent(outfile, level)
        outfile.write('color = %s,\n' % quote_python(self.getColor()))
        showIndent(outfile, level)
        outfile.write('size_X = %e,\n' % self.getSize_X())
        showIndent(outfile, level)
        outfile.write('size_Y = %e,\n' % self.getSize_Y())
        showIndent(outfile, level)
        outfile.write('size_Z = %e,\n' % self.getSize_Z())
        showIndent(outfile, level)
        outfile.write('cell_a = %e,\n' % self.getCell_a())
        showIndent(outfile, level)
        outfile.write('cell_b = %e,\n' % self.getCell_b())
        showIndent(outfile, level)
        outfile.write('cell_c = %e,\n' % self.getCell_c())
        showIndent(outfile, level)
        outfile.write('cell_alpha = %e,\n' % self.getCell_alpha())
        showIndent(outfile, level)
        outfile.write('cell_beta = %e,\n' % self.getCell_beta())
        showIndent(outfile, level)
        outfile.write('cell_gamma = %e,\n' % self.getCell_gamma())
        showIndent(outfile, level)
        outfile.write('comments = %s,\n' % quote_python(self.getComments()))
    def exportLiteralHtml(self, outfile, level = 0, name_='Crystal'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('crystalId = <a  href:"#">%s</a><br>\n' % quote_python(self.getCrystalId()))
        showIndentHtml(outfile, level)
        outfile.write('diffractionPlanId = <a  href:"#">%s</a><br>\n' % quote_python(self.getDiffractionPlanId()))
        showIndentHtml(outfile, level)
        outfile.write('proteinId = <a  href:"#">%s</a><br>\n' % quote_python(self.getProteinId()))
        showIndentHtml(outfile, level)
        outfile.write('crystalUUID = <a  href:"#">%s</a><br>\n' % quote_python(self.getCrystalUUID()))
        showIndentHtml(outfile, level)
        outfile.write('name = <a  href:"#">%s</a><br>\n' % quote_python(self.getName()))
        showIndentHtml(outfile, level)
        outfile.write('spaceGroup = <a  href:"#">%s</a><br>\n' % quote_python(self.getSpaceGroup()))
        showIndentHtml(outfile, level)
        outfile.write('morphology = <a  href:"#">%s</a><br>\n' % quote_python(self.getMorphology()))
        showIndentHtml(outfile, level)
        outfile.write('color = <a  href:"#">%s</a><br>\n' % quote_python(self.getColor()))
        showIndentHtml(outfile, level)
        outfile.write('size_X = <a  href:"#">%e</a><br>\n' % self.getSize_X())
        showIndentHtml(outfile, level)
        outfile.write('size_Y = <a  href:"#">%e</a><br>\n' % self.getSize_Y())
        showIndentHtml(outfile, level)
        outfile.write('size_Z = <a  href:"#">%e</a><br>\n' % self.getSize_Z())
        showIndentHtml(outfile, level)
        outfile.write('cell_a = <a  href:"#">%e</a><br>\n' % self.getCell_a())
        showIndentHtml(outfile, level)
        outfile.write('cell_b = <a  href:"#">%e</a><br>\n' % self.getCell_b())
        showIndentHtml(outfile, level)
        outfile.write('cell_c = <a  href:"#">%e</a><br>\n' % self.getCell_c())
        showIndentHtml(outfile, level)
        outfile.write('cell_alpha = <a  href:"#">%e</a><br>\n' % self.getCell_alpha())
        showIndentHtml(outfile, level)
        outfile.write('cell_beta = <a  href:"#">%e</a><br>\n' % self.getCell_beta())
        showIndentHtml(outfile, level)
        outfile.write('cell_gamma = <a  href:"#">%e</a><br>\n' % self.getCell_gamma())
        showIndentHtml(outfile, level)
        outfile.write('comments = <a  href:"#">%s</a><br>\n' % quote_python(self.getComments()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'crystalId':
            crystalId_ = ''
            for text__content_ in child_.childNodes:
                crystalId_ += text__content_.nodeValue
            self.crystalId = crystalId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'diffractionPlanId':
            diffractionPlanId_ = ''
            for text__content_ in child_.childNodes:
                diffractionPlanId_ += text__content_.nodeValue
            self.diffractionPlanId = diffractionPlanId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'proteinId':
            proteinId_ = ''
            for text__content_ in child_.childNodes:
                proteinId_ += text__content_.nodeValue
            self.proteinId = proteinId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'crystalUUID':
            crystalUUID_ = ''
            for text__content_ in child_.childNodes:
                crystalUUID_ += text__content_.nodeValue
            self.crystalUUID = crystalUUID_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'name':
            name_ = ''
            for text__content_ in child_.childNodes:
                name_ += text__content_.nodeValue
            self.name = name_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'spaceGroup':
            spaceGroup_ = ''
            for text__content_ in child_.childNodes:
                spaceGroup_ += text__content_.nodeValue
            self.spaceGroup = spaceGroup_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'morphology':
            morphology_ = ''
            for text__content_ in child_.childNodes:
                morphology_ += text__content_.nodeValue
            self.morphology = morphology_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'color':
            color_ = ''
            for text__content_ in child_.childNodes:
                color_ += text__content_.nodeValue
            self.color = color_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'size_X':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.size_X = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'size_Y':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.size_Y = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'size_Z':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.size_Z = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cell_a':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.cell_a = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cell_b':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.cell_b = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cell_c':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.cell_c = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cell_alpha':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.cell_alpha = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cell_beta':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.cell_beta = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cell_gamma':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.cell_gamma = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'comments':
            comments_ = ''
            for text__content_ in child_.childNodes:
                comments_ += text__content_.nodeValue
            self.comments = comments_
# end class Crystal


class Crystal_has_UUID(object):
    subclass = None
    def __init__(self, crystal_has_UUID_Id='', crystalId='', UUID=''):
        self.crystal_has_UUID_Id = crystal_has_UUID_Id
        self.crystalId = crystalId
        self.UUID = UUID
    def factory(*args_, **kwargs_):
        if Crystal_has_UUID.subclass:
            return Crystal_has_UUID.subclass(*args_, **kwargs_)
        else:
            return Crystal_has_UUID(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getCrystal_has_UUID_Id(self): return self.crystal_has_UUID_Id
    def setCrystal_has_UUID_Id(self, crystal_has_UUID_Id): self.crystal_has_UUID_Id = crystal_has_UUID_Id
    def getCrystalId(self): return self.crystalId
    def setCrystalId(self, crystalId): self.crystalId = crystalId
    def getUUID(self): return self.UUID
    def setUUID(self, UUID): self.UUID = UUID
    def export(self, outfile, level = 0, name_='Crystal_has_UUID'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='Crystal_has_UUID'):
        pass
    def exportChildren(self, outfile, level, name_='Crystal_has_UUID'):
        showIndent(outfile, level)
        outfile.write('<crystal_has_UUID_Id>%s</crystal_has_UUID_Id>\n' % quote_xml(self.getCrystal_has_UUID_Id()))
        showIndent(outfile, level)
        outfile.write('<crystalId>%s</crystalId>\n' % quote_xml(self.getCrystalId()))
        showIndent(outfile, level)
        outfile.write('<UUID>%s</UUID>\n' % quote_xml(self.getUUID()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='Crystal_has_UUID' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">Crystal_has_UUID:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='Crystal_has_UUID' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = Crystal_has_UUID.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="Crystal_has_UUID" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='Crystal_has_UUID'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('crystal_has_UUID_Id = %s,\n' % quote_python(self.getCrystal_has_UUID_Id()))
        showIndent(outfile, level)
        outfile.write('crystalId = %s,\n' % quote_python(self.getCrystalId()))
        showIndent(outfile, level)
        outfile.write('UUID = %s,\n' % quote_python(self.getUUID()))
    def exportLiteralHtml(self, outfile, level = 0, name_='Crystal_has_UUID'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('crystal_has_UUID_Id = <a  href:"#">%s</a><br>\n' % quote_python(self.getCrystal_has_UUID_Id()))
        showIndentHtml(outfile, level)
        outfile.write('crystalId = <a  href:"#">%s</a><br>\n' % quote_python(self.getCrystalId()))
        showIndentHtml(outfile, level)
        outfile.write('UUID = <a  href:"#">%s</a><br>\n' % quote_python(self.getUUID()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'crystal_has_UUID_Id':
            crystal_has_UUID_Id_ = ''
            for text__content_ in child_.childNodes:
                crystal_has_UUID_Id_ += text__content_.nodeValue
            self.crystal_has_UUID_Id = crystal_has_UUID_Id_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'crystalId':
            crystalId_ = ''
            for text__content_ in child_.childNodes:
                crystalId_ += text__content_.nodeValue
            self.crystalId = crystalId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'UUID':
            UUID_ = ''
            for text__content_ in child_.childNodes:
                UUID_ += text__content_.nodeValue
            self.UUID = UUID_
# end class Crystal_has_UUID


class DataCollection(object):
    subclass = None
    def __init__(self, dataCollectionId='', blSampleId='', sessionId='', experimentType='', dataCollectionNumber='', startTime='', endTime='', runStatus='', axisStart=0.0, axisEnd=0.0, axisRange=0.0, overlap=0.0, numberOfImages='', startImageNumber='', numberOfPasses='', exposureTime=0.0, imageDirectory='', imagePrefix='', imageSuffix='', fileTemplate='', wavelength=0.0, resolution=0.0, detectorDistance=0.0, xBeam=0.0, yBeam=0.0, comments='', printableForReport=False, crystalClass='', beamSizeVertical=0.0, beamSizeHorizontal=0.0, transmission=0.0, synchrotronMode='', xtalSnapshotFullPath1='', xtalSnapshotFullPath2='', xtalSnapshotFullPath3='', xtalSnapshotFullPath4='', rotationAxis='', phiStart=0.0, kappaStart=0.0, omegaStart=0.0, resolutionAtCorner=0.0, detector2Theta=0.0, detectorMode='', undulatorGap1=0.0, undulatorGap2=0.0, undulatorGap3=0.0, beamSizeAtSampleX=0.0, beamSizeAtSampleY=0.0, centeringMethod='', averageTemperature=0.0):
        self.dataCollectionId = dataCollectionId
        self.blSampleId = blSampleId
        self.sessionId = sessionId
        self.experimentType = experimentType
        self.dataCollectionNumber = dataCollectionNumber
        self.startTime = startTime
        self.endTime = endTime
        self.runStatus = runStatus
        self.axisStart = axisStart
        self.axisEnd = axisEnd
        self.axisRange = axisRange
        self.overlap = overlap
        self.numberOfImages = numberOfImages
        self.startImageNumber = startImageNumber
        self.numberOfPasses = numberOfPasses
        self.exposureTime = exposureTime
        self.imageDirectory = imageDirectory
        self.imagePrefix = imagePrefix
        self.imageSuffix = imageSuffix
        self.fileTemplate = fileTemplate
        self.wavelength = wavelength
        self.resolution = resolution
        self.detectorDistance = detectorDistance
        self.xBeam = xBeam
        self.yBeam = yBeam
        self.comments = comments
        self.printableForReport = printableForReport
        self.crystalClass = crystalClass
        self.beamSizeVertical = beamSizeVertical
        self.beamSizeHorizontal = beamSizeHorizontal
        self.transmission = transmission
        self.synchrotronMode = synchrotronMode
        self.xtalSnapshotFullPath1 = xtalSnapshotFullPath1
        self.xtalSnapshotFullPath2 = xtalSnapshotFullPath2
        self.xtalSnapshotFullPath3 = xtalSnapshotFullPath3
        self.xtalSnapshotFullPath4 = xtalSnapshotFullPath4
        self.rotationAxis = rotationAxis
        self.phiStart = phiStart
        self.kappaStart = kappaStart
        self.omegaStart = omegaStart
        self.resolutionAtCorner = resolutionAtCorner
        self.detector2Theta = detector2Theta
        self.detectorMode = detectorMode
        self.undulatorGap1 = undulatorGap1
        self.undulatorGap2 = undulatorGap2
        self.undulatorGap3 = undulatorGap3
        self.beamSizeAtSampleX = beamSizeAtSampleX
        self.beamSizeAtSampleY = beamSizeAtSampleY
        self.centeringMethod = centeringMethod
        self.averageTemperature = averageTemperature
    def factory(*args_, **kwargs_):
        if DataCollection.subclass:
            return DataCollection.subclass(*args_, **kwargs_)
        else:
            return DataCollection(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getDataCollectionId(self): return self.dataCollectionId
    def setDataCollectionId(self, dataCollectionId): self.dataCollectionId = dataCollectionId
    def getBlSampleId(self): return self.blSampleId
    def setBlSampleId(self, blSampleId): self.blSampleId = blSampleId
    def getSessionId(self): return self.sessionId
    def setSessionId(self, sessionId): self.sessionId = sessionId
    def getExperimentType(self): return self.experimentType
    def setExperimentType(self, experimentType): self.experimentType = experimentType
    def getDataCollectionNumber(self): return self.dataCollectionNumber
    def setDataCollectionNumber(self, dataCollectionNumber): self.dataCollectionNumber = dataCollectionNumber
    def getStartTime(self): return self.startTime
    def setStartTime(self, startTime): self.startTime = startTime
    def getEndTime(self): return self.endTime
    def setEndTime(self, endTime): self.endTime = endTime
    def getRunStatus(self): return self.runStatus
    def setRunStatus(self, runStatus): self.runStatus = runStatus
    def getAxisStart(self): return self.axisStart
    def setAxisStart(self, axisStart): self.axisStart = axisStart
    def getAxisEnd(self): return self.axisEnd
    def setAxisEnd(self, axisEnd): self.axisEnd = axisEnd
    def getAxisRange(self): return self.axisRange
    def setAxisRange(self, axisRange): self.axisRange = axisRange
    def getOverlap(self): return self.overlap
    def setOverlap(self, overlap): self.overlap = overlap
    def getNumberOfImages(self): return self.numberOfImages
    def setNumberOfImages(self, numberOfImages): self.numberOfImages = numberOfImages
    def getStartImageNumber(self): return self.startImageNumber
    def setStartImageNumber(self, startImageNumber): self.startImageNumber = startImageNumber
    def getNumberOfPasses(self): return self.numberOfPasses
    def setNumberOfPasses(self, numberOfPasses): self.numberOfPasses = numberOfPasses
    def getExposureTime(self): return self.exposureTime
    def setExposureTime(self, exposureTime): self.exposureTime = exposureTime
    def getImageDirectory(self): return self.imageDirectory
    def setImageDirectory(self, imageDirectory): self.imageDirectory = imageDirectory
    def getImagePrefix(self): return self.imagePrefix
    def setImagePrefix(self, imagePrefix): self.imagePrefix = imagePrefix
    def getImageSuffix(self): return self.imageSuffix
    def setImageSuffix(self, imageSuffix): self.imageSuffix = imageSuffix
    def getFileTemplate(self): return self.fileTemplate
    def setFileTemplate(self, fileTemplate): self.fileTemplate = fileTemplate
    def getWavelength(self): return self.wavelength
    def setWavelength(self, wavelength): self.wavelength = wavelength
    def getResolution(self): return self.resolution
    def setResolution(self, resolution): self.resolution = resolution
    def getDetectorDistance(self): return self.detectorDistance
    def setDetectorDistance(self, detectorDistance): self.detectorDistance = detectorDistance
    def getXBeam(self): return self.xBeam
    def setXBeam(self, xBeam): self.xBeam = xBeam
    def getYBeam(self): return self.yBeam
    def setYBeam(self, yBeam): self.yBeam = yBeam
    def getComments(self): return self.comments
    def setComments(self, comments): self.comments = comments
    def getPrintableForReport(self): return self.printableForReport
    def setPrintableForReport(self, printableForReport): self.printableForReport = printableForReport
    def getCrystalClass(self): return self.crystalClass
    def setCrystalClass(self, crystalClass): self.crystalClass = crystalClass
    def getBeamSizeVertical(self): return self.beamSizeVertical
    def setBeamSizeVertical(self, beamSizeVertical): self.beamSizeVertical = beamSizeVertical
    def getBeamSizeHorizontal(self): return self.beamSizeHorizontal
    def setBeamSizeHorizontal(self, beamSizeHorizontal): self.beamSizeHorizontal = beamSizeHorizontal
    def getTransmission(self): return self.transmission
    def setTransmission(self, transmission): self.transmission = transmission
    def getSynchrotronMode(self): return self.synchrotronMode
    def setSynchrotronMode(self, synchrotronMode): self.synchrotronMode = synchrotronMode
    def getXtalSnapshotFullPath1(self): return self.xtalSnapshotFullPath1
    def setXtalSnapshotFullPath1(self, xtalSnapshotFullPath1): self.xtalSnapshotFullPath1 = xtalSnapshotFullPath1
    def getXtalSnapshotFullPath2(self): return self.xtalSnapshotFullPath2
    def setXtalSnapshotFullPath2(self, xtalSnapshotFullPath2): self.xtalSnapshotFullPath2 = xtalSnapshotFullPath2
    def getXtalSnapshotFullPath3(self): return self.xtalSnapshotFullPath3
    def setXtalSnapshotFullPath3(self, xtalSnapshotFullPath3): self.xtalSnapshotFullPath3 = xtalSnapshotFullPath3
    def getXtalSnapshotFullPath4(self): return self.xtalSnapshotFullPath4
    def setXtalSnapshotFullPath4(self, xtalSnapshotFullPath4): self.xtalSnapshotFullPath4 = xtalSnapshotFullPath4
    def getRotationAxis(self): return self.rotationAxis
    def setRotationAxis(self, rotationAxis): self.rotationAxis = rotationAxis
    def getPhiStart(self): return self.phiStart
    def setPhiStart(self, phiStart): self.phiStart = phiStart
    def getKappaStart(self): return self.kappaStart
    def setKappaStart(self, kappaStart): self.kappaStart = kappaStart
    def getOmegaStart(self): return self.omegaStart
    def setOmegaStart(self, omegaStart): self.omegaStart = omegaStart
    def getResolutionAtCorner(self): return self.resolutionAtCorner
    def setResolutionAtCorner(self, resolutionAtCorner): self.resolutionAtCorner = resolutionAtCorner
    def getDetector2Theta(self): return self.detector2Theta
    def setDetector2Theta(self, detector2Theta): self.detector2Theta = detector2Theta
    def getDetectorMode(self): return self.detectorMode
    def setDetectorMode(self, detectorMode): self.detectorMode = detectorMode
    def getUndulatorGap1(self): return self.undulatorGap1
    def setUndulatorGap1(self, undulatorGap1): self.undulatorGap1 = undulatorGap1
    def getUndulatorGap2(self): return self.undulatorGap2
    def setUndulatorGap2(self, undulatorGap2): self.undulatorGap2 = undulatorGap2
    def getUndulatorGap3(self): return self.undulatorGap3
    def setUndulatorGap3(self, undulatorGap3): self.undulatorGap3 = undulatorGap3
    def getBeamSizeAtSampleX(self): return self.beamSizeAtSampleX
    def setBeamSizeAtSampleX(self, beamSizeAtSampleX): self.beamSizeAtSampleX = beamSizeAtSampleX
    def getBeamSizeAtSampleY(self): return self.beamSizeAtSampleY
    def setBeamSizeAtSampleY(self, beamSizeAtSampleY): self.beamSizeAtSampleY = beamSizeAtSampleY
    def getCenteringMethod(self): return self.centeringMethod
    def setCenteringMethod(self, centeringMethod): self.centeringMethod = centeringMethod
    def getAverageTemperature(self): return self.averageTemperature
    def setAverageTemperature(self, averageTemperature): self.averageTemperature = averageTemperature
    def export(self, outfile, level = 0, name_='DataCollection'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='DataCollection'):
        pass
    def exportChildren(self, outfile, level, name_='DataCollection'):
        showIndent(outfile, level)
        outfile.write('<dataCollectionId>%s</dataCollectionId>\n' % quote_xml(self.getDataCollectionId()))
        showIndent(outfile, level)
        outfile.write('<blSampleId>%s</blSampleId>\n' % quote_xml(self.getBlSampleId()))
        showIndent(outfile, level)
        outfile.write('<sessionId>%s</sessionId>\n' % quote_xml(self.getSessionId()))
        showIndent(outfile, level)
        outfile.write('<experimentType>%s</experimentType>\n' % quote_xml(self.getExperimentType()))
        showIndent(outfile, level)
        outfile.write('<dataCollectionNumber>%s</dataCollectionNumber>\n' % quote_xml(self.getDataCollectionNumber()))
        showIndent(outfile, level)
        outfile.write('<startTime>%s</startTime>\n' % quote_xml(self.getStartTime()))
        showIndent(outfile, level)
        outfile.write('<endTime>%s</endTime>\n' % quote_xml(self.getEndTime()))
        showIndent(outfile, level)
        outfile.write('<runStatus>%s</runStatus>\n' % quote_xml(self.getRunStatus()))
        showIndent(outfile, level)
        outfile.write('<axisStart>%e</axisStart>\n' % self.getAxisStart())
        showIndent(outfile, level)
        outfile.write('<axisEnd>%e</axisEnd>\n' % self.getAxisEnd())
        showIndent(outfile, level)
        outfile.write('<axisRange>%e</axisRange>\n' % self.getAxisRange())
        showIndent(outfile, level)
        outfile.write('<overlap>%e</overlap>\n' % self.getOverlap())
        showIndent(outfile, level)
        outfile.write('<numberOfImages>%s</numberOfImages>\n' % quote_xml(self.getNumberOfImages()))
        showIndent(outfile, level)
        outfile.write('<startImageNumber>%s</startImageNumber>\n' % quote_xml(self.getStartImageNumber()))
        showIndent(outfile, level)
        outfile.write('<numberOfPasses>%s</numberOfPasses>\n' % quote_xml(self.getNumberOfPasses()))
        showIndent(outfile, level)
        outfile.write('<exposureTime>%e</exposureTime>\n' % self.getExposureTime())
        showIndent(outfile, level)
        outfile.write('<imageDirectory>%s</imageDirectory>\n' % quote_xml(self.getImageDirectory()))
        showIndent(outfile, level)
        outfile.write('<imagePrefix>%s</imagePrefix>\n' % quote_xml(self.getImagePrefix()))
        showIndent(outfile, level)
        outfile.write('<imageSuffix>%s</imageSuffix>\n' % quote_xml(self.getImageSuffix()))
        showIndent(outfile, level)
        outfile.write('<fileTemplate>%s</fileTemplate>\n' % quote_xml(self.getFileTemplate()))
        showIndent(outfile, level)
        outfile.write('<wavelength>%e</wavelength>\n' % self.getWavelength())
        showIndent(outfile, level)
        outfile.write('<resolution>%e</resolution>\n' % self.getResolution())
        showIndent(outfile, level)
        outfile.write('<detectorDistance>%e</detectorDistance>\n' % self.getDetectorDistance())
        showIndent(outfile, level)
        outfile.write('<xBeam>%e</xBeam>\n' % self.getXBeam())
        showIndent(outfile, level)
        outfile.write('<yBeam>%e</yBeam>\n' % self.getYBeam())
        showIndent(outfile, level)
        outfile.write('<comments>%s</comments>\n' % quote_xml(self.getComments()))
        showIndent(outfile, level)
        outfile.write('<printableForReport>%s</printableForReport>\n' % self.getPrintableForReport())
        showIndent(outfile, level)
        outfile.write('<crystalClass>%s</crystalClass>\n' % quote_xml(self.getCrystalClass()))
        showIndent(outfile, level)
        outfile.write('<beamSizeVertical>%e</beamSizeVertical>\n' % self.getBeamSizeVertical())
        showIndent(outfile, level)
        outfile.write('<beamSizeHorizontal>%e</beamSizeHorizontal>\n' % self.getBeamSizeHorizontal())
        showIndent(outfile, level)
        outfile.write('<transmission>%e</transmission>\n' % self.getTransmission())
        showIndent(outfile, level)
        outfile.write('<synchrotronMode>%s</synchrotronMode>\n' % quote_xml(self.getSynchrotronMode()))
        showIndent(outfile, level)
        outfile.write('<xtalSnapshotFullPath1>%s</xtalSnapshotFullPath1>\n' % quote_xml(self.getXtalSnapshotFullPath1()))
        showIndent(outfile, level)
        outfile.write('<xtalSnapshotFullPath2>%s</xtalSnapshotFullPath2>\n' % quote_xml(self.getXtalSnapshotFullPath2()))
        showIndent(outfile, level)
        outfile.write('<xtalSnapshotFullPath3>%s</xtalSnapshotFullPath3>\n' % quote_xml(self.getXtalSnapshotFullPath3()))
        showIndent(outfile, level)
        outfile.write('<xtalSnapshotFullPath4>%s</xtalSnapshotFullPath4>\n' % quote_xml(self.getXtalSnapshotFullPath4()))
        showIndent(outfile, level)
        outfile.write('<rotationAxis>%s</rotationAxis>\n' % quote_xml(self.getRotationAxis()))
        showIndent(outfile, level)
        outfile.write('<phiStart>%e</phiStart>\n' % self.getPhiStart())
        showIndent(outfile, level)
        outfile.write('<kappaStart>%e</kappaStart>\n' % self.getKappaStart())
        showIndent(outfile, level)
        outfile.write('<omegaStart>%e</omegaStart>\n' % self.getOmegaStart())
        showIndent(outfile, level)
        outfile.write('<resolutionAtCorner>%e</resolutionAtCorner>\n' % self.getResolutionAtCorner())
        showIndent(outfile, level)
        outfile.write('<detector2Theta>%e</detector2Theta>\n' % self.getDetector2Theta())
        showIndent(outfile, level)
        outfile.write('<detectorMode>%s</detectorMode>\n' % quote_xml(self.getDetectorMode()))
        showIndent(outfile, level)
        outfile.write('<undulatorGap1>%e</undulatorGap1>\n' % self.getUndulatorGap1())
        showIndent(outfile, level)
        outfile.write('<undulatorGap2>%e</undulatorGap2>\n' % self.getUndulatorGap2())
        showIndent(outfile, level)
        outfile.write('<undulatorGap3>%e</undulatorGap3>\n' % self.getUndulatorGap3())
        showIndent(outfile, level)
        outfile.write('<beamSizeAtSampleX>%e</beamSizeAtSampleX>\n' % self.getBeamSizeAtSampleX())
        showIndent(outfile, level)
        outfile.write('<beamSizeAtSampleY>%e</beamSizeAtSampleY>\n' % self.getBeamSizeAtSampleY())
        showIndent(outfile, level)
        outfile.write('<centeringMethod>%s</centeringMethod>\n' % quote_xml(self.getCenteringMethod()))
        showIndent(outfile, level)
        outfile.write('<averageTemperature>%e</averageTemperature>\n' % self.getAverageTemperature())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='DataCollection' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">DataCollection:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='DataCollection' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = DataCollection.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="DataCollection" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='DataCollection'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('dataCollectionId = %s,\n' % quote_python(self.getDataCollectionId()))
        showIndent(outfile, level)
        outfile.write('blSampleId = %s,\n' % quote_python(self.getBlSampleId()))
        showIndent(outfile, level)
        outfile.write('sessionId = %s,\n' % quote_python(self.getSessionId()))
        showIndent(outfile, level)
        outfile.write('experimentType = %s,\n' % quote_python(self.getExperimentType()))
        showIndent(outfile, level)
        outfile.write('dataCollectionNumber = %s,\n' % quote_python(self.getDataCollectionNumber()))
        showIndent(outfile, level)
        outfile.write('startTime = %s,\n' % quote_python(self.getStartTime()))
        showIndent(outfile, level)
        outfile.write('endTime = %s,\n' % quote_python(self.getEndTime()))
        showIndent(outfile, level)
        outfile.write('runStatus = %s,\n' % quote_python(self.getRunStatus()))
        showIndent(outfile, level)
        outfile.write('axisStart = %e,\n' % self.getAxisStart())
        showIndent(outfile, level)
        outfile.write('axisEnd = %e,\n' % self.getAxisEnd())
        showIndent(outfile, level)
        outfile.write('axisRange = %e,\n' % self.getAxisRange())
        showIndent(outfile, level)
        outfile.write('overlap = %e,\n' % self.getOverlap())
        showIndent(outfile, level)
        outfile.write('numberOfImages = %s,\n' % quote_python(self.getNumberOfImages()))
        showIndent(outfile, level)
        outfile.write('startImageNumber = %s,\n' % quote_python(self.getStartImageNumber()))
        showIndent(outfile, level)
        outfile.write('numberOfPasses = %s,\n' % quote_python(self.getNumberOfPasses()))
        showIndent(outfile, level)
        outfile.write('exposureTime = %e,\n' % self.getExposureTime())
        showIndent(outfile, level)
        outfile.write('imageDirectory = %s,\n' % quote_python(self.getImageDirectory()))
        showIndent(outfile, level)
        outfile.write('imagePrefix = %s,\n' % quote_python(self.getImagePrefix()))
        showIndent(outfile, level)
        outfile.write('imageSuffix = %s,\n' % quote_python(self.getImageSuffix()))
        showIndent(outfile, level)
        outfile.write('fileTemplate = %s,\n' % quote_python(self.getFileTemplate()))
        showIndent(outfile, level)
        outfile.write('wavelength = %e,\n' % self.getWavelength())
        showIndent(outfile, level)
        outfile.write('resolution = %e,\n' % self.getResolution())
        showIndent(outfile, level)
        outfile.write('detectorDistance = %e,\n' % self.getDetectorDistance())
        showIndent(outfile, level)
        outfile.write('xBeam = %e,\n' % self.getXBeam())
        showIndent(outfile, level)
        outfile.write('yBeam = %e,\n' % self.getYBeam())
        showIndent(outfile, level)
        outfile.write('comments = %s,\n' % quote_python(self.getComments()))
        showIndent(outfile, level)
        outfile.write('printableForReport = %s,\n' % self.getPrintableForReport())
        showIndent(outfile, level)
        outfile.write('crystalClass = %s,\n' % quote_python(self.getCrystalClass()))
        showIndent(outfile, level)
        outfile.write('beamSizeVertical = %e,\n' % self.getBeamSizeVertical())
        showIndent(outfile, level)
        outfile.write('beamSizeHorizontal = %e,\n' % self.getBeamSizeHorizontal())
        showIndent(outfile, level)
        outfile.write('transmission = %e,\n' % self.getTransmission())
        showIndent(outfile, level)
        outfile.write('synchrotronMode = %s,\n' % quote_python(self.getSynchrotronMode()))
        showIndent(outfile, level)
        outfile.write('xtalSnapshotFullPath1 = %s,\n' % quote_python(self.getXtalSnapshotFullPath1()))
        showIndent(outfile, level)
        outfile.write('xtalSnapshotFullPath2 = %s,\n' % quote_python(self.getXtalSnapshotFullPath2()))
        showIndent(outfile, level)
        outfile.write('xtalSnapshotFullPath3 = %s,\n' % quote_python(self.getXtalSnapshotFullPath3()))
        showIndent(outfile, level)
        outfile.write('xtalSnapshotFullPath4 = %s,\n' % quote_python(self.getXtalSnapshotFullPath4()))
        showIndent(outfile, level)
        outfile.write('rotationAxis = %s,\n' % quote_python(self.getRotationAxis()))
        showIndent(outfile, level)
        outfile.write('phiStart = %e,\n' % self.getPhiStart())
        showIndent(outfile, level)
        outfile.write('kappaStart = %e,\n' % self.getKappaStart())
        showIndent(outfile, level)
        outfile.write('omegaStart = %e,\n' % self.getOmegaStart())
        showIndent(outfile, level)
        outfile.write('resolutionAtCorner = %e,\n' % self.getResolutionAtCorner())
        showIndent(outfile, level)
        outfile.write('detector2Theta = %e,\n' % self.getDetector2Theta())
        showIndent(outfile, level)
        outfile.write('detectorMode = %s,\n' % quote_python(self.getDetectorMode()))
        showIndent(outfile, level)
        outfile.write('undulatorGap1 = %e,\n' % self.getUndulatorGap1())
        showIndent(outfile, level)
        outfile.write('undulatorGap2 = %e,\n' % self.getUndulatorGap2())
        showIndent(outfile, level)
        outfile.write('undulatorGap3 = %e,\n' % self.getUndulatorGap3())
        showIndent(outfile, level)
        outfile.write('beamSizeAtSampleX = %e,\n' % self.getBeamSizeAtSampleX())
        showIndent(outfile, level)
        outfile.write('beamSizeAtSampleY = %e,\n' % self.getBeamSizeAtSampleY())
        showIndent(outfile, level)
        outfile.write('centeringMethod = %s,\n' % quote_python(self.getCenteringMethod()))
        showIndent(outfile, level)
        outfile.write('averageTemperature = %e,\n' % self.getAverageTemperature())
    def exportLiteralHtml(self, outfile, level = 0, name_='DataCollection'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('dataCollectionId = <a  href:"#">%s</a><br>\n' % quote_python(self.getDataCollectionId()))
        showIndentHtml(outfile, level)
        outfile.write('blSampleId = <a  href:"#">%s</a><br>\n' % quote_python(self.getBlSampleId()))
        showIndentHtml(outfile, level)
        outfile.write('sessionId = <a  href:"#">%s</a><br>\n' % quote_python(self.getSessionId()))
        showIndentHtml(outfile, level)
        outfile.write('experimentType = <a  href:"#">%s</a><br>\n' % quote_python(self.getExperimentType()))
        showIndentHtml(outfile, level)
        outfile.write('dataCollectionNumber = <a  href:"#">%s</a><br>\n' % quote_python(self.getDataCollectionNumber()))
        showIndentHtml(outfile, level)
        outfile.write('startTime = <a  href:"#">%s</a><br>\n' % quote_python(self.getStartTime()))
        showIndentHtml(outfile, level)
        outfile.write('endTime = <a  href:"#">%s</a><br>\n' % quote_python(self.getEndTime()))
        showIndentHtml(outfile, level)
        outfile.write('runStatus = <a  href:"#">%s</a><br>\n' % quote_python(self.getRunStatus()))
        showIndentHtml(outfile, level)
        outfile.write('axisStart = <a  href:"#">%e</a><br>\n' % self.getAxisStart())
        showIndentHtml(outfile, level)
        outfile.write('axisEnd = <a  href:"#">%e</a><br>\n' % self.getAxisEnd())
        showIndentHtml(outfile, level)
        outfile.write('axisRange = <a  href:"#">%e</a><br>\n' % self.getAxisRange())
        showIndentHtml(outfile, level)
        outfile.write('overlap = <a  href:"#">%e</a><br>\n' % self.getOverlap())
        showIndentHtml(outfile, level)
        outfile.write('numberOfImages = <a  href:"#">%s</a><br>\n' % quote_python(self.getNumberOfImages()))
        showIndentHtml(outfile, level)
        outfile.write('startImageNumber = <a  href:"#">%s</a><br>\n' % quote_python(self.getStartImageNumber()))
        showIndentHtml(outfile, level)
        outfile.write('numberOfPasses = <a  href:"#">%s</a><br>\n' % quote_python(self.getNumberOfPasses()))
        showIndentHtml(outfile, level)
        outfile.write('exposureTime = <a  href:"#">%e</a><br>\n' % self.getExposureTime())
        showIndentHtml(outfile, level)
        outfile.write('imageDirectory = <a  href:"#">%s</a><br>\n' % quote_python(self.getImageDirectory()))
        showIndentHtml(outfile, level)
        outfile.write('imagePrefix = <a  href:"#">%s</a><br>\n' % quote_python(self.getImagePrefix()))
        showIndentHtml(outfile, level)
        outfile.write('imageSuffix = <a  href:"#">%s</a><br>\n' % quote_python(self.getImageSuffix()))
        showIndentHtml(outfile, level)
        outfile.write('fileTemplate = <a  href:"#">%s</a><br>\n' % quote_python(self.getFileTemplate()))
        showIndentHtml(outfile, level)
        outfile.write('wavelength = <a  href:"#">%e</a><br>\n' % self.getWavelength())
        showIndentHtml(outfile, level)
        outfile.write('resolution = <a  href:"#">%e</a><br>\n' % self.getResolution())
        showIndentHtml(outfile, level)
        outfile.write('detectorDistance = <a  href:"#">%e</a><br>\n' % self.getDetectorDistance())
        showIndentHtml(outfile, level)
        outfile.write('xBeam = <a  href:"#">%e</a><br>\n' % self.getXBeam())
        showIndentHtml(outfile, level)
        outfile.write('yBeam = <a  href:"#">%e</a><br>\n' % self.getYBeam())
        showIndentHtml(outfile, level)
        outfile.write('comments = <a  href:"#">%s</a><br>\n' % quote_python(self.getComments()))
        showIndentHtml(outfile, level)
        outfile.write('printableForReport = <a  href:"#">%s</a><br>\n' % self.getPrintableForReport())
        showIndentHtml(outfile, level)
        outfile.write('crystalClass = <a  href:"#">%s</a><br>\n' % quote_python(self.getCrystalClass()))
        showIndentHtml(outfile, level)
        outfile.write('beamSizeVertical = <a  href:"#">%e</a><br>\n' % self.getBeamSizeVertical())
        showIndentHtml(outfile, level)
        outfile.write('beamSizeHorizontal = <a  href:"#">%e</a><br>\n' % self.getBeamSizeHorizontal())
        showIndentHtml(outfile, level)
        outfile.write('transmission = <a  href:"#">%e</a><br>\n' % self.getTransmission())
        showIndentHtml(outfile, level)
        outfile.write('synchrotronMode = <a  href:"#">%s</a><br>\n' % quote_python(self.getSynchrotronMode()))
        showIndentHtml(outfile, level)
        outfile.write('xtalSnapshotFullPath1 = <a  href:"#">%s</a><br>\n' % quote_python(self.getXtalSnapshotFullPath1()))
        showIndentHtml(outfile, level)
        outfile.write('xtalSnapshotFullPath2 = <a  href:"#">%s</a><br>\n' % quote_python(self.getXtalSnapshotFullPath2()))
        showIndentHtml(outfile, level)
        outfile.write('xtalSnapshotFullPath3 = <a  href:"#">%s</a><br>\n' % quote_python(self.getXtalSnapshotFullPath3()))
        showIndentHtml(outfile, level)
        outfile.write('xtalSnapshotFullPath4 = <a  href:"#">%s</a><br>\n' % quote_python(self.getXtalSnapshotFullPath4()))
        showIndentHtml(outfile, level)
        outfile.write('rotationAxis = <a  href:"#">%s</a><br>\n' % quote_python(self.getRotationAxis()))
        showIndentHtml(outfile, level)
        outfile.write('phiStart = <a  href:"#">%e</a><br>\n' % self.getPhiStart())
        showIndentHtml(outfile, level)
        outfile.write('kappaStart = <a  href:"#">%e</a><br>\n' % self.getKappaStart())
        showIndentHtml(outfile, level)
        outfile.write('omegaStart = <a  href:"#">%e</a><br>\n' % self.getOmegaStart())
        showIndentHtml(outfile, level)
        outfile.write('resolutionAtCorner = <a  href:"#">%e</a><br>\n' % self.getResolutionAtCorner())
        showIndentHtml(outfile, level)
        outfile.write('detector2Theta = <a  href:"#">%e</a><br>\n' % self.getDetector2Theta())
        showIndentHtml(outfile, level)
        outfile.write('detectorMode = <a  href:"#">%s</a><br>\n' % quote_python(self.getDetectorMode()))
        showIndentHtml(outfile, level)
        outfile.write('undulatorGap1 = <a  href:"#">%e</a><br>\n' % self.getUndulatorGap1())
        showIndentHtml(outfile, level)
        outfile.write('undulatorGap2 = <a  href:"#">%e</a><br>\n' % self.getUndulatorGap2())
        showIndentHtml(outfile, level)
        outfile.write('undulatorGap3 = <a  href:"#">%e</a><br>\n' % self.getUndulatorGap3())
        showIndentHtml(outfile, level)
        outfile.write('beamSizeAtSampleX = <a  href:"#">%e</a><br>\n' % self.getBeamSizeAtSampleX())
        showIndentHtml(outfile, level)
        outfile.write('beamSizeAtSampleY = <a  href:"#">%e</a><br>\n' % self.getBeamSizeAtSampleY())
        showIndentHtml(outfile, level)
        outfile.write('centeringMethod = <a  href:"#">%s</a><br>\n' % quote_python(self.getCenteringMethod()))
        showIndentHtml(outfile, level)
        outfile.write('averageTemperature = <a  href:"#">%e</a><br>\n' % self.getAverageTemperature())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'dataCollectionId':
            dataCollectionId_ = ''
            for text__content_ in child_.childNodes:
                dataCollectionId_ += text__content_.nodeValue
            self.dataCollectionId = dataCollectionId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'blSampleId':
            blSampleId_ = ''
            for text__content_ in child_.childNodes:
                blSampleId_ += text__content_.nodeValue
            self.blSampleId = blSampleId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sessionId':
            sessionId_ = ''
            for text__content_ in child_.childNodes:
                sessionId_ += text__content_.nodeValue
            self.sessionId = sessionId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'experimentType':
            experimentType_ = ''
            for text__content_ in child_.childNodes:
                experimentType_ += text__content_.nodeValue
            self.experimentType = experimentType_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'dataCollectionNumber':
            dataCollectionNumber_ = ''
            for text__content_ in child_.childNodes:
                dataCollectionNumber_ += text__content_.nodeValue
            self.dataCollectionNumber = dataCollectionNumber_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'startTime':
            startTime_ = ''
            for text__content_ in child_.childNodes:
                startTime_ += text__content_.nodeValue
            self.startTime = startTime_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'endTime':
            endTime_ = ''
            for text__content_ in child_.childNodes:
                endTime_ += text__content_.nodeValue
            self.endTime = endTime_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'runStatus':
            runStatus_ = ''
            for text__content_ in child_.childNodes:
                runStatus_ += text__content_.nodeValue
            self.runStatus = runStatus_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'axisStart':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.axisStart = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'axisEnd':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.axisEnd = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'axisRange':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.axisRange = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'overlap':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.overlap = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'numberOfImages':
            numberOfImages_ = ''
            for text__content_ in child_.childNodes:
                numberOfImages_ += text__content_.nodeValue
            self.numberOfImages = numberOfImages_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'startImageNumber':
            startImageNumber_ = ''
            for text__content_ in child_.childNodes:
                startImageNumber_ += text__content_.nodeValue
            self.startImageNumber = startImageNumber_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'numberOfPasses':
            numberOfPasses_ = ''
            for text__content_ in child_.childNodes:
                numberOfPasses_ += text__content_.nodeValue
            self.numberOfPasses = numberOfPasses_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'exposureTime':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.exposureTime = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'imageDirectory':
            imageDirectory_ = ''
            for text__content_ in child_.childNodes:
                imageDirectory_ += text__content_.nodeValue
            self.imageDirectory = imageDirectory_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'imagePrefix':
            imagePrefix_ = ''
            for text__content_ in child_.childNodes:
                imagePrefix_ += text__content_.nodeValue
            self.imagePrefix = imagePrefix_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'imageSuffix':
            imageSuffix_ = ''
            for text__content_ in child_.childNodes:
                imageSuffix_ += text__content_.nodeValue
            self.imageSuffix = imageSuffix_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'fileTemplate':
            fileTemplate_ = ''
            for text__content_ in child_.childNodes:
                fileTemplate_ += text__content_.nodeValue
            self.fileTemplate = fileTemplate_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'wavelength':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.wavelength = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'resolution':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.resolution = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'detectorDistance':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.detectorDistance = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'xBeam':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.xBeam = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'yBeam':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.yBeam = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'comments':
            comments_ = ''
            for text__content_ in child_.childNodes:
                comments_ += text__content_.nodeValue
            self.comments = comments_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'printableForReport':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', 'True', '1'):
                    ival_ = True
                elif sval_ in ('false', 'False', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.printableForReport = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'crystalClass':
            crystalClass_ = ''
            for text__content_ in child_.childNodes:
                crystalClass_ += text__content_.nodeValue
            self.crystalClass = crystalClass_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'beamSizeVertical':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.beamSizeVertical = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'beamSizeHorizontal':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.beamSizeHorizontal = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'transmission':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.transmission = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'synchrotronMode':
            synchrotronMode_ = ''
            for text__content_ in child_.childNodes:
                synchrotronMode_ += text__content_.nodeValue
            self.synchrotronMode = synchrotronMode_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'xtalSnapshotFullPath1':
            xtalSnapshotFullPath1_ = ''
            for text__content_ in child_.childNodes:
                xtalSnapshotFullPath1_ += text__content_.nodeValue
            self.xtalSnapshotFullPath1 = xtalSnapshotFullPath1_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'xtalSnapshotFullPath2':
            xtalSnapshotFullPath2_ = ''
            for text__content_ in child_.childNodes:
                xtalSnapshotFullPath2_ += text__content_.nodeValue
            self.xtalSnapshotFullPath2 = xtalSnapshotFullPath2_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'xtalSnapshotFullPath3':
            xtalSnapshotFullPath3_ = ''
            for text__content_ in child_.childNodes:
                xtalSnapshotFullPath3_ += text__content_.nodeValue
            self.xtalSnapshotFullPath3 = xtalSnapshotFullPath3_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'xtalSnapshotFullPath4':
            xtalSnapshotFullPath4_ = ''
            for text__content_ in child_.childNodes:
                xtalSnapshotFullPath4_ += text__content_.nodeValue
            self.xtalSnapshotFullPath4 = xtalSnapshotFullPath4_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rotationAxis':
            rotationAxis_ = ''
            for text__content_ in child_.childNodes:
                rotationAxis_ += text__content_.nodeValue
            self.rotationAxis = rotationAxis_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'phiStart':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.phiStart = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'kappaStart':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.kappaStart = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'omegaStart':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.omegaStart = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'resolutionAtCorner':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.resolutionAtCorner = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'detector2Theta':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.detector2Theta = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'detectorMode':
            detectorMode_ = ''
            for text__content_ in child_.childNodes:
                detectorMode_ += text__content_.nodeValue
            self.detectorMode = detectorMode_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'undulatorGap1':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.undulatorGap1 = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'undulatorGap2':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.undulatorGap2 = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'undulatorGap3':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.undulatorGap3 = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'beamSizeAtSampleX':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.beamSizeAtSampleX = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'beamSizeAtSampleY':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.beamSizeAtSampleY = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'centeringMethod':
            centeringMethod_ = ''
            for text__content_ in child_.childNodes:
                centeringMethod_ += text__content_.nodeValue
            self.centeringMethod = centeringMethod_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'averageTemperature':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.averageTemperature = fval_
# end class DataCollection


class DatamatrixInSampleChanger(object):
    subclass = None
    def __init__(self, datamatrixInSampleChangerId='', proposalId='', beamLineName='', datamatrixCode='', locationInContainer='', containerLocationInSC='', containerDatamatrixCode='', timeStamp=''):
        self.datamatrixInSampleChangerId = datamatrixInSampleChangerId
        self.proposalId = proposalId
        self.beamLineName = beamLineName
        self.datamatrixCode = datamatrixCode
        self.locationInContainer = locationInContainer
        self.containerLocationInSC = containerLocationInSC
        self.containerDatamatrixCode = containerDatamatrixCode
        self.timeStamp = timeStamp
    def factory(*args_, **kwargs_):
        if DatamatrixInSampleChanger.subclass:
            return DatamatrixInSampleChanger.subclass(*args_, **kwargs_)
        else:
            return DatamatrixInSampleChanger(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getDatamatrixInSampleChangerId(self): return self.datamatrixInSampleChangerId
    def setDatamatrixInSampleChangerId(self, datamatrixInSampleChangerId): self.datamatrixInSampleChangerId = datamatrixInSampleChangerId
    def getProposalId(self): return self.proposalId
    def setProposalId(self, proposalId): self.proposalId = proposalId
    def getBeamLineName(self): return self.beamLineName
    def setBeamLineName(self, beamLineName): self.beamLineName = beamLineName
    def getDatamatrixCode(self): return self.datamatrixCode
    def setDatamatrixCode(self, datamatrixCode): self.datamatrixCode = datamatrixCode
    def getLocationInContainer(self): return self.locationInContainer
    def setLocationInContainer(self, locationInContainer): self.locationInContainer = locationInContainer
    def getContainerLocationInSC(self): return self.containerLocationInSC
    def setContainerLocationInSC(self, containerLocationInSC): self.containerLocationInSC = containerLocationInSC
    def getContainerDatamatrixCode(self): return self.containerDatamatrixCode
    def setContainerDatamatrixCode(self, containerDatamatrixCode): self.containerDatamatrixCode = containerDatamatrixCode
    def getTimeStamp(self): return self.timeStamp
    def setTimeStamp(self, timeStamp): self.timeStamp = timeStamp
    def export(self, outfile, level = 0, name_='DatamatrixInSampleChanger'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='DatamatrixInSampleChanger'):
        pass
    def exportChildren(self, outfile, level, name_='DatamatrixInSampleChanger'):
        showIndent(outfile, level)
        outfile.write('<datamatrixInSampleChangerId>%s</datamatrixInSampleChangerId>\n' % quote_xml(self.getDatamatrixInSampleChangerId()))
        showIndent(outfile, level)
        outfile.write('<proposalId>%s</proposalId>\n' % quote_xml(self.getProposalId()))
        showIndent(outfile, level)
        outfile.write('<beamLineName>%s</beamLineName>\n' % quote_xml(self.getBeamLineName()))
        showIndent(outfile, level)
        outfile.write('<datamatrixCode>%s</datamatrixCode>\n' % quote_xml(self.getDatamatrixCode()))
        showIndent(outfile, level)
        outfile.write('<locationInContainer>%s</locationInContainer>\n' % quote_xml(self.getLocationInContainer()))
        showIndent(outfile, level)
        outfile.write('<containerLocationInSC>%s</containerLocationInSC>\n' % quote_xml(self.getContainerLocationInSC()))
        showIndent(outfile, level)
        outfile.write('<containerDatamatrixCode>%s</containerDatamatrixCode>\n' % quote_xml(self.getContainerDatamatrixCode()))
        showIndent(outfile, level)
        outfile.write('<timeStamp>%s</timeStamp>\n' % quote_xml(self.getTimeStamp()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='DatamatrixInSampleChanger' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">DatamatrixInSampleChanger:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='DatamatrixInSampleChanger' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = DatamatrixInSampleChanger.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="DatamatrixInSampleChanger" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='DatamatrixInSampleChanger'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('datamatrixInSampleChangerId = %s,\n' % quote_python(self.getDatamatrixInSampleChangerId()))
        showIndent(outfile, level)
        outfile.write('proposalId = %s,\n' % quote_python(self.getProposalId()))
        showIndent(outfile, level)
        outfile.write('beamLineName = %s,\n' % quote_python(self.getBeamLineName()))
        showIndent(outfile, level)
        outfile.write('datamatrixCode = %s,\n' % quote_python(self.getDatamatrixCode()))
        showIndent(outfile, level)
        outfile.write('locationInContainer = %s,\n' % quote_python(self.getLocationInContainer()))
        showIndent(outfile, level)
        outfile.write('containerLocationInSC = %s,\n' % quote_python(self.getContainerLocationInSC()))
        showIndent(outfile, level)
        outfile.write('containerDatamatrixCode = %s,\n' % quote_python(self.getContainerDatamatrixCode()))
        showIndent(outfile, level)
        outfile.write('timeStamp = %s,\n' % quote_python(self.getTimeStamp()))
    def exportLiteralHtml(self, outfile, level = 0, name_='DatamatrixInSampleChanger'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('datamatrixInSampleChangerId = <a  href:"#">%s</a><br>\n' % quote_python(self.getDatamatrixInSampleChangerId()))
        showIndentHtml(outfile, level)
        outfile.write('proposalId = <a  href:"#">%s</a><br>\n' % quote_python(self.getProposalId()))
        showIndentHtml(outfile, level)
        outfile.write('beamLineName = <a  href:"#">%s</a><br>\n' % quote_python(self.getBeamLineName()))
        showIndentHtml(outfile, level)
        outfile.write('datamatrixCode = <a  href:"#">%s</a><br>\n' % quote_python(self.getDatamatrixCode()))
        showIndentHtml(outfile, level)
        outfile.write('locationInContainer = <a  href:"#">%s</a><br>\n' % quote_python(self.getLocationInContainer()))
        showIndentHtml(outfile, level)
        outfile.write('containerLocationInSC = <a  href:"#">%s</a><br>\n' % quote_python(self.getContainerLocationInSC()))
        showIndentHtml(outfile, level)
        outfile.write('containerDatamatrixCode = <a  href:"#">%s</a><br>\n' % quote_python(self.getContainerDatamatrixCode()))
        showIndentHtml(outfile, level)
        outfile.write('timeStamp = <a  href:"#">%s</a><br>\n' % quote_python(self.getTimeStamp()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'datamatrixInSampleChangerId':
            datamatrixInSampleChangerId_ = ''
            for text__content_ in child_.childNodes:
                datamatrixInSampleChangerId_ += text__content_.nodeValue
            self.datamatrixInSampleChangerId = datamatrixInSampleChangerId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'proposalId':
            proposalId_ = ''
            for text__content_ in child_.childNodes:
                proposalId_ += text__content_.nodeValue
            self.proposalId = proposalId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'beamLineName':
            beamLineName_ = ''
            for text__content_ in child_.childNodes:
                beamLineName_ += text__content_.nodeValue
            self.beamLineName = beamLineName_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'datamatrixCode':
            datamatrixCode_ = ''
            for text__content_ in child_.childNodes:
                datamatrixCode_ += text__content_.nodeValue
            self.datamatrixCode = datamatrixCode_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'locationInContainer':
            locationInContainer_ = ''
            for text__content_ in child_.childNodes:
                locationInContainer_ += text__content_.nodeValue
            self.locationInContainer = locationInContainer_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'containerLocationInSC':
            containerLocationInSC_ = ''
            for text__content_ in child_.childNodes:
                containerLocationInSC_ += text__content_.nodeValue
            self.containerLocationInSC = containerLocationInSC_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'containerDatamatrixCode':
            containerDatamatrixCode_ = ''
            for text__content_ in child_.childNodes:
                containerDatamatrixCode_ += text__content_.nodeValue
            self.containerDatamatrixCode = containerDatamatrixCode_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'timeStamp':
            timeStamp_ = ''
            for text__content_ in child_.childNodes:
                timeStamp_ += text__content_.nodeValue
            self.timeStamp = timeStamp_
# end class DatamatrixInSampleChanger


class Dewar(object):
    subclass = None
    def __init__(self, dewarId='', shippingId='', code='', comments='', storageLocation='', dewarStatus='', timeStamp=''):
        self.dewarId = dewarId
        self.shippingId = shippingId
        self.code = code
        self.comments = comments
        self.storageLocation = storageLocation
        self.dewarStatus = dewarStatus
        self.timeStamp = timeStamp
    def factory(*args_, **kwargs_):
        if Dewar.subclass:
            return Dewar.subclass(*args_, **kwargs_)
        else:
            return Dewar(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getDewarId(self): return self.dewarId
    def setDewarId(self, dewarId): self.dewarId = dewarId
    def getShippingId(self): return self.shippingId
    def setShippingId(self, shippingId): self.shippingId = shippingId
    def getCode(self): return self.code
    def setCode(self, code): self.code = code
    def getComments(self): return self.comments
    def setComments(self, comments): self.comments = comments
    def getStorageLocation(self): return self.storageLocation
    def setStorageLocation(self, storageLocation): self.storageLocation = storageLocation
    def getDewarStatus(self): return self.dewarStatus
    def setDewarStatus(self, dewarStatus): self.dewarStatus = dewarStatus
    def getTimeStamp(self): return self.timeStamp
    def setTimeStamp(self, timeStamp): self.timeStamp = timeStamp
    def export(self, outfile, level = 0, name_='Dewar'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='Dewar'):
        pass
    def exportChildren(self, outfile, level, name_='Dewar'):
        showIndent(outfile, level)
        outfile.write('<dewarId>%s</dewarId>\n' % quote_xml(self.getDewarId()))
        showIndent(outfile, level)
        outfile.write('<shippingId>%s</shippingId>\n' % quote_xml(self.getShippingId()))
        showIndent(outfile, level)
        outfile.write('<code>%s</code>\n' % quote_xml(self.getCode()))
        showIndent(outfile, level)
        outfile.write('<comments>%s</comments>\n' % quote_xml(self.getComments()))
        showIndent(outfile, level)
        outfile.write('<storageLocation>%s</storageLocation>\n' % quote_xml(self.getStorageLocation()))
        showIndent(outfile, level)
        outfile.write('<dewarStatus>%s</dewarStatus>\n' % quote_xml(self.getDewarStatus()))
        showIndent(outfile, level)
        outfile.write('<timeStamp>%s</timeStamp>\n' % quote_xml(self.getTimeStamp()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='Dewar' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">Dewar:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='Dewar' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = Dewar.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="Dewar" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='Dewar'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('dewarId = %s,\n' % quote_python(self.getDewarId()))
        showIndent(outfile, level)
        outfile.write('shippingId = %s,\n' % quote_python(self.getShippingId()))
        showIndent(outfile, level)
        outfile.write('code = %s,\n' % quote_python(self.getCode()))
        showIndent(outfile, level)
        outfile.write('comments = %s,\n' % quote_python(self.getComments()))
        showIndent(outfile, level)
        outfile.write('storageLocation = %s,\n' % quote_python(self.getStorageLocation()))
        showIndent(outfile, level)
        outfile.write('dewarStatus = %s,\n' % quote_python(self.getDewarStatus()))
        showIndent(outfile, level)
        outfile.write('timeStamp = %s,\n' % quote_python(self.getTimeStamp()))
    def exportLiteralHtml(self, outfile, level = 0, name_='Dewar'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('dewarId = <a  href:"#">%s</a><br>\n' % quote_python(self.getDewarId()))
        showIndentHtml(outfile, level)
        outfile.write('shippingId = <a  href:"#">%s</a><br>\n' % quote_python(self.getShippingId()))
        showIndentHtml(outfile, level)
        outfile.write('code = <a  href:"#">%s</a><br>\n' % quote_python(self.getCode()))
        showIndentHtml(outfile, level)
        outfile.write('comments = <a  href:"#">%s</a><br>\n' % quote_python(self.getComments()))
        showIndentHtml(outfile, level)
        outfile.write('storageLocation = <a  href:"#">%s</a><br>\n' % quote_python(self.getStorageLocation()))
        showIndentHtml(outfile, level)
        outfile.write('dewarStatus = <a  href:"#">%s</a><br>\n' % quote_python(self.getDewarStatus()))
        showIndentHtml(outfile, level)
        outfile.write('timeStamp = <a  href:"#">%s</a><br>\n' % quote_python(self.getTimeStamp()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'dewarId':
            dewarId_ = ''
            for text__content_ in child_.childNodes:
                dewarId_ += text__content_.nodeValue
            self.dewarId = dewarId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'shippingId':
            shippingId_ = ''
            for text__content_ in child_.childNodes:
                shippingId_ += text__content_.nodeValue
            self.shippingId = shippingId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'code':
            code_ = ''
            for text__content_ in child_.childNodes:
                code_ += text__content_.nodeValue
            self.code = code_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'comments':
            comments_ = ''
            for text__content_ in child_.childNodes:
                comments_ += text__content_.nodeValue
            self.comments = comments_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'storageLocation':
            storageLocation_ = ''
            for text__content_ in child_.childNodes:
                storageLocation_ += text__content_.nodeValue
            self.storageLocation = storageLocation_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'dewarStatus':
            dewarStatus_ = ''
            for text__content_ in child_.childNodes:
                dewarStatus_ += text__content_.nodeValue
            self.dewarStatus = dewarStatus_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'timeStamp':
            timeStamp_ = ''
            for text__content_ in child_.childNodes:
                timeStamp_ += text__content_.nodeValue
            self.timeStamp = timeStamp_
# end class Dewar


class DiffractionPlan(object):
    subclass = None
    def __init__(self, diffractionPlanId='', xmlDocumentId='', experimentKind='', observedResolution=0.0, minimalResolution=0.0, exposureTime=0.0, oscillationRange=0.0, maximalResolution=0.0, screeningResolution=0.0, radiationSensitivity=0.0, anomalousScatterer='', preferredBeamSizeX=0.0, preferredBeamSizeY=0.0, comments=''):
        self.diffractionPlanId = diffractionPlanId
        self.xmlDocumentId = xmlDocumentId
        self.experimentKind = experimentKind
        self.observedResolution = observedResolution
        self.minimalResolution = minimalResolution
        self.exposureTime = exposureTime
        self.oscillationRange = oscillationRange
        self.maximalResolution = maximalResolution
        self.screeningResolution = screeningResolution
        self.radiationSensitivity = radiationSensitivity
        self.anomalousScatterer = anomalousScatterer
        self.preferredBeamSizeX = preferredBeamSizeX
        self.preferredBeamSizeY = preferredBeamSizeY
        self.comments = comments
    def factory(*args_, **kwargs_):
        if DiffractionPlan.subclass:
            return DiffractionPlan.subclass(*args_, **kwargs_)
        else:
            return DiffractionPlan(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getDiffractionPlanId(self): return self.diffractionPlanId
    def setDiffractionPlanId(self, diffractionPlanId): self.diffractionPlanId = diffractionPlanId
    def getXmlDocumentId(self): return self.xmlDocumentId
    def setXmlDocumentId(self, xmlDocumentId): self.xmlDocumentId = xmlDocumentId
    def getExperimentKind(self): return self.experimentKind
    def setExperimentKind(self, experimentKind): self.experimentKind = experimentKind
    def getObservedResolution(self): return self.observedResolution
    def setObservedResolution(self, observedResolution): self.observedResolution = observedResolution
    def getMinimalResolution(self): return self.minimalResolution
    def setMinimalResolution(self, minimalResolution): self.minimalResolution = minimalResolution
    def getExposureTime(self): return self.exposureTime
    def setExposureTime(self, exposureTime): self.exposureTime = exposureTime
    def getOscillationRange(self): return self.oscillationRange
    def setOscillationRange(self, oscillationRange): self.oscillationRange = oscillationRange
    def getMaximalResolution(self): return self.maximalResolution
    def setMaximalResolution(self, maximalResolution): self.maximalResolution = maximalResolution
    def getScreeningResolution(self): return self.screeningResolution
    def setScreeningResolution(self, screeningResolution): self.screeningResolution = screeningResolution
    def getRadiationSensitivity(self): return self.radiationSensitivity
    def setRadiationSensitivity(self, radiationSensitivity): self.radiationSensitivity = radiationSensitivity
    def getAnomalousScatterer(self): return self.anomalousScatterer
    def setAnomalousScatterer(self, anomalousScatterer): self.anomalousScatterer = anomalousScatterer
    def getPreferredBeamSizeX(self): return self.preferredBeamSizeX
    def setPreferredBeamSizeX(self, preferredBeamSizeX): self.preferredBeamSizeX = preferredBeamSizeX
    def getPreferredBeamSizeY(self): return self.preferredBeamSizeY
    def setPreferredBeamSizeY(self, preferredBeamSizeY): self.preferredBeamSizeY = preferredBeamSizeY
    def getComments(self): return self.comments
    def setComments(self, comments): self.comments = comments
    def export(self, outfile, level = 0, name_='DiffractionPlan'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='DiffractionPlan'):
        pass
    def exportChildren(self, outfile, level, name_='DiffractionPlan'):
        showIndent(outfile, level)
        outfile.write('<diffractionPlanId>%s</diffractionPlanId>\n' % quote_xml(self.getDiffractionPlanId()))
        showIndent(outfile, level)
        outfile.write('<xmlDocumentId>%s</xmlDocumentId>\n' % quote_xml(self.getXmlDocumentId()))
        showIndent(outfile, level)
        outfile.write('<experimentKind>%s</experimentKind>\n' % quote_xml(self.getExperimentKind()))
        showIndent(outfile, level)
        outfile.write('<observedResolution>%e</observedResolution>\n' % self.getObservedResolution())
        showIndent(outfile, level)
        outfile.write('<minimalResolution>%e</minimalResolution>\n' % self.getMinimalResolution())
        showIndent(outfile, level)
        outfile.write('<exposureTime>%e</exposureTime>\n' % self.getExposureTime())
        showIndent(outfile, level)
        outfile.write('<oscillationRange>%e</oscillationRange>\n' % self.getOscillationRange())
        showIndent(outfile, level)
        outfile.write('<maximalResolution>%e</maximalResolution>\n' % self.getMaximalResolution())
        showIndent(outfile, level)
        outfile.write('<screeningResolution>%e</screeningResolution>\n' % self.getScreeningResolution())
        showIndent(outfile, level)
        outfile.write('<radiationSensitivity>%e</radiationSensitivity>\n' % self.getRadiationSensitivity())
        showIndent(outfile, level)
        outfile.write('<anomalousScatterer>%s</anomalousScatterer>\n' % quote_xml(self.getAnomalousScatterer()))
        showIndent(outfile, level)
        outfile.write('<preferredBeamSizeX>%e</preferredBeamSizeX>\n' % self.getPreferredBeamSizeX())
        showIndent(outfile, level)
        outfile.write('<preferredBeamSizeY>%e</preferredBeamSizeY>\n' % self.getPreferredBeamSizeY())
        showIndent(outfile, level)
        outfile.write('<comments>%s</comments>\n' % quote_xml(self.getComments()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='DiffractionPlan' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">DiffractionPlan:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='DiffractionPlan' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = DiffractionPlan.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="DiffractionPlan" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='DiffractionPlan'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('diffractionPlanId = %s,\n' % quote_python(self.getDiffractionPlanId()))
        showIndent(outfile, level)
        outfile.write('xmlDocumentId = %s,\n' % quote_python(self.getXmlDocumentId()))
        showIndent(outfile, level)
        outfile.write('experimentKind = %s,\n' % quote_python(self.getExperimentKind()))
        showIndent(outfile, level)
        outfile.write('observedResolution = %e,\n' % self.getObservedResolution())
        showIndent(outfile, level)
        outfile.write('minimalResolution = %e,\n' % self.getMinimalResolution())
        showIndent(outfile, level)
        outfile.write('exposureTime = %e,\n' % self.getExposureTime())
        showIndent(outfile, level)
        outfile.write('oscillationRange = %e,\n' % self.getOscillationRange())
        showIndent(outfile, level)
        outfile.write('maximalResolution = %e,\n' % self.getMaximalResolution())
        showIndent(outfile, level)
        outfile.write('screeningResolution = %e,\n' % self.getScreeningResolution())
        showIndent(outfile, level)
        outfile.write('radiationSensitivity = %e,\n' % self.getRadiationSensitivity())
        showIndent(outfile, level)
        outfile.write('anomalousScatterer = %s,\n' % quote_python(self.getAnomalousScatterer()))
        showIndent(outfile, level)
        outfile.write('preferredBeamSizeX = %e,\n' % self.getPreferredBeamSizeX())
        showIndent(outfile, level)
        outfile.write('preferredBeamSizeY = %e,\n' % self.getPreferredBeamSizeY())
        showIndent(outfile, level)
        outfile.write('comments = %s,\n' % quote_python(self.getComments()))
    def exportLiteralHtml(self, outfile, level = 0, name_='DiffractionPlan'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('diffractionPlanId = <a  href:"#">%s</a><br>\n' % quote_python(self.getDiffractionPlanId()))
        showIndentHtml(outfile, level)
        outfile.write('xmlDocumentId = <a  href:"#">%s</a><br>\n' % quote_python(self.getXmlDocumentId()))
        showIndentHtml(outfile, level)
        outfile.write('experimentKind = <a  href:"#">%s</a><br>\n' % quote_python(self.getExperimentKind()))
        showIndentHtml(outfile, level)
        outfile.write('observedResolution = <a  href:"#">%e</a><br>\n' % self.getObservedResolution())
        showIndentHtml(outfile, level)
        outfile.write('minimalResolution = <a  href:"#">%e</a><br>\n' % self.getMinimalResolution())
        showIndentHtml(outfile, level)
        outfile.write('exposureTime = <a  href:"#">%e</a><br>\n' % self.getExposureTime())
        showIndentHtml(outfile, level)
        outfile.write('oscillationRange = <a  href:"#">%e</a><br>\n' % self.getOscillationRange())
        showIndentHtml(outfile, level)
        outfile.write('maximalResolution = <a  href:"#">%e</a><br>\n' % self.getMaximalResolution())
        showIndentHtml(outfile, level)
        outfile.write('screeningResolution = <a  href:"#">%e</a><br>\n' % self.getScreeningResolution())
        showIndentHtml(outfile, level)
        outfile.write('radiationSensitivity = <a  href:"#">%e</a><br>\n' % self.getRadiationSensitivity())
        showIndentHtml(outfile, level)
        outfile.write('anomalousScatterer = <a  href:"#">%s</a><br>\n' % quote_python(self.getAnomalousScatterer()))
        showIndentHtml(outfile, level)
        outfile.write('preferredBeamSizeX = <a  href:"#">%e</a><br>\n' % self.getPreferredBeamSizeX())
        showIndentHtml(outfile, level)
        outfile.write('preferredBeamSizeY = <a  href:"#">%e</a><br>\n' % self.getPreferredBeamSizeY())
        showIndentHtml(outfile, level)
        outfile.write('comments = <a  href:"#">%s</a><br>\n' % quote_python(self.getComments()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'diffractionPlanId':
            diffractionPlanId_ = ''
            for text__content_ in child_.childNodes:
                diffractionPlanId_ += text__content_.nodeValue
            self.diffractionPlanId = diffractionPlanId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'xmlDocumentId':
            xmlDocumentId_ = ''
            for text__content_ in child_.childNodes:
                xmlDocumentId_ += text__content_.nodeValue
            self.xmlDocumentId = xmlDocumentId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'experimentKind':
            experimentKind_ = ''
            for text__content_ in child_.childNodes:
                experimentKind_ += text__content_.nodeValue
            self.experimentKind = experimentKind_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'observedResolution':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.observedResolution = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'minimalResolution':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.minimalResolution = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'exposureTime':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.exposureTime = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'oscillationRange':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.oscillationRange = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'maximalResolution':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.maximalResolution = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningResolution':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.screeningResolution = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'radiationSensitivity':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.radiationSensitivity = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'anomalousScatterer':
            anomalousScatterer_ = ''
            for text__content_ in child_.childNodes:
                anomalousScatterer_ += text__content_.nodeValue
            self.anomalousScatterer = anomalousScatterer_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'preferredBeamSizeX':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.preferredBeamSizeX = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'preferredBeamSizeY':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.preferredBeamSizeY = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'comments':
            comments_ = ''
            for text__content_ in child_.childNodes:
                comments_ += text__content_.nodeValue
            self.comments = comments_
# end class DiffractionPlan


class EnergyScan(object):
    subclass = None
    def __init__(self, energyScanId='', sessionId='', fluorescenceDetector='', jpegScanFileFullPath='', jpegChoochFileFullPath='', element='', startEnergy=0.0, endEnergy=0.0, transmissionFactor=0.0, exposureTime=0.0, synchrotronCurrent=0.0, temperature=0.0, peakEnergy=0.0, peakFPrime=0.0, peakFDoublePrime=0.0, inflectionEnergy=0.0, inflectionFPrime=0.0, inflectionFDoublePrime=0.0, xrayDose=0.0, startTime='', endTime='', edgeEnergy=''):
        self.energyScanId = energyScanId
        self.sessionId = sessionId
        self.fluorescenceDetector = fluorescenceDetector
        self.jpegScanFileFullPath = jpegScanFileFullPath
        self.jpegChoochFileFullPath = jpegChoochFileFullPath
        self.element = element
        self.startEnergy = startEnergy
        self.endEnergy = endEnergy
        self.transmissionFactor = transmissionFactor
        self.exposureTime = exposureTime
        self.synchrotronCurrent = synchrotronCurrent
        self.temperature = temperature
        self.peakEnergy = peakEnergy
        self.peakFPrime = peakFPrime
        self.peakFDoublePrime = peakFDoublePrime
        self.inflectionEnergy = inflectionEnergy
        self.inflectionFPrime = inflectionFPrime
        self.inflectionFDoublePrime = inflectionFDoublePrime
        self.xrayDose = xrayDose
        self.startTime = startTime
        self.endTime = endTime
        self.edgeEnergy = edgeEnergy
    def factory(*args_, **kwargs_):
        if EnergyScan.subclass:
            return EnergyScan.subclass(*args_, **kwargs_)
        else:
            return EnergyScan(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getEnergyScanId(self): return self.energyScanId
    def setEnergyScanId(self, energyScanId): self.energyScanId = energyScanId
    def getSessionId(self): return self.sessionId
    def setSessionId(self, sessionId): self.sessionId = sessionId
    def getFluorescenceDetector(self): return self.fluorescenceDetector
    def setFluorescenceDetector(self, fluorescenceDetector): self.fluorescenceDetector = fluorescenceDetector
    def getJpegScanFileFullPath(self): return self.jpegScanFileFullPath
    def setJpegScanFileFullPath(self, jpegScanFileFullPath): self.jpegScanFileFullPath = jpegScanFileFullPath
    def getJpegChoochFileFullPath(self): return self.jpegChoochFileFullPath
    def setJpegChoochFileFullPath(self, jpegChoochFileFullPath): self.jpegChoochFileFullPath = jpegChoochFileFullPath
    def getElement(self): return self.element
    def setElement(self, element): self.element = element
    def getStartEnergy(self): return self.startEnergy
    def setStartEnergy(self, startEnergy): self.startEnergy = startEnergy
    def getEndEnergy(self): return self.endEnergy
    def setEndEnergy(self, endEnergy): self.endEnergy = endEnergy
    def getTransmissionFactor(self): return self.transmissionFactor
    def setTransmissionFactor(self, transmissionFactor): self.transmissionFactor = transmissionFactor
    def getExposureTime(self): return self.exposureTime
    def setExposureTime(self, exposureTime): self.exposureTime = exposureTime
    def getSynchrotronCurrent(self): return self.synchrotronCurrent
    def setSynchrotronCurrent(self, synchrotronCurrent): self.synchrotronCurrent = synchrotronCurrent
    def getTemperature(self): return self.temperature
    def setTemperature(self, temperature): self.temperature = temperature
    def getPeakEnergy(self): return self.peakEnergy
    def setPeakEnergy(self, peakEnergy): self.peakEnergy = peakEnergy
    def getPeakFPrime(self): return self.peakFPrime
    def setPeakFPrime(self, peakFPrime): self.peakFPrime = peakFPrime
    def getPeakFDoublePrime(self): return self.peakFDoublePrime
    def setPeakFDoublePrime(self, peakFDoublePrime): self.peakFDoublePrime = peakFDoublePrime
    def getInflectionEnergy(self): return self.inflectionEnergy
    def setInflectionEnergy(self, inflectionEnergy): self.inflectionEnergy = inflectionEnergy
    def getInflectionFPrime(self): return self.inflectionFPrime
    def setInflectionFPrime(self, inflectionFPrime): self.inflectionFPrime = inflectionFPrime
    def getInflectionFDoublePrime(self): return self.inflectionFDoublePrime
    def setInflectionFDoublePrime(self, inflectionFDoublePrime): self.inflectionFDoublePrime = inflectionFDoublePrime
    def getXrayDose(self): return self.xrayDose
    def setXrayDose(self, xrayDose): self.xrayDose = xrayDose
    def getStartTime(self): return self.startTime
    def setStartTime(self, startTime): self.startTime = startTime
    def getEndTime(self): return self.endTime
    def setEndTime(self, endTime): self.endTime = endTime
    def getEdgeEnergy(self): return self.edgeEnergy
    def setEdgeEnergy(self, edgeEnergy): self.edgeEnergy = edgeEnergy
    def export(self, outfile, level = 0, name_='EnergyScan'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='EnergyScan'):
        pass
    def exportChildren(self, outfile, level, name_='EnergyScan'):
        showIndent(outfile, level)
        outfile.write('<energyScanId>%s</energyScanId>\n' % quote_xml(self.getEnergyScanId()))
        showIndent(outfile, level)
        outfile.write('<sessionId>%s</sessionId>\n' % quote_xml(self.getSessionId()))
        showIndent(outfile, level)
        outfile.write('<fluorescenceDetector>%s</fluorescenceDetector>\n' % quote_xml(self.getFluorescenceDetector()))
        showIndent(outfile, level)
        outfile.write('<jpegScanFileFullPath>%s</jpegScanFileFullPath>\n' % quote_xml(self.getJpegScanFileFullPath()))
        showIndent(outfile, level)
        outfile.write('<jpegChoochFileFullPath>%s</jpegChoochFileFullPath>\n' % quote_xml(self.getJpegChoochFileFullPath()))
        showIndent(outfile, level)
        outfile.write('<element>%s</element>\n' % quote_xml(self.getElement()))
        showIndent(outfile, level)
        outfile.write('<startEnergy>%e</startEnergy>\n' % self.getStartEnergy())
        showIndent(outfile, level)
        outfile.write('<endEnergy>%e</endEnergy>\n' % self.getEndEnergy())
        showIndent(outfile, level)
        outfile.write('<transmissionFactor>%e</transmissionFactor>\n' % self.getTransmissionFactor())
        showIndent(outfile, level)
        outfile.write('<exposureTime>%e</exposureTime>\n' % self.getExposureTime())
        showIndent(outfile, level)
        outfile.write('<synchrotronCurrent>%e</synchrotronCurrent>\n' % self.getSynchrotronCurrent())
        showIndent(outfile, level)
        outfile.write('<temperature>%e</temperature>\n' % self.getTemperature())
        showIndent(outfile, level)
        outfile.write('<peakEnergy>%e</peakEnergy>\n' % self.getPeakEnergy())
        showIndent(outfile, level)
        outfile.write('<peakFPrime>%e</peakFPrime>\n' % self.getPeakFPrime())
        showIndent(outfile, level)
        outfile.write('<peakFDoublePrime>%e</peakFDoublePrime>\n' % self.getPeakFDoublePrime())
        showIndent(outfile, level)
        outfile.write('<inflectionEnergy>%e</inflectionEnergy>\n' % self.getInflectionEnergy())
        showIndent(outfile, level)
        outfile.write('<inflectionFPrime>%e</inflectionFPrime>\n' % self.getInflectionFPrime())
        showIndent(outfile, level)
        outfile.write('<inflectionFDoublePrime>%e</inflectionFDoublePrime>\n' % self.getInflectionFDoublePrime())
        showIndent(outfile, level)
        outfile.write('<xrayDose>%e</xrayDose>\n' % self.getXrayDose())
        showIndent(outfile, level)
        outfile.write('<startTime>%s</startTime>\n' % quote_xml(self.getStartTime()))
        showIndent(outfile, level)
        outfile.write('<endTime>%s</endTime>\n' % quote_xml(self.getEndTime()))
        showIndent(outfile, level)
        outfile.write('<edgeEnergy>%s</edgeEnergy>\n' % quote_xml(self.getEdgeEnergy()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='EnergyScan' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">EnergyScan:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='EnergyScan' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = EnergyScan.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="EnergyScan" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='EnergyScan'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('energyScanId = %s,\n' % quote_python(self.getEnergyScanId()))
        showIndent(outfile, level)
        outfile.write('sessionId = %s,\n' % quote_python(self.getSessionId()))
        showIndent(outfile, level)
        outfile.write('fluorescenceDetector = %s,\n' % quote_python(self.getFluorescenceDetector()))
        showIndent(outfile, level)
        outfile.write('jpegScanFileFullPath = %s,\n' % quote_python(self.getJpegScanFileFullPath()))
        showIndent(outfile, level)
        outfile.write('jpegChoochFileFullPath = %s,\n' % quote_python(self.getJpegChoochFileFullPath()))
        showIndent(outfile, level)
        outfile.write('element = %s,\n' % quote_python(self.getElement()))
        showIndent(outfile, level)
        outfile.write('startEnergy = %e,\n' % self.getStartEnergy())
        showIndent(outfile, level)
        outfile.write('endEnergy = %e,\n' % self.getEndEnergy())
        showIndent(outfile, level)
        outfile.write('transmissionFactor = %e,\n' % self.getTransmissionFactor())
        showIndent(outfile, level)
        outfile.write('exposureTime = %e,\n' % self.getExposureTime())
        showIndent(outfile, level)
        outfile.write('synchrotronCurrent = %e,\n' % self.getSynchrotronCurrent())
        showIndent(outfile, level)
        outfile.write('temperature = %e,\n' % self.getTemperature())
        showIndent(outfile, level)
        outfile.write('peakEnergy = %e,\n' % self.getPeakEnergy())
        showIndent(outfile, level)
        outfile.write('peakFPrime = %e,\n' % self.getPeakFPrime())
        showIndent(outfile, level)
        outfile.write('peakFDoublePrime = %e,\n' % self.getPeakFDoublePrime())
        showIndent(outfile, level)
        outfile.write('inflectionEnergy = %e,\n' % self.getInflectionEnergy())
        showIndent(outfile, level)
        outfile.write('inflectionFPrime = %e,\n' % self.getInflectionFPrime())
        showIndent(outfile, level)
        outfile.write('inflectionFDoublePrime = %e,\n' % self.getInflectionFDoublePrime())
        showIndent(outfile, level)
        outfile.write('xrayDose = %e,\n' % self.getXrayDose())
        showIndent(outfile, level)
        outfile.write('startTime = %s,\n' % quote_python(self.getStartTime()))
        showIndent(outfile, level)
        outfile.write('endTime = %s,\n' % quote_python(self.getEndTime()))
        showIndent(outfile, level)
        outfile.write('edgeEnergy = %s,\n' % quote_python(self.getEdgeEnergy()))
    def exportLiteralHtml(self, outfile, level = 0, name_='EnergyScan'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('energyScanId = <a  href:"#">%s</a><br>\n' % quote_python(self.getEnergyScanId()))
        showIndentHtml(outfile, level)
        outfile.write('sessionId = <a  href:"#">%s</a><br>\n' % quote_python(self.getSessionId()))
        showIndentHtml(outfile, level)
        outfile.write('fluorescenceDetector = <a  href:"#">%s</a><br>\n' % quote_python(self.getFluorescenceDetector()))
        showIndentHtml(outfile, level)
        outfile.write('jpegScanFileFullPath = <a  href:"#">%s</a><br>\n' % quote_python(self.getJpegScanFileFullPath()))
        showIndentHtml(outfile, level)
        outfile.write('jpegChoochFileFullPath = <a  href:"#">%s</a><br>\n' % quote_python(self.getJpegChoochFileFullPath()))
        showIndentHtml(outfile, level)
        outfile.write('element = <a  href:"#">%s</a><br>\n' % quote_python(self.getElement()))
        showIndentHtml(outfile, level)
        outfile.write('startEnergy = <a  href:"#">%e</a><br>\n' % self.getStartEnergy())
        showIndentHtml(outfile, level)
        outfile.write('endEnergy = <a  href:"#">%e</a><br>\n' % self.getEndEnergy())
        showIndentHtml(outfile, level)
        outfile.write('transmissionFactor = <a  href:"#">%e</a><br>\n' % self.getTransmissionFactor())
        showIndentHtml(outfile, level)
        outfile.write('exposureTime = <a  href:"#">%e</a><br>\n' % self.getExposureTime())
        showIndentHtml(outfile, level)
        outfile.write('synchrotronCurrent = <a  href:"#">%e</a><br>\n' % self.getSynchrotronCurrent())
        showIndentHtml(outfile, level)
        outfile.write('temperature = <a  href:"#">%e</a><br>\n' % self.getTemperature())
        showIndentHtml(outfile, level)
        outfile.write('peakEnergy = <a  href:"#">%e</a><br>\n' % self.getPeakEnergy())
        showIndentHtml(outfile, level)
        outfile.write('peakFPrime = <a  href:"#">%e</a><br>\n' % self.getPeakFPrime())
        showIndentHtml(outfile, level)
        outfile.write('peakFDoublePrime = <a  href:"#">%e</a><br>\n' % self.getPeakFDoublePrime())
        showIndentHtml(outfile, level)
        outfile.write('inflectionEnergy = <a  href:"#">%e</a><br>\n' % self.getInflectionEnergy())
        showIndentHtml(outfile, level)
        outfile.write('inflectionFPrime = <a  href:"#">%e</a><br>\n' % self.getInflectionFPrime())
        showIndentHtml(outfile, level)
        outfile.write('inflectionFDoublePrime = <a  href:"#">%e</a><br>\n' % self.getInflectionFDoublePrime())
        showIndentHtml(outfile, level)
        outfile.write('xrayDose = <a  href:"#">%e</a><br>\n' % self.getXrayDose())
        showIndentHtml(outfile, level)
        outfile.write('startTime = <a  href:"#">%s</a><br>\n' % quote_python(self.getStartTime()))
        showIndentHtml(outfile, level)
        outfile.write('endTime = <a  href:"#">%s</a><br>\n' % quote_python(self.getEndTime()))
        showIndentHtml(outfile, level)
        outfile.write('edgeEnergy = <a  href:"#">%s</a><br>\n' % quote_python(self.getEdgeEnergy()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'energyScanId':
            energyScanId_ = ''
            for text__content_ in child_.childNodes:
                energyScanId_ += text__content_.nodeValue
            self.energyScanId = energyScanId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sessionId':
            sessionId_ = ''
            for text__content_ in child_.childNodes:
                sessionId_ += text__content_.nodeValue
            self.sessionId = sessionId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'fluorescenceDetector':
            fluorescenceDetector_ = ''
            for text__content_ in child_.childNodes:
                fluorescenceDetector_ += text__content_.nodeValue
            self.fluorescenceDetector = fluorescenceDetector_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'jpegScanFileFullPath':
            jpegScanFileFullPath_ = ''
            for text__content_ in child_.childNodes:
                jpegScanFileFullPath_ += text__content_.nodeValue
            self.jpegScanFileFullPath = jpegScanFileFullPath_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'jpegChoochFileFullPath':
            jpegChoochFileFullPath_ = ''
            for text__content_ in child_.childNodes:
                jpegChoochFileFullPath_ += text__content_.nodeValue
            self.jpegChoochFileFullPath = jpegChoochFileFullPath_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'element':
            element_ = ''
            for text__content_ in child_.childNodes:
                element_ += text__content_.nodeValue
            self.element = element_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'startEnergy':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.startEnergy = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'endEnergy':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.endEnergy = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'transmissionFactor':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.transmissionFactor = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'exposureTime':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.exposureTime = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'synchrotronCurrent':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.synchrotronCurrent = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'temperature':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.temperature = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'peakEnergy':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.peakEnergy = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'peakFPrime':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.peakFPrime = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'peakFDoublePrime':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.peakFDoublePrime = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'inflectionEnergy':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.inflectionEnergy = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'inflectionFPrime':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.inflectionFPrime = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'inflectionFDoublePrime':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.inflectionFDoublePrime = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'xrayDose':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.xrayDose = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'startTime':
            startTime_ = ''
            for text__content_ in child_.childNodes:
                startTime_ += text__content_.nodeValue
            self.startTime = startTime_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'endTime':
            endTime_ = ''
            for text__content_ in child_.childNodes:
                endTime_ += text__content_.nodeValue
            self.endTime = endTime_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'edgeEnergy':
            edgeEnergy_ = ''
            for text__content_ in child_.childNodes:
                edgeEnergy_ += text__content_.nodeValue
            self.edgeEnergy = edgeEnergy_
# end class EnergyScan


class ExperimentKindDetails(object):
    subclass = None
    def __init__(self, experimentKindId='', diffractionPlanId='', exposureIndex='', dataCollectionType='', dataCollectionKind='', wedgeValue=0.0):
        self.experimentKindId = experimentKindId
        self.diffractionPlanId = diffractionPlanId
        self.exposureIndex = exposureIndex
        self.dataCollectionType = dataCollectionType
        self.dataCollectionKind = dataCollectionKind
        self.wedgeValue = wedgeValue
    def factory(*args_, **kwargs_):
        if ExperimentKindDetails.subclass:
            return ExperimentKindDetails.subclass(*args_, **kwargs_)
        else:
            return ExperimentKindDetails(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getExperimentKindId(self): return self.experimentKindId
    def setExperimentKindId(self, experimentKindId): self.experimentKindId = experimentKindId
    def getDiffractionPlanId(self): return self.diffractionPlanId
    def setDiffractionPlanId(self, diffractionPlanId): self.diffractionPlanId = diffractionPlanId
    def getExposureIndex(self): return self.exposureIndex
    def setExposureIndex(self, exposureIndex): self.exposureIndex = exposureIndex
    def getDataCollectionType(self): return self.dataCollectionType
    def setDataCollectionType(self, dataCollectionType): self.dataCollectionType = dataCollectionType
    def getDataCollectionKind(self): return self.dataCollectionKind
    def setDataCollectionKind(self, dataCollectionKind): self.dataCollectionKind = dataCollectionKind
    def getWedgeValue(self): return self.wedgeValue
    def setWedgeValue(self, wedgeValue): self.wedgeValue = wedgeValue
    def export(self, outfile, level = 0, name_='ExperimentKindDetails'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='ExperimentKindDetails'):
        pass
    def exportChildren(self, outfile, level, name_='ExperimentKindDetails'):
        showIndent(outfile, level)
        outfile.write('<experimentKindId>%s</experimentKindId>\n' % quote_xml(self.getExperimentKindId()))
        showIndent(outfile, level)
        outfile.write('<diffractionPlanId>%s</diffractionPlanId>\n' % quote_xml(self.getDiffractionPlanId()))
        showIndent(outfile, level)
        outfile.write('<exposureIndex>%s</exposureIndex>\n' % quote_xml(self.getExposureIndex()))
        showIndent(outfile, level)
        outfile.write('<dataCollectionType>%s</dataCollectionType>\n' % quote_xml(self.getDataCollectionType()))
        showIndent(outfile, level)
        outfile.write('<dataCollectionKind>%s</dataCollectionKind>\n' % quote_xml(self.getDataCollectionKind()))
        showIndent(outfile, level)
        outfile.write('<wedgeValue>%e</wedgeValue>\n' % self.getWedgeValue())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='ExperimentKindDetails' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">ExperimentKindDetails:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='ExperimentKindDetails' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = ExperimentKindDetails.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="ExperimentKindDetails" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='ExperimentKindDetails'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('experimentKindId = %s,\n' % quote_python(self.getExperimentKindId()))
        showIndent(outfile, level)
        outfile.write('diffractionPlanId = %s,\n' % quote_python(self.getDiffractionPlanId()))
        showIndent(outfile, level)
        outfile.write('exposureIndex = %s,\n' % quote_python(self.getExposureIndex()))
        showIndent(outfile, level)
        outfile.write('dataCollectionType = %s,\n' % quote_python(self.getDataCollectionType()))
        showIndent(outfile, level)
        outfile.write('dataCollectionKind = %s,\n' % quote_python(self.getDataCollectionKind()))
        showIndent(outfile, level)
        outfile.write('wedgeValue = %e,\n' % self.getWedgeValue())
    def exportLiteralHtml(self, outfile, level = 0, name_='ExperimentKindDetails'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('experimentKindId = <a  href:"#">%s</a><br>\n' % quote_python(self.getExperimentKindId()))
        showIndentHtml(outfile, level)
        outfile.write('diffractionPlanId = <a  href:"#">%s</a><br>\n' % quote_python(self.getDiffractionPlanId()))
        showIndentHtml(outfile, level)
        outfile.write('exposureIndex = <a  href:"#">%s</a><br>\n' % quote_python(self.getExposureIndex()))
        showIndentHtml(outfile, level)
        outfile.write('dataCollectionType = <a  href:"#">%s</a><br>\n' % quote_python(self.getDataCollectionType()))
        showIndentHtml(outfile, level)
        outfile.write('dataCollectionKind = <a  href:"#">%s</a><br>\n' % quote_python(self.getDataCollectionKind()))
        showIndentHtml(outfile, level)
        outfile.write('wedgeValue = <a  href:"#">%e</a><br>\n' % self.getWedgeValue())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'experimentKindId':
            experimentKindId_ = ''
            for text__content_ in child_.childNodes:
                experimentKindId_ += text__content_.nodeValue
            self.experimentKindId = experimentKindId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'diffractionPlanId':
            diffractionPlanId_ = ''
            for text__content_ in child_.childNodes:
                diffractionPlanId_ += text__content_.nodeValue
            self.diffractionPlanId = diffractionPlanId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'exposureIndex':
            exposureIndex_ = ''
            for text__content_ in child_.childNodes:
                exposureIndex_ += text__content_.nodeValue
            self.exposureIndex = exposureIndex_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'dataCollectionType':
            dataCollectionType_ = ''
            for text__content_ in child_.childNodes:
                dataCollectionType_ += text__content_.nodeValue
            self.dataCollectionType = dataCollectionType_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'dataCollectionKind':
            dataCollectionKind_ = ''
            for text__content_ in child_.childNodes:
                dataCollectionKind_ += text__content_.nodeValue
            self.dataCollectionKind = dataCollectionKind_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'wedgeValue':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.wedgeValue = fval_
# end class ExperimentKindDetails


class Image(object):
    subclass = None
    def __init__(self, imageId='', dataCollectionId='', imageNumber='', fileName='', fileLocation='', measuredIntensity=0.0, jpegFileFullPath='', jpegThumbnailFileFullPath='', temperature=0.0, cumulativeIntensity=0.0, synchrotronCurrent=0.0, comments='', machineMessage=''):
        self.imageId = imageId
        self.dataCollectionId = dataCollectionId
        self.imageNumber = imageNumber
        self.fileName = fileName
        self.fileLocation = fileLocation
        self.measuredIntensity = measuredIntensity
        self.jpegFileFullPath = jpegFileFullPath
        self.jpegThumbnailFileFullPath = jpegThumbnailFileFullPath
        self.temperature = temperature
        self.cumulativeIntensity = cumulativeIntensity
        self.synchrotronCurrent = synchrotronCurrent
        self.comments = comments
        self.machineMessage = machineMessage
    def factory(*args_, **kwargs_):
        if Image.subclass:
            return Image.subclass(*args_, **kwargs_)
        else:
            return Image(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getImageId(self): return self.imageId
    def setImageId(self, imageId): self.imageId = imageId
    def getDataCollectionId(self): return self.dataCollectionId
    def setDataCollectionId(self, dataCollectionId): self.dataCollectionId = dataCollectionId
    def getImageNumber(self): return self.imageNumber
    def setImageNumber(self, imageNumber): self.imageNumber = imageNumber
    def getFileName(self): return self.fileName
    def setFileName(self, fileName): self.fileName = fileName
    def getFileLocation(self): return self.fileLocation
    def setFileLocation(self, fileLocation): self.fileLocation = fileLocation
    def getMeasuredIntensity(self): return self.measuredIntensity
    def setMeasuredIntensity(self, measuredIntensity): self.measuredIntensity = measuredIntensity
    def getJpegFileFullPath(self): return self.jpegFileFullPath
    def setJpegFileFullPath(self, jpegFileFullPath): self.jpegFileFullPath = jpegFileFullPath
    def getJpegThumbnailFileFullPath(self): return self.jpegThumbnailFileFullPath
    def setJpegThumbnailFileFullPath(self, jpegThumbnailFileFullPath): self.jpegThumbnailFileFullPath = jpegThumbnailFileFullPath
    def getTemperature(self): return self.temperature
    def setTemperature(self, temperature): self.temperature = temperature
    def getCumulativeIntensity(self): return self.cumulativeIntensity
    def setCumulativeIntensity(self, cumulativeIntensity): self.cumulativeIntensity = cumulativeIntensity
    def getSynchrotronCurrent(self): return self.synchrotronCurrent
    def setSynchrotronCurrent(self, synchrotronCurrent): self.synchrotronCurrent = synchrotronCurrent
    def getComments(self): return self.comments
    def setComments(self, comments): self.comments = comments
    def getMachineMessage(self): return self.machineMessage
    def setMachineMessage(self, machineMessage): self.machineMessage = machineMessage
    def export(self, outfile, level = 0, name_='Image'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='Image'):
        pass
    def exportChildren(self, outfile, level, name_='Image'):
        showIndent(outfile, level)
        outfile.write('<imageId>%s</imageId>\n' % quote_xml(self.getImageId()))
        showIndent(outfile, level)
        outfile.write('<dataCollectionId>%s</dataCollectionId>\n' % quote_xml(self.getDataCollectionId()))
        showIndent(outfile, level)
        outfile.write('<imageNumber>%s</imageNumber>\n' % quote_xml(self.getImageNumber()))
        showIndent(outfile, level)
        outfile.write('<fileName>%s</fileName>\n' % quote_xml(self.getFileName()))
        showIndent(outfile, level)
        outfile.write('<fileLocation>%s</fileLocation>\n' % quote_xml(self.getFileLocation()))
        showIndent(outfile, level)
        outfile.write('<measuredIntensity>%e</measuredIntensity>\n' % self.getMeasuredIntensity())
        showIndent(outfile, level)
        outfile.write('<jpegFileFullPath>%s</jpegFileFullPath>\n' % quote_xml(self.getJpegFileFullPath()))
        showIndent(outfile, level)
        outfile.write('<jpegThumbnailFileFullPath>%s</jpegThumbnailFileFullPath>\n' % quote_xml(self.getJpegThumbnailFileFullPath()))
        showIndent(outfile, level)
        outfile.write('<temperature>%e</temperature>\n' % self.getTemperature())
        showIndent(outfile, level)
        outfile.write('<cumulativeIntensity>%e</cumulativeIntensity>\n' % self.getCumulativeIntensity())
        showIndent(outfile, level)
        outfile.write('<synchrotronCurrent>%e</synchrotronCurrent>\n' % self.getSynchrotronCurrent())
        showIndent(outfile, level)
        outfile.write('<comments>%s</comments>\n' % quote_xml(self.getComments()))
        showIndent(outfile, level)
        outfile.write('<machineMessage>%s</machineMessage>\n' % quote_xml(self.getMachineMessage()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='Image' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">Image:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='Image' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = Image.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="Image" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='Image'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('imageId = %s,\n' % quote_python(self.getImageId()))
        showIndent(outfile, level)
        outfile.write('dataCollectionId = %s,\n' % quote_python(self.getDataCollectionId()))
        showIndent(outfile, level)
        outfile.write('imageNumber = %s,\n' % quote_python(self.getImageNumber()))
        showIndent(outfile, level)
        outfile.write('fileName = %s,\n' % quote_python(self.getFileName()))
        showIndent(outfile, level)
        outfile.write('fileLocation = %s,\n' % quote_python(self.getFileLocation()))
        showIndent(outfile, level)
        outfile.write('measuredIntensity = %e,\n' % self.getMeasuredIntensity())
        showIndent(outfile, level)
        outfile.write('jpegFileFullPath = %s,\n' % quote_python(self.getJpegFileFullPath()))
        showIndent(outfile, level)
        outfile.write('jpegThumbnailFileFullPath = %s,\n' % quote_python(self.getJpegThumbnailFileFullPath()))
        showIndent(outfile, level)
        outfile.write('temperature = %e,\n' % self.getTemperature())
        showIndent(outfile, level)
        outfile.write('cumulativeIntensity = %e,\n' % self.getCumulativeIntensity())
        showIndent(outfile, level)
        outfile.write('synchrotronCurrent = %e,\n' % self.getSynchrotronCurrent())
        showIndent(outfile, level)
        outfile.write('comments = %s,\n' % quote_python(self.getComments()))
        showIndent(outfile, level)
        outfile.write('machineMessage = %s,\n' % quote_python(self.getMachineMessage()))
    def exportLiteralHtml(self, outfile, level = 0, name_='Image'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('imageId = <a  href:"#">%s</a><br>\n' % quote_python(self.getImageId()))
        showIndentHtml(outfile, level)
        outfile.write('dataCollectionId = <a  href:"#">%s</a><br>\n' % quote_python(self.getDataCollectionId()))
        showIndentHtml(outfile, level)
        outfile.write('imageNumber = <a  href:"#">%s</a><br>\n' % quote_python(self.getImageNumber()))
        showIndentHtml(outfile, level)
        outfile.write('fileName = <a  href:"#">%s</a><br>\n' % quote_python(self.getFileName()))
        showIndentHtml(outfile, level)
        outfile.write('fileLocation = <a  href:"#">%s</a><br>\n' % quote_python(self.getFileLocation()))
        showIndentHtml(outfile, level)
        outfile.write('measuredIntensity = <a  href:"#">%e</a><br>\n' % self.getMeasuredIntensity())
        showIndentHtml(outfile, level)
        outfile.write('jpegFileFullPath = <a  href:"#">%s</a><br>\n' % quote_python(self.getJpegFileFullPath()))
        showIndentHtml(outfile, level)
        outfile.write('jpegThumbnailFileFullPath = <a  href:"#">%s</a><br>\n' % quote_python(self.getJpegThumbnailFileFullPath()))
        showIndentHtml(outfile, level)
        outfile.write('temperature = <a  href:"#">%e</a><br>\n' % self.getTemperature())
        showIndentHtml(outfile, level)
        outfile.write('cumulativeIntensity = <a  href:"#">%e</a><br>\n' % self.getCumulativeIntensity())
        showIndentHtml(outfile, level)
        outfile.write('synchrotronCurrent = <a  href:"#">%e</a><br>\n' % self.getSynchrotronCurrent())
        showIndentHtml(outfile, level)
        outfile.write('comments = <a  href:"#">%s</a><br>\n' % quote_python(self.getComments()))
        showIndentHtml(outfile, level)
        outfile.write('machineMessage = <a  href:"#">%s</a><br>\n' % quote_python(self.getMachineMessage()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'imageId':
            imageId_ = ''
            for text__content_ in child_.childNodes:
                imageId_ += text__content_.nodeValue
            self.imageId = imageId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'dataCollectionId':
            dataCollectionId_ = ''
            for text__content_ in child_.childNodes:
                dataCollectionId_ += text__content_.nodeValue
            self.dataCollectionId = dataCollectionId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'imageNumber':
            imageNumber_ = ''
            for text__content_ in child_.childNodes:
                imageNumber_ += text__content_.nodeValue
            self.imageNumber = imageNumber_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'fileName':
            fileName_ = ''
            for text__content_ in child_.childNodes:
                fileName_ += text__content_.nodeValue
            self.fileName = fileName_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'fileLocation':
            fileLocation_ = ''
            for text__content_ in child_.childNodes:
                fileLocation_ += text__content_.nodeValue
            self.fileLocation = fileLocation_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'measuredIntensity':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.measuredIntensity = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'jpegFileFullPath':
            jpegFileFullPath_ = ''
            for text__content_ in child_.childNodes:
                jpegFileFullPath_ += text__content_.nodeValue
            self.jpegFileFullPath = jpegFileFullPath_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'jpegThumbnailFileFullPath':
            jpegThumbnailFileFullPath_ = ''
            for text__content_ in child_.childNodes:
                jpegThumbnailFileFullPath_ += text__content_.nodeValue
            self.jpegThumbnailFileFullPath = jpegThumbnailFileFullPath_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'temperature':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.temperature = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cumulativeIntensity':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.cumulativeIntensity = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'synchrotronCurrent':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.synchrotronCurrent = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'comments':
            comments_ = ''
            for text__content_ in child_.childNodes:
                comments_ += text__content_.nodeValue
            self.comments = comments_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'machineMessage':
            machineMessage_ = ''
            for text__content_ in child_.childNodes:
                machineMessage_ += text__content_.nodeValue
            self.machineMessage = machineMessage_
# end class Image


class Laboratory(object):
    subclass = None
    def __init__(self, laboratoryId='', laboratoryUUID='', name='', address='', city='', country='', url='', organization=''):
        self.laboratoryId = laboratoryId
        self.laboratoryUUID = laboratoryUUID
        self.name = name
        self.address = address
        self.city = city
        self.country = country
        self.url = url
        self.organization = organization
    def factory(*args_, **kwargs_):
        if Laboratory.subclass:
            return Laboratory.subclass(*args_, **kwargs_)
        else:
            return Laboratory(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getLaboratoryId(self): return self.laboratoryId
    def setLaboratoryId(self, laboratoryId): self.laboratoryId = laboratoryId
    def getLaboratoryUUID(self): return self.laboratoryUUID
    def setLaboratoryUUID(self, laboratoryUUID): self.laboratoryUUID = laboratoryUUID
    def getName(self): return self.name
    def setName(self, name): self.name = name
    def getAddress(self): return self.address
    def setAddress(self, address): self.address = address
    def getCity(self): return self.city
    def setCity(self, city): self.city = city
    def getCountry(self): return self.country
    def setCountry(self, country): self.country = country
    def getUrl(self): return self.url
    def setUrl(self, url): self.url = url
    def getOrganization(self): return self.organization
    def setOrganization(self, organization): self.organization = organization
    def export(self, outfile, level = 0, name_='Laboratory'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='Laboratory'):
        pass
    def exportChildren(self, outfile, level, name_='Laboratory'):
        showIndent(outfile, level)
        outfile.write('<laboratoryId>%s</laboratoryId>\n' % quote_xml(self.getLaboratoryId()))
        showIndent(outfile, level)
        outfile.write('<laboratoryUUID>%s</laboratoryUUID>\n' % quote_xml(self.getLaboratoryUUID()))
        showIndent(outfile, level)
        outfile.write('<name>%s</name>\n' % quote_xml(self.getName()))
        showIndent(outfile, level)
        outfile.write('<address>%s</address>\n' % quote_xml(self.getAddress()))
        showIndent(outfile, level)
        outfile.write('<city>%s</city>\n' % quote_xml(self.getCity()))
        showIndent(outfile, level)
        outfile.write('<country>%s</country>\n' % quote_xml(self.getCountry()))
        showIndent(outfile, level)
        outfile.write('<url>%s</url>\n' % quote_xml(self.getUrl()))
        showIndent(outfile, level)
        outfile.write('<organization>%s</organization>\n' % quote_xml(self.getOrganization()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='Laboratory' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">Laboratory:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='Laboratory' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = Laboratory.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="Laboratory" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='Laboratory'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('laboratoryId = %s,\n' % quote_python(self.getLaboratoryId()))
        showIndent(outfile, level)
        outfile.write('laboratoryUUID = %s,\n' % quote_python(self.getLaboratoryUUID()))
        showIndent(outfile, level)
        outfile.write('name = %s,\n' % quote_python(self.getName()))
        showIndent(outfile, level)
        outfile.write('address = %s,\n' % quote_python(self.getAddress()))
        showIndent(outfile, level)
        outfile.write('city = %s,\n' % quote_python(self.getCity()))
        showIndent(outfile, level)
        outfile.write('country = %s,\n' % quote_python(self.getCountry()))
        showIndent(outfile, level)
        outfile.write('url = %s,\n' % quote_python(self.getUrl()))
        showIndent(outfile, level)
        outfile.write('organization = %s,\n' % quote_python(self.getOrganization()))
    def exportLiteralHtml(self, outfile, level = 0, name_='Laboratory'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('laboratoryId = <a  href:"#">%s</a><br>\n' % quote_python(self.getLaboratoryId()))
        showIndentHtml(outfile, level)
        outfile.write('laboratoryUUID = <a  href:"#">%s</a><br>\n' % quote_python(self.getLaboratoryUUID()))
        showIndentHtml(outfile, level)
        outfile.write('name = <a  href:"#">%s</a><br>\n' % quote_python(self.getName()))
        showIndentHtml(outfile, level)
        outfile.write('address = <a  href:"#">%s</a><br>\n' % quote_python(self.getAddress()))
        showIndentHtml(outfile, level)
        outfile.write('city = <a  href:"#">%s</a><br>\n' % quote_python(self.getCity()))
        showIndentHtml(outfile, level)
        outfile.write('country = <a  href:"#">%s</a><br>\n' % quote_python(self.getCountry()))
        showIndentHtml(outfile, level)
        outfile.write('url = <a  href:"#">%s</a><br>\n' % quote_python(self.getUrl()))
        showIndentHtml(outfile, level)
        outfile.write('organization = <a  href:"#">%s</a><br>\n' % quote_python(self.getOrganization()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'laboratoryId':
            laboratoryId_ = ''
            for text__content_ in child_.childNodes:
                laboratoryId_ += text__content_.nodeValue
            self.laboratoryId = laboratoryId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'laboratoryUUID':
            laboratoryUUID_ = ''
            for text__content_ in child_.childNodes:
                laboratoryUUID_ += text__content_.nodeValue
            self.laboratoryUUID = laboratoryUUID_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'name':
            name_ = ''
            for text__content_ in child_.childNodes:
                name_ += text__content_.nodeValue
            self.name = name_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'address':
            address_ = ''
            for text__content_ in child_.childNodes:
                address_ += text__content_.nodeValue
            self.address = address_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'city':
            city_ = ''
            for text__content_ in child_.childNodes:
                city_ += text__content_.nodeValue
            self.city = city_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'country':
            country_ = ''
            for text__content_ in child_.childNodes:
                country_ += text__content_.nodeValue
            self.country = country_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'url':
            url_ = ''
            for text__content_ in child_.childNodes:
                url_ += text__content_.nodeValue
            self.url = url_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'organization':
            organization_ = ''
            for text__content_ in child_.childNodes:
                organization_ += text__content_.nodeValue
            self.organization = organization_
# end class Laboratory


class Person(object):
    subclass = None
    def __init__(self, personId='', laboratoryId='', personUUID='', familyName='', givenName='', title='', emailAddress='', phoneNumber='', login='', passwd=''):
        self.personId = personId
        self.laboratoryId = laboratoryId
        self.personUUID = personUUID
        self.familyName = familyName
        self.givenName = givenName
        self.title = title
        self.emailAddress = emailAddress
        self.phoneNumber = phoneNumber
        self.login = login
        self.passwd = passwd
    def factory(*args_, **kwargs_):
        if Person.subclass:
            return Person.subclass(*args_, **kwargs_)
        else:
            return Person(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getPersonId(self): return self.personId
    def setPersonId(self, personId): self.personId = personId
    def getLaboratoryId(self): return self.laboratoryId
    def setLaboratoryId(self, laboratoryId): self.laboratoryId = laboratoryId
    def getPersonUUID(self): return self.personUUID
    def setPersonUUID(self, personUUID): self.personUUID = personUUID
    def getFamilyName(self): return self.familyName
    def setFamilyName(self, familyName): self.familyName = familyName
    def getGivenName(self): return self.givenName
    def setGivenName(self, givenName): self.givenName = givenName
    def getTitle(self): return self.title
    def setTitle(self, title): self.title = title
    def getEmailAddress(self): return self.emailAddress
    def setEmailAddress(self, emailAddress): self.emailAddress = emailAddress
    def getPhoneNumber(self): return self.phoneNumber
    def setPhoneNumber(self, phoneNumber): self.phoneNumber = phoneNumber
    def getLogin(self): return self.login
    def setLogin(self, login): self.login = login
    def getPasswd(self): return self.passwd
    def setPasswd(self, passwd): self.passwd = passwd
    def export(self, outfile, level = 0, name_='Person'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='Person'):
        pass
    def exportChildren(self, outfile, level, name_='Person'):
        showIndent(outfile, level)
        outfile.write('<personId>%s</personId>\n' % quote_xml(self.getPersonId()))
        showIndent(outfile, level)
        outfile.write('<laboratoryId>%s</laboratoryId>\n' % quote_xml(self.getLaboratoryId()))
        showIndent(outfile, level)
        outfile.write('<personUUID>%s</personUUID>\n' % quote_xml(self.getPersonUUID()))
        showIndent(outfile, level)
        outfile.write('<familyName>%s</familyName>\n' % quote_xml(self.getFamilyName()))
        showIndent(outfile, level)
        outfile.write('<givenName>%s</givenName>\n' % quote_xml(self.getGivenName()))
        showIndent(outfile, level)
        outfile.write('<title>%s</title>\n' % quote_xml(self.getTitle()))
        showIndent(outfile, level)
        outfile.write('<emailAddress>%s</emailAddress>\n' % quote_xml(self.getEmailAddress()))
        showIndent(outfile, level)
        outfile.write('<phoneNumber>%s</phoneNumber>\n' % quote_xml(self.getPhoneNumber()))
        showIndent(outfile, level)
        outfile.write('<login>%s</login>\n' % quote_xml(self.getLogin()))
        showIndent(outfile, level)
        outfile.write('<passwd>%s</passwd>\n' % quote_xml(self.getPasswd()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='Person' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">Person:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='Person' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = Person.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="Person" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='Person'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('personId = %s,\n' % quote_python(self.getPersonId()))
        showIndent(outfile, level)
        outfile.write('laboratoryId = %s,\n' % quote_python(self.getLaboratoryId()))
        showIndent(outfile, level)
        outfile.write('personUUID = %s,\n' % quote_python(self.getPersonUUID()))
        showIndent(outfile, level)
        outfile.write('familyName = %s,\n' % quote_python(self.getFamilyName()))
        showIndent(outfile, level)
        outfile.write('givenName = %s,\n' % quote_python(self.getGivenName()))
        showIndent(outfile, level)
        outfile.write('title = %s,\n' % quote_python(self.getTitle()))
        showIndent(outfile, level)
        outfile.write('emailAddress = %s,\n' % quote_python(self.getEmailAddress()))
        showIndent(outfile, level)
        outfile.write('phoneNumber = %s,\n' % quote_python(self.getPhoneNumber()))
        showIndent(outfile, level)
        outfile.write('login = %s,\n' % quote_python(self.getLogin()))
        showIndent(outfile, level)
        outfile.write('passwd = %s,\n' % quote_python(self.getPasswd()))
    def exportLiteralHtml(self, outfile, level = 0, name_='Person'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('personId = <a  href:"#">%s</a><br>\n' % quote_python(self.getPersonId()))
        showIndentHtml(outfile, level)
        outfile.write('laboratoryId = <a  href:"#">%s</a><br>\n' % quote_python(self.getLaboratoryId()))
        showIndentHtml(outfile, level)
        outfile.write('personUUID = <a  href:"#">%s</a><br>\n' % quote_python(self.getPersonUUID()))
        showIndentHtml(outfile, level)
        outfile.write('familyName = <a  href:"#">%s</a><br>\n' % quote_python(self.getFamilyName()))
        showIndentHtml(outfile, level)
        outfile.write('givenName = <a  href:"#">%s</a><br>\n' % quote_python(self.getGivenName()))
        showIndentHtml(outfile, level)
        outfile.write('title = <a  href:"#">%s</a><br>\n' % quote_python(self.getTitle()))
        showIndentHtml(outfile, level)
        outfile.write('emailAddress = <a  href:"#">%s</a><br>\n' % quote_python(self.getEmailAddress()))
        showIndentHtml(outfile, level)
        outfile.write('phoneNumber = <a  href:"#">%s</a><br>\n' % quote_python(self.getPhoneNumber()))
        showIndentHtml(outfile, level)
        outfile.write('login = <a  href:"#">%s</a><br>\n' % quote_python(self.getLogin()))
        showIndentHtml(outfile, level)
        outfile.write('passwd = <a  href:"#">%s</a><br>\n' % quote_python(self.getPasswd()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'personId':
            personId_ = ''
            for text__content_ in child_.childNodes:
                personId_ += text__content_.nodeValue
            self.personId = personId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'laboratoryId':
            laboratoryId_ = ''
            for text__content_ in child_.childNodes:
                laboratoryId_ += text__content_.nodeValue
            self.laboratoryId = laboratoryId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'personUUID':
            personUUID_ = ''
            for text__content_ in child_.childNodes:
                personUUID_ += text__content_.nodeValue
            self.personUUID = personUUID_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'familyName':
            familyName_ = ''
            for text__content_ in child_.childNodes:
                familyName_ += text__content_.nodeValue
            self.familyName = familyName_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'givenName':
            givenName_ = ''
            for text__content_ in child_.childNodes:
                givenName_ += text__content_.nodeValue
            self.givenName = givenName_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'title':
            title_ = ''
            for text__content_ in child_.childNodes:
                title_ += text__content_.nodeValue
            self.title = title_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'emailAddress':
            emailAddress_ = ''
            for text__content_ in child_.childNodes:
                emailAddress_ += text__content_.nodeValue
            self.emailAddress = emailAddress_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'phoneNumber':
            phoneNumber_ = ''
            for text__content_ in child_.childNodes:
                phoneNumber_ += text__content_.nodeValue
            self.phoneNumber = phoneNumber_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'login':
            login_ = ''
            for text__content_ in child_.childNodes:
                login_ += text__content_.nodeValue
            self.login = login_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'passwd':
            passwd_ = ''
            for text__content_ in child_.childNodes:
                passwd_ += text__content_.nodeValue
            self.passwd = passwd_
# end class Person


class Proposal(object):
    subclass = None
    def __init__(self, proposalId='', personId='', title='', code='', number='', timeStamp=''):
        self.proposalId = proposalId
        self.personId = personId
        self.title = title
        self.code = code
        self.number = number
        self.timeStamp = timeStamp
    def factory(*args_, **kwargs_):
        if Proposal.subclass:
            return Proposal.subclass(*args_, **kwargs_)
        else:
            return Proposal(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getProposalId(self): return self.proposalId
    def setProposalId(self, proposalId): self.proposalId = proposalId
    def getPersonId(self): return self.personId
    def setPersonId(self, personId): self.personId = personId
    def getTitle(self): return self.title
    def setTitle(self, title): self.title = title
    def getCode(self): return self.code
    def setCode(self, code): self.code = code
    def getNumber(self): return self.number
    def setNumber(self, number): self.number = number
    def getTimeStamp(self): return self.timeStamp
    def setTimeStamp(self, timeStamp): self.timeStamp = timeStamp
    def export(self, outfile, level = 0, name_='Proposal'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='Proposal'):
        pass
    def exportChildren(self, outfile, level, name_='Proposal'):
        showIndent(outfile, level)
        outfile.write('<proposalId>%s</proposalId>\n' % quote_xml(self.getProposalId()))
        showIndent(outfile, level)
        outfile.write('<personId>%s</personId>\n' % quote_xml(self.getPersonId()))
        showIndent(outfile, level)
        outfile.write('<title>%s</title>\n' % quote_xml(self.getTitle()))
        showIndent(outfile, level)
        outfile.write('<code>%s</code>\n' % quote_xml(self.getCode()))
        showIndent(outfile, level)
        outfile.write('<number>%s</number>\n' % quote_xml(self.getNumber()))
        showIndent(outfile, level)
        outfile.write('<timeStamp>%s</timeStamp>\n' % quote_xml(self.getTimeStamp()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='Proposal' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">Proposal:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='Proposal' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = Proposal.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="Proposal" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='Proposal'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('proposalId = %s,\n' % quote_python(self.getProposalId()))
        showIndent(outfile, level)
        outfile.write('personId = %s,\n' % quote_python(self.getPersonId()))
        showIndent(outfile, level)
        outfile.write('title = %s,\n' % quote_python(self.getTitle()))
        showIndent(outfile, level)
        outfile.write('code = %s,\n' % quote_python(self.getCode()))
        showIndent(outfile, level)
        outfile.write('number = %s,\n' % quote_python(self.getNumber()))
        showIndent(outfile, level)
        outfile.write('timeStamp = %s,\n' % quote_python(self.getTimeStamp()))
    def exportLiteralHtml(self, outfile, level = 0, name_='Proposal'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('proposalId = <a  href:"#">%s</a><br>\n' % quote_python(self.getProposalId()))
        showIndentHtml(outfile, level)
        outfile.write('personId = <a  href:"#">%s</a><br>\n' % quote_python(self.getPersonId()))
        showIndentHtml(outfile, level)
        outfile.write('title = <a  href:"#">%s</a><br>\n' % quote_python(self.getTitle()))
        showIndentHtml(outfile, level)
        outfile.write('code = <a  href:"#">%s</a><br>\n' % quote_python(self.getCode()))
        showIndentHtml(outfile, level)
        outfile.write('number = <a  href:"#">%s</a><br>\n' % quote_python(self.getNumber()))
        showIndentHtml(outfile, level)
        outfile.write('timeStamp = <a  href:"#">%s</a><br>\n' % quote_python(self.getTimeStamp()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'proposalId':
            proposalId_ = ''
            for text__content_ in child_.childNodes:
                proposalId_ += text__content_.nodeValue
            self.proposalId = proposalId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'personId':
            personId_ = ''
            for text__content_ in child_.childNodes:
                personId_ += text__content_.nodeValue
            self.personId = personId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'title':
            title_ = ''
            for text__content_ in child_.childNodes:
                title_ += text__content_.nodeValue
            self.title = title_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'code':
            code_ = ''
            for text__content_ in child_.childNodes:
                code_ += text__content_.nodeValue
            self.code = code_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'number':
            number_ = ''
            for text__content_ in child_.childNodes:
                number_ += text__content_.nodeValue
            self.number = number_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'timeStamp':
            timeStamp_ = ''
            for text__content_ in child_.childNodes:
                timeStamp_ += text__content_.nodeValue
            self.timeStamp = timeStamp_
# end class Proposal


class Protein(object):
    subclass = None
    def __init__(self, proteinId='', proposalId='', name='', acronym='', molecularMass=0.0, proteinType='', sequence='', personId='', timeStamp=''):
        self.proteinId = proteinId
        self.proposalId = proposalId
        self.name = name
        self.acronym = acronym
        self.molecularMass = molecularMass
        self.proteinType = proteinType
        self.sequence = sequence
        self.personId = personId
        self.timeStamp = timeStamp
    def factory(*args_, **kwargs_):
        if Protein.subclass:
            return Protein.subclass(*args_, **kwargs_)
        else:
            return Protein(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getProteinId(self): return self.proteinId
    def setProteinId(self, proteinId): self.proteinId = proteinId
    def getProposalId(self): return self.proposalId
    def setProposalId(self, proposalId): self.proposalId = proposalId
    def getName(self): return self.name
    def setName(self, name): self.name = name
    def getAcronym(self): return self.acronym
    def setAcronym(self, acronym): self.acronym = acronym
    def getMolecularMass(self): return self.molecularMass
    def setMolecularMass(self, molecularMass): self.molecularMass = molecularMass
    def getProteinType(self): return self.proteinType
    def setProteinType(self, proteinType): self.proteinType = proteinType
    def getSequence(self): return self.sequence
    def setSequence(self, sequence): self.sequence = sequence
    def getPersonId(self): return self.personId
    def setPersonId(self, personId): self.personId = personId
    def getTimeStamp(self): return self.timeStamp
    def setTimeStamp(self, timeStamp): self.timeStamp = timeStamp
    def export(self, outfile, level = 0, name_='Protein'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='Protein'):
        pass
    def exportChildren(self, outfile, level, name_='Protein'):
        showIndent(outfile, level)
        outfile.write('<proteinId>%s</proteinId>\n' % quote_xml(self.getProteinId()))
        showIndent(outfile, level)
        outfile.write('<proposalId>%s</proposalId>\n' % quote_xml(self.getProposalId()))
        showIndent(outfile, level)
        outfile.write('<name>%s</name>\n' % quote_xml(self.getName()))
        showIndent(outfile, level)
        outfile.write('<acronym>%s</acronym>\n' % quote_xml(self.getAcronym()))
        showIndent(outfile, level)
        outfile.write('<molecularMass>%e</molecularMass>\n' % self.getMolecularMass())
        showIndent(outfile, level)
        outfile.write('<proteinType>%s</proteinType>\n' % quote_xml(self.getProteinType()))
        showIndent(outfile, level)
        outfile.write('<sequence>%s</sequence>\n' % quote_xml(self.getSequence()))
        showIndent(outfile, level)
        outfile.write('<personId>%s</personId>\n' % quote_xml(self.getPersonId()))
        showIndent(outfile, level)
        outfile.write('<timeStamp>%s</timeStamp>\n' % quote_xml(self.getTimeStamp()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='Protein' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">Protein:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='Protein' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = Protein.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="Protein" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='Protein'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('proteinId = %s,\n' % quote_python(self.getProteinId()))
        showIndent(outfile, level)
        outfile.write('proposalId = %s,\n' % quote_python(self.getProposalId()))
        showIndent(outfile, level)
        outfile.write('name = %s,\n' % quote_python(self.getName()))
        showIndent(outfile, level)
        outfile.write('acronym = %s,\n' % quote_python(self.getAcronym()))
        showIndent(outfile, level)
        outfile.write('molecularMass = %e,\n' % self.getMolecularMass())
        showIndent(outfile, level)
        outfile.write('proteinType = %s,\n' % quote_python(self.getProteinType()))
        showIndent(outfile, level)
        outfile.write('sequence = %s,\n' % quote_python(self.getSequence()))
        showIndent(outfile, level)
        outfile.write('personId = %s,\n' % quote_python(self.getPersonId()))
        showIndent(outfile, level)
        outfile.write('timeStamp = %s,\n' % quote_python(self.getTimeStamp()))
    def exportLiteralHtml(self, outfile, level = 0, name_='Protein'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('proteinId = <a  href:"#">%s</a><br>\n' % quote_python(self.getProteinId()))
        showIndentHtml(outfile, level)
        outfile.write('proposalId = <a  href:"#">%s</a><br>\n' % quote_python(self.getProposalId()))
        showIndentHtml(outfile, level)
        outfile.write('name = <a  href:"#">%s</a><br>\n' % quote_python(self.getName()))
        showIndentHtml(outfile, level)
        outfile.write('acronym = <a  href:"#">%s</a><br>\n' % quote_python(self.getAcronym()))
        showIndentHtml(outfile, level)
        outfile.write('molecularMass = <a  href:"#">%e</a><br>\n' % self.getMolecularMass())
        showIndentHtml(outfile, level)
        outfile.write('proteinType = <a  href:"#">%s</a><br>\n' % quote_python(self.getProteinType()))
        showIndentHtml(outfile, level)
        outfile.write('sequence = <a  href:"#">%s</a><br>\n' % quote_python(self.getSequence()))
        showIndentHtml(outfile, level)
        outfile.write('personId = <a  href:"#">%s</a><br>\n' % quote_python(self.getPersonId()))
        showIndentHtml(outfile, level)
        outfile.write('timeStamp = <a  href:"#">%s</a><br>\n' % quote_python(self.getTimeStamp()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'proteinId':
            proteinId_ = ''
            for text__content_ in child_.childNodes:
                proteinId_ += text__content_.nodeValue
            self.proteinId = proteinId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'proposalId':
            proposalId_ = ''
            for text__content_ in child_.childNodes:
                proposalId_ += text__content_.nodeValue
            self.proposalId = proposalId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'name':
            name_ = ''
            for text__content_ in child_.childNodes:
                name_ += text__content_.nodeValue
            self.name = name_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'acronym':
            acronym_ = ''
            for text__content_ in child_.childNodes:
                acronym_ += text__content_.nodeValue
            self.acronym = acronym_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'molecularMass':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.molecularMass = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'proteinType':
            proteinType_ = ''
            for text__content_ in child_.childNodes:
                proteinType_ += text__content_.nodeValue
            self.proteinType = proteinType_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sequence':
            sequence_ = ''
            for text__content_ in child_.childNodes:
                sequence_ += text__content_.nodeValue
            self.sequence = sequence_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'personId':
            personId_ = ''
            for text__content_ in child_.childNodes:
                personId_ += text__content_.nodeValue
            self.personId = personId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'timeStamp':
            timeStamp_ = ''
            for text__content_ in child_.childNodes:
                timeStamp_ += text__content_.nodeValue
            self.timeStamp = timeStamp_
# end class Protein


class SafetyRequest(object):
    subclass = None
    def __init__(self, safetyRequestId='', xmlDocumentId='', proteinId='', projectCode='', submissionDate='', response=False, reponseDate='', responseDetails=''):
        self.safetyRequestId = safetyRequestId
        self.xmlDocumentId = xmlDocumentId
        self.proteinId = proteinId
        self.projectCode = projectCode
        self.submissionDate = submissionDate
        self.response = response
        self.reponseDate = reponseDate
        self.responseDetails = responseDetails
    def factory(*args_, **kwargs_):
        if SafetyRequest.subclass:
            return SafetyRequest.subclass(*args_, **kwargs_)
        else:
            return SafetyRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getSafetyRequestId(self): return self.safetyRequestId
    def setSafetyRequestId(self, safetyRequestId): self.safetyRequestId = safetyRequestId
    def getXmlDocumentId(self): return self.xmlDocumentId
    def setXmlDocumentId(self, xmlDocumentId): self.xmlDocumentId = xmlDocumentId
    def getProteinId(self): return self.proteinId
    def setProteinId(self, proteinId): self.proteinId = proteinId
    def getProjectCode(self): return self.projectCode
    def setProjectCode(self, projectCode): self.projectCode = projectCode
    def getSubmissionDate(self): return self.submissionDate
    def setSubmissionDate(self, submissionDate): self.submissionDate = submissionDate
    def getResponse(self): return self.response
    def setResponse(self, response): self.response = response
    def getReponseDate(self): return self.reponseDate
    def setReponseDate(self, reponseDate): self.reponseDate = reponseDate
    def getResponseDetails(self): return self.responseDetails
    def setResponseDetails(self, responseDetails): self.responseDetails = responseDetails
    def export(self, outfile, level = 0, name_='SafetyRequest'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='SafetyRequest'):
        pass
    def exportChildren(self, outfile, level, name_='SafetyRequest'):
        showIndent(outfile, level)
        outfile.write('<safetyRequestId>%s</safetyRequestId>\n' % quote_xml(self.getSafetyRequestId()))
        showIndent(outfile, level)
        outfile.write('<xmlDocumentId>%s</xmlDocumentId>\n' % quote_xml(self.getXmlDocumentId()))
        showIndent(outfile, level)
        outfile.write('<proteinId>%s</proteinId>\n' % quote_xml(self.getProteinId()))
        showIndent(outfile, level)
        outfile.write('<projectCode>%s</projectCode>\n' % quote_xml(self.getProjectCode()))
        showIndent(outfile, level)
        outfile.write('<submissionDate>%s</submissionDate>\n' % quote_xml(self.getSubmissionDate()))
        showIndent(outfile, level)
        outfile.write('<response>%s</response>\n' % self.getResponse())
        showIndent(outfile, level)
        outfile.write('<reponseDate>%s</reponseDate>\n' % quote_xml(self.getReponseDate()))
        showIndent(outfile, level)
        outfile.write('<responseDetails>%s</responseDetails>\n' % quote_xml(self.getResponseDetails()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='SafetyRequest' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">SafetyRequest:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='SafetyRequest' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = SafetyRequest.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="SafetyRequest" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='SafetyRequest'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('safetyRequestId = %s,\n' % quote_python(self.getSafetyRequestId()))
        showIndent(outfile, level)
        outfile.write('xmlDocumentId = %s,\n' % quote_python(self.getXmlDocumentId()))
        showIndent(outfile, level)
        outfile.write('proteinId = %s,\n' % quote_python(self.getProteinId()))
        showIndent(outfile, level)
        outfile.write('projectCode = %s,\n' % quote_python(self.getProjectCode()))
        showIndent(outfile, level)
        outfile.write('submissionDate = %s,\n' % quote_python(self.getSubmissionDate()))
        showIndent(outfile, level)
        outfile.write('response = %s,\n' % self.getResponse())
        showIndent(outfile, level)
        outfile.write('reponseDate = %s,\n' % quote_python(self.getReponseDate()))
        showIndent(outfile, level)
        outfile.write('responseDetails = %s,\n' % quote_python(self.getResponseDetails()))
    def exportLiteralHtml(self, outfile, level = 0, name_='SafetyRequest'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('safetyRequestId = <a  href:"#">%s</a><br>\n' % quote_python(self.getSafetyRequestId()))
        showIndentHtml(outfile, level)
        outfile.write('xmlDocumentId = <a  href:"#">%s</a><br>\n' % quote_python(self.getXmlDocumentId()))
        showIndentHtml(outfile, level)
        outfile.write('proteinId = <a  href:"#">%s</a><br>\n' % quote_python(self.getProteinId()))
        showIndentHtml(outfile, level)
        outfile.write('projectCode = <a  href:"#">%s</a><br>\n' % quote_python(self.getProjectCode()))
        showIndentHtml(outfile, level)
        outfile.write('submissionDate = <a  href:"#">%s</a><br>\n' % quote_python(self.getSubmissionDate()))
        showIndentHtml(outfile, level)
        outfile.write('response = <a  href:"#">%s</a><br>\n' % self.getResponse())
        showIndentHtml(outfile, level)
        outfile.write('reponseDate = <a  href:"#">%s</a><br>\n' % quote_python(self.getReponseDate()))
        showIndentHtml(outfile, level)
        outfile.write('responseDetails = <a  href:"#">%s</a><br>\n' % quote_python(self.getResponseDetails()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'safetyRequestId':
            safetyRequestId_ = ''
            for text__content_ in child_.childNodes:
                safetyRequestId_ += text__content_.nodeValue
            self.safetyRequestId = safetyRequestId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'xmlDocumentId':
            xmlDocumentId_ = ''
            for text__content_ in child_.childNodes:
                xmlDocumentId_ += text__content_.nodeValue
            self.xmlDocumentId = xmlDocumentId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'proteinId':
            proteinId_ = ''
            for text__content_ in child_.childNodes:
                proteinId_ += text__content_.nodeValue
            self.proteinId = proteinId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'projectCode':
            projectCode_ = ''
            for text__content_ in child_.childNodes:
                projectCode_ += text__content_.nodeValue
            self.projectCode = projectCode_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'submissionDate':
            submissionDate_ = ''
            for text__content_ in child_.childNodes:
                submissionDate_ += text__content_.nodeValue
            self.submissionDate = submissionDate_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'response':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', 'True', '1'):
                    ival_ = True
                elif sval_ in ('false', 'False', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.response = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'reponseDate':
            reponseDate_ = ''
            for text__content_ in child_.childNodes:
                reponseDate_ += text__content_.nodeValue
            self.reponseDate = reponseDate_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'responseDetails':
            responseDetails_ = ''
            for text__content_ in child_.childNodes:
                responseDetails_ += text__content_.nodeValue
            self.responseDetails = responseDetails_
# end class SafetyRequest


class Screening(object):
    subclass = None
    def __init__(self, screeningId='', dataCollectionId='', timeStamp='', programVersion=''):
        self.screeningId = screeningId
        self.dataCollectionId = dataCollectionId
        self.timeStamp = timeStamp
        self.programVersion = programVersion
    def factory(*args_, **kwargs_):
        if Screening.subclass:
            return Screening.subclass(*args_, **kwargs_)
        else:
            return Screening(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getScreeningId(self): return self.screeningId
    def setScreeningId(self, screeningId): self.screeningId = screeningId
    def getDataCollectionId(self): return self.dataCollectionId
    def setDataCollectionId(self, dataCollectionId): self.dataCollectionId = dataCollectionId
    def getTimeStamp(self): return self.timeStamp
    def setTimeStamp(self, timeStamp): self.timeStamp = timeStamp
    def getProgramVersion(self): return self.programVersion
    def setProgramVersion(self, programVersion): self.programVersion = programVersion
    def export(self, outfile, level = 0, name_='Screening'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='Screening'):
        pass
    def exportChildren(self, outfile, level, name_='Screening'):
        showIndent(outfile, level)
        outfile.write('<screeningId>%s</screeningId>\n' % quote_xml(self.getScreeningId()))
        showIndent(outfile, level)
        outfile.write('<dataCollectionId>%s</dataCollectionId>\n' % quote_xml(self.getDataCollectionId()))
        showIndent(outfile, level)
        outfile.write('<timeStamp>%s</timeStamp>\n' % quote_xml(self.getTimeStamp()))
        showIndent(outfile, level)
        outfile.write('<programVersion>%s</programVersion>\n' % quote_xml(self.getProgramVersion()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='Screening' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">Screening:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='Screening' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = Screening.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="Screening" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='Screening'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('screeningId = %s,\n' % quote_python(self.getScreeningId()))
        showIndent(outfile, level)
        outfile.write('dataCollectionId = %s,\n' % quote_python(self.getDataCollectionId()))
        showIndent(outfile, level)
        outfile.write('timeStamp = %s,\n' % quote_python(self.getTimeStamp()))
        showIndent(outfile, level)
        outfile.write('programVersion = %s,\n' % quote_python(self.getProgramVersion()))
    def exportLiteralHtml(self, outfile, level = 0, name_='Screening'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('screeningId = <a  href:"#">%s</a><br>\n' % quote_python(self.getScreeningId()))
        showIndentHtml(outfile, level)
        outfile.write('dataCollectionId = <a  href:"#">%s</a><br>\n' % quote_python(self.getDataCollectionId()))
        showIndentHtml(outfile, level)
        outfile.write('timeStamp = <a  href:"#">%s</a><br>\n' % quote_python(self.getTimeStamp()))
        showIndentHtml(outfile, level)
        outfile.write('programVersion = <a  href:"#">%s</a><br>\n' % quote_python(self.getProgramVersion()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningId':
            screeningId_ = ''
            for text__content_ in child_.childNodes:
                screeningId_ += text__content_.nodeValue
            self.screeningId = screeningId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'dataCollectionId':
            dataCollectionId_ = ''
            for text__content_ in child_.childNodes:
                dataCollectionId_ += text__content_.nodeValue
            self.dataCollectionId = dataCollectionId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'timeStamp':
            timeStamp_ = ''
            for text__content_ in child_.childNodes:
                timeStamp_ += text__content_.nodeValue
            self.timeStamp = timeStamp_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'programVersion':
            programVersion_ = ''
            for text__content_ in child_.childNodes:
                programVersion_ += text__content_.nodeValue
            self.programVersion = programVersion_
# end class Screening


class ScreeningInput(object):
    subclass = None
    def __init__(self, screeningInputId='', screeningId='', beamX=0.0, beamY=0.0, rmsErrorLimits=0.0, minimumFractionIndexed=0.0, maximumFractionRejected=0.0, minimumSignalToNoise=0.0):
        self.screeningInputId = screeningInputId
        self.screeningId = screeningId
        self.beamX = beamX
        self.beamY = beamY
        self.rmsErrorLimits = rmsErrorLimits
        self.minimumFractionIndexed = minimumFractionIndexed
        self.maximumFractionRejected = maximumFractionRejected
        self.minimumSignalToNoise = minimumSignalToNoise
    def factory(*args_, **kwargs_):
        if ScreeningInput.subclass:
            return ScreeningInput.subclass(*args_, **kwargs_)
        else:
            return ScreeningInput(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getScreeningInputId(self): return self.screeningInputId
    def setScreeningInputId(self, screeningInputId): self.screeningInputId = screeningInputId
    def getScreeningId(self): return self.screeningId
    def setScreeningId(self, screeningId): self.screeningId = screeningId
    def getBeamX(self): return self.beamX
    def setBeamX(self, beamX): self.beamX = beamX
    def getBeamY(self): return self.beamY
    def setBeamY(self, beamY): self.beamY = beamY
    def getRmsErrorLimits(self): return self.rmsErrorLimits
    def setRmsErrorLimits(self, rmsErrorLimits): self.rmsErrorLimits = rmsErrorLimits
    def getMinimumFractionIndexed(self): return self.minimumFractionIndexed
    def setMinimumFractionIndexed(self, minimumFractionIndexed): self.minimumFractionIndexed = minimumFractionIndexed
    def getMaximumFractionRejected(self): return self.maximumFractionRejected
    def setMaximumFractionRejected(self, maximumFractionRejected): self.maximumFractionRejected = maximumFractionRejected
    def getMinimumSignalToNoise(self): return self.minimumSignalToNoise
    def setMinimumSignalToNoise(self, minimumSignalToNoise): self.minimumSignalToNoise = minimumSignalToNoise
    def export(self, outfile, level = 0, name_='ScreeningInput'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='ScreeningInput'):
        pass
    def exportChildren(self, outfile, level, name_='ScreeningInput'):
        showIndent(outfile, level)
        outfile.write('<screeningInputId>%s</screeningInputId>\n' % quote_xml(self.getScreeningInputId()))
        showIndent(outfile, level)
        outfile.write('<screeningId>%s</screeningId>\n' % quote_xml(self.getScreeningId()))
        showIndent(outfile, level)
        outfile.write('<beamX>%e</beamX>\n' % self.getBeamX())
        showIndent(outfile, level)
        outfile.write('<beamY>%e</beamY>\n' % self.getBeamY())
        showIndent(outfile, level)
        outfile.write('<rmsErrorLimits>%e</rmsErrorLimits>\n' % self.getRmsErrorLimits())
        showIndent(outfile, level)
        outfile.write('<minimumFractionIndexed>%e</minimumFractionIndexed>\n' % self.getMinimumFractionIndexed())
        showIndent(outfile, level)
        outfile.write('<maximumFractionRejected>%e</maximumFractionRejected>\n' % self.getMaximumFractionRejected())
        showIndent(outfile, level)
        outfile.write('<minimumSignalToNoise>%e</minimumSignalToNoise>\n' % self.getMinimumSignalToNoise())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='ScreeningInput' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">ScreeningInput:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='ScreeningInput' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = ScreeningInput.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="ScreeningInput" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='ScreeningInput'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('screeningInputId = %s,\n' % quote_python(self.getScreeningInputId()))
        showIndent(outfile, level)
        outfile.write('screeningId = %s,\n' % quote_python(self.getScreeningId()))
        showIndent(outfile, level)
        outfile.write('beamX = %e,\n' % self.getBeamX())
        showIndent(outfile, level)
        outfile.write('beamY = %e,\n' % self.getBeamY())
        showIndent(outfile, level)
        outfile.write('rmsErrorLimits = %e,\n' % self.getRmsErrorLimits())
        showIndent(outfile, level)
        outfile.write('minimumFractionIndexed = %e,\n' % self.getMinimumFractionIndexed())
        showIndent(outfile, level)
        outfile.write('maximumFractionRejected = %e,\n' % self.getMaximumFractionRejected())
        showIndent(outfile, level)
        outfile.write('minimumSignalToNoise = %e,\n' % self.getMinimumSignalToNoise())
    def exportLiteralHtml(self, outfile, level = 0, name_='ScreeningInput'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('screeningInputId = <a  href:"#">%s</a><br>\n' % quote_python(self.getScreeningInputId()))
        showIndentHtml(outfile, level)
        outfile.write('screeningId = <a  href:"#">%s</a><br>\n' % quote_python(self.getScreeningId()))
        showIndentHtml(outfile, level)
        outfile.write('beamX = <a  href:"#">%e</a><br>\n' % self.getBeamX())
        showIndentHtml(outfile, level)
        outfile.write('beamY = <a  href:"#">%e</a><br>\n' % self.getBeamY())
        showIndentHtml(outfile, level)
        outfile.write('rmsErrorLimits = <a  href:"#">%e</a><br>\n' % self.getRmsErrorLimits())
        showIndentHtml(outfile, level)
        outfile.write('minimumFractionIndexed = <a  href:"#">%e</a><br>\n' % self.getMinimumFractionIndexed())
        showIndentHtml(outfile, level)
        outfile.write('maximumFractionRejected = <a  href:"#">%e</a><br>\n' % self.getMaximumFractionRejected())
        showIndentHtml(outfile, level)
        outfile.write('minimumSignalToNoise = <a  href:"#">%e</a><br>\n' % self.getMinimumSignalToNoise())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningInputId':
            screeningInputId_ = ''
            for text__content_ in child_.childNodes:
                screeningInputId_ += text__content_.nodeValue
            self.screeningInputId = screeningInputId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningId':
            screeningId_ = ''
            for text__content_ in child_.childNodes:
                screeningId_ += text__content_.nodeValue
            self.screeningId = screeningId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'beamX':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.beamX = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'beamY':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.beamY = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rmsErrorLimits':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.rmsErrorLimits = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'minimumFractionIndexed':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.minimumFractionIndexed = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'maximumFractionRejected':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.maximumFractionRejected = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'minimumSignalToNoise':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.minimumSignalToNoise = fval_
# end class ScreeningInput


class ScreeningOutput(object):
    subclass = None
    def __init__(self, screeningOutputId='', screeningId='', statusDescription='', rejectedReflections='', resolutionObtained=0.0, spotDeviationR=0.0, spotDeviationTheta=0.0, beamShiftX=0.0, beamShiftY=0.0, numSpotsFound='', numSpotsUsed='', numSpotsRejected='', mosaicity=0.0, iOverSigma=0.0, diffractionRings=False, screeningSuccess=False, mosaicityEstimated=False):
        self.screeningOutputId = screeningOutputId
        self.screeningId = screeningId
        self.statusDescription = statusDescription
        self.rejectedReflections = rejectedReflections
        self.resolutionObtained = resolutionObtained
        self.spotDeviationR = spotDeviationR
        self.spotDeviationTheta = spotDeviationTheta
        self.beamShiftX = beamShiftX
        self.beamShiftY = beamShiftY
        self.numSpotsFound = numSpotsFound
        self.numSpotsUsed = numSpotsUsed
        self.numSpotsRejected = numSpotsRejected
        self.mosaicity = mosaicity
        self.iOverSigma = iOverSigma
        self.diffractionRings = diffractionRings
        self.screeningSuccess = screeningSuccess
        self.mosaicityEstimated = mosaicityEstimated
    def factory(*args_, **kwargs_):
        if ScreeningOutput.subclass:
            return ScreeningOutput.subclass(*args_, **kwargs_)
        else:
            return ScreeningOutput(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getScreeningOutputId(self): return self.screeningOutputId
    def setScreeningOutputId(self, screeningOutputId): self.screeningOutputId = screeningOutputId
    def getScreeningId(self): return self.screeningId
    def setScreeningId(self, screeningId): self.screeningId = screeningId
    def getStatusDescription(self): return self.statusDescription
    def setStatusDescription(self, statusDescription): self.statusDescription = statusDescription
    def getRejectedReflections(self): return self.rejectedReflections
    def setRejectedReflections(self, rejectedReflections): self.rejectedReflections = rejectedReflections
    def getResolutionObtained(self): return self.resolutionObtained
    def setResolutionObtained(self, resolutionObtained): self.resolutionObtained = resolutionObtained
    def getSpotDeviationR(self): return self.spotDeviationR
    def setSpotDeviationR(self, spotDeviationR): self.spotDeviationR = spotDeviationR
    def getSpotDeviationTheta(self): return self.spotDeviationTheta
    def setSpotDeviationTheta(self, spotDeviationTheta): self.spotDeviationTheta = spotDeviationTheta
    def getBeamShiftX(self): return self.beamShiftX
    def setBeamShiftX(self, beamShiftX): self.beamShiftX = beamShiftX
    def getBeamShiftY(self): return self.beamShiftY
    def setBeamShiftY(self, beamShiftY): self.beamShiftY = beamShiftY
    def getNumSpotsFound(self): return self.numSpotsFound
    def setNumSpotsFound(self, numSpotsFound): self.numSpotsFound = numSpotsFound
    def getNumSpotsUsed(self): return self.numSpotsUsed
    def setNumSpotsUsed(self, numSpotsUsed): self.numSpotsUsed = numSpotsUsed
    def getNumSpotsRejected(self): return self.numSpotsRejected
    def setNumSpotsRejected(self, numSpotsRejected): self.numSpotsRejected = numSpotsRejected
    def getMosaicity(self): return self.mosaicity
    def setMosaicity(self, mosaicity): self.mosaicity = mosaicity
    def getIOverSigma(self): return self.iOverSigma
    def setIOverSigma(self, iOverSigma): self.iOverSigma = iOverSigma
    def getDiffractionRings(self): return self.diffractionRings
    def setDiffractionRings(self, diffractionRings): self.diffractionRings = diffractionRings
    def getScreeningSuccess(self): return self.screeningSuccess
    def setScreeningSuccess(self, screeningSuccess): self.screeningSuccess = screeningSuccess
    def getMosaicityEstimated(self): return self.mosaicityEstimated
    def setMosaicityEstimated(self, mosaicityEstimated): self.mosaicityEstimated = mosaicityEstimated
    def export(self, outfile, level = 0, name_='ScreeningOutput'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='ScreeningOutput'):
        pass
    def exportChildren(self, outfile, level, name_='ScreeningOutput'):
        showIndent(outfile, level)
        outfile.write('<screeningOutputId>%s</screeningOutputId>\n' % quote_xml(self.getScreeningOutputId()))
        showIndent(outfile, level)
        outfile.write('<screeningId>%s</screeningId>\n' % quote_xml(self.getScreeningId()))
        showIndent(outfile, level)
        outfile.write('<statusDescription>%s</statusDescription>\n' % quote_xml(self.getStatusDescription()))
        showIndent(outfile, level)
        outfile.write('<rejectedReflections>%s</rejectedReflections>\n' % quote_xml(self.getRejectedReflections()))
        showIndent(outfile, level)
        outfile.write('<resolutionObtained>%e</resolutionObtained>\n' % self.getResolutionObtained())
        showIndent(outfile, level)
        outfile.write('<spotDeviationR>%e</spotDeviationR>\n' % self.getSpotDeviationR())
        showIndent(outfile, level)
        outfile.write('<spotDeviationTheta>%e</spotDeviationTheta>\n' % self.getSpotDeviationTheta())
        showIndent(outfile, level)
        outfile.write('<beamShiftX>%e</beamShiftX>\n' % self.getBeamShiftX())
        showIndent(outfile, level)
        outfile.write('<beamShiftY>%e</beamShiftY>\n' % self.getBeamShiftY())
        showIndent(outfile, level)
        outfile.write('<numSpotsFound>%s</numSpotsFound>\n' % quote_xml(self.getNumSpotsFound()))
        showIndent(outfile, level)
        outfile.write('<numSpotsUsed>%s</numSpotsUsed>\n' % quote_xml(self.getNumSpotsUsed()))
        showIndent(outfile, level)
        outfile.write('<numSpotsRejected>%s</numSpotsRejected>\n' % quote_xml(self.getNumSpotsRejected()))
        showIndent(outfile, level)
        outfile.write('<mosaicity>%e</mosaicity>\n' % self.getMosaicity())
        showIndent(outfile, level)
        outfile.write('<iOverSigma>%e</iOverSigma>\n' % self.getIOverSigma())
        showIndent(outfile, level)
        outfile.write('<diffractionRings>%s</diffractionRings>\n' % self.getDiffractionRings())
        showIndent(outfile, level)
        outfile.write('<screeningSuccess>%s</screeningSuccess>\n' % self.getScreeningSuccess())
        showIndent(outfile, level)
        outfile.write('<mosaicityEstimated>%s</mosaicityEstimated>\n' % self.getMosaicityEstimated())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='ScreeningOutput' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">ScreeningOutput:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='ScreeningOutput' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = ScreeningOutput.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="ScreeningOutput" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='ScreeningOutput'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('screeningOutputId = %s,\n' % quote_python(self.getScreeningOutputId()))
        showIndent(outfile, level)
        outfile.write('screeningId = %s,\n' % quote_python(self.getScreeningId()))
        showIndent(outfile, level)
        outfile.write('statusDescription = %s,\n' % quote_python(self.getStatusDescription()))
        showIndent(outfile, level)
        outfile.write('rejectedReflections = %s,\n' % quote_python(self.getRejectedReflections()))
        showIndent(outfile, level)
        outfile.write('resolutionObtained = %e,\n' % self.getResolutionObtained())
        showIndent(outfile, level)
        outfile.write('spotDeviationR = %e,\n' % self.getSpotDeviationR())
        showIndent(outfile, level)
        outfile.write('spotDeviationTheta = %e,\n' % self.getSpotDeviationTheta())
        showIndent(outfile, level)
        outfile.write('beamShiftX = %e,\n' % self.getBeamShiftX())
        showIndent(outfile, level)
        outfile.write('beamShiftY = %e,\n' % self.getBeamShiftY())
        showIndent(outfile, level)
        outfile.write('numSpotsFound = %s,\n' % quote_python(self.getNumSpotsFound()))
        showIndent(outfile, level)
        outfile.write('numSpotsUsed = %s,\n' % quote_python(self.getNumSpotsUsed()))
        showIndent(outfile, level)
        outfile.write('numSpotsRejected = %s,\n' % quote_python(self.getNumSpotsRejected()))
        showIndent(outfile, level)
        outfile.write('mosaicity = %e,\n' % self.getMosaicity())
        showIndent(outfile, level)
        outfile.write('iOverSigma = %e,\n' % self.getIOverSigma())
        showIndent(outfile, level)
        outfile.write('diffractionRings = %s,\n' % self.getDiffractionRings())
        showIndent(outfile, level)
        outfile.write('screeningSuccess = %s,\n' % self.getScreeningSuccess())
        showIndent(outfile, level)
        outfile.write('mosaicityEstimated = %s,\n' % self.getMosaicityEstimated())
    def exportLiteralHtml(self, outfile, level = 0, name_='ScreeningOutput'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('screeningOutputId = <a  href:"#">%s</a><br>\n' % quote_python(self.getScreeningOutputId()))
        showIndentHtml(outfile, level)
        outfile.write('screeningId = <a  href:"#">%s</a><br>\n' % quote_python(self.getScreeningId()))
        showIndentHtml(outfile, level)
        outfile.write('statusDescription = <a  href:"#">%s</a><br>\n' % quote_python(self.getStatusDescription()))
        showIndentHtml(outfile, level)
        outfile.write('rejectedReflections = <a  href:"#">%s</a><br>\n' % quote_python(self.getRejectedReflections()))
        showIndentHtml(outfile, level)
        outfile.write('resolutionObtained = <a  href:"#">%e</a><br>\n' % self.getResolutionObtained())
        showIndentHtml(outfile, level)
        outfile.write('spotDeviationR = <a  href:"#">%e</a><br>\n' % self.getSpotDeviationR())
        showIndentHtml(outfile, level)
        outfile.write('spotDeviationTheta = <a  href:"#">%e</a><br>\n' % self.getSpotDeviationTheta())
        showIndentHtml(outfile, level)
        outfile.write('beamShiftX = <a  href:"#">%e</a><br>\n' % self.getBeamShiftX())
        showIndentHtml(outfile, level)
        outfile.write('beamShiftY = <a  href:"#">%e</a><br>\n' % self.getBeamShiftY())
        showIndentHtml(outfile, level)
        outfile.write('numSpotsFound = <a  href:"#">%s</a><br>\n' % quote_python(self.getNumSpotsFound()))
        showIndentHtml(outfile, level)
        outfile.write('numSpotsUsed = <a  href:"#">%s</a><br>\n' % quote_python(self.getNumSpotsUsed()))
        showIndentHtml(outfile, level)
        outfile.write('numSpotsRejected = <a  href:"#">%s</a><br>\n' % quote_python(self.getNumSpotsRejected()))
        showIndentHtml(outfile, level)
        outfile.write('mosaicity = <a  href:"#">%e</a><br>\n' % self.getMosaicity())
        showIndentHtml(outfile, level)
        outfile.write('iOverSigma = <a  href:"#">%e</a><br>\n' % self.getIOverSigma())
        showIndentHtml(outfile, level)
        outfile.write('diffractionRings = <a  href:"#">%s</a><br>\n' % self.getDiffractionRings())
        showIndentHtml(outfile, level)
        outfile.write('screeningSuccess = <a  href:"#">%s</a><br>\n' % self.getScreeningSuccess())
        showIndentHtml(outfile, level)
        outfile.write('mosaicityEstimated = <a  href:"#">%s</a><br>\n' % self.getMosaicityEstimated())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningOutputId':
            screeningOutputId_ = ''
            for text__content_ in child_.childNodes:
                screeningOutputId_ += text__content_.nodeValue
            self.screeningOutputId = screeningOutputId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningId':
            screeningId_ = ''
            for text__content_ in child_.childNodes:
                screeningId_ += text__content_.nodeValue
            self.screeningId = screeningId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'statusDescription':
            statusDescription_ = ''
            for text__content_ in child_.childNodes:
                statusDescription_ += text__content_.nodeValue
            self.statusDescription = statusDescription_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rejectedReflections':
            rejectedReflections_ = ''
            for text__content_ in child_.childNodes:
                rejectedReflections_ += text__content_.nodeValue
            self.rejectedReflections = rejectedReflections_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'resolutionObtained':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.resolutionObtained = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'spotDeviationR':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.spotDeviationR = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'spotDeviationTheta':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.spotDeviationTheta = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'beamShiftX':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.beamShiftX = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'beamShiftY':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.beamShiftY = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'numSpotsFound':
            numSpotsFound_ = ''
            for text__content_ in child_.childNodes:
                numSpotsFound_ += text__content_.nodeValue
            self.numSpotsFound = numSpotsFound_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'numSpotsUsed':
            numSpotsUsed_ = ''
            for text__content_ in child_.childNodes:
                numSpotsUsed_ += text__content_.nodeValue
            self.numSpotsUsed = numSpotsUsed_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'numSpotsRejected':
            numSpotsRejected_ = ''
            for text__content_ in child_.childNodes:
                numSpotsRejected_ += text__content_.nodeValue
            self.numSpotsRejected = numSpotsRejected_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'mosaicity':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.mosaicity = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'iOverSigma':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.iOverSigma = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'diffractionRings':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', 'True', '1'):
                    ival_ = True
                elif sval_ in ('false', 'False', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.diffractionRings = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningSuccess':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', 'True', '1'):
                    ival_ = True
                elif sval_ in ('false', 'False', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.screeningSuccess = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'mosaicityEstimated':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', 'True', '1'):
                    ival_ = True
                elif sval_ in ('false', 'False', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.mosaicityEstimated = ival_
# end class ScreeningOutput


class ScreeningOutputLattice(object):
    subclass = None
    def __init__(self, screeningOutputLatticeId='', screeningOutputId='', spaceGroup='', pointGroup='', bravaisLattice='', rawOrientationMatrix_a_x=0.0, rawOrientationMatrix_a_y=0.0, rawOrientationMatrix_a_z=0.0, rawOrientationMatrix_b_x=0.0, rawOrientationMatrix_b_y=0.0, rawOrientationMatrix_b_z=0.0, rawOrientationMatrix_c_x=0.0, rawOrientationMatrix_c_y=0.0, rawOrientationMatrix_c_z=0.0, unitCell_a=0.0, unitCell_b=0.0, unitCell_c=0.0, unitCell_alpha=0.0, unitCell_beta=0.0, unitCell_gamma=0.0, timeStamp=''):
        self.screeningOutputLatticeId = screeningOutputLatticeId
        self.screeningOutputId = screeningOutputId
        self.spaceGroup = spaceGroup
        self.pointGroup = pointGroup
        self.bravaisLattice = bravaisLattice
        self.rawOrientationMatrix_a_x = rawOrientationMatrix_a_x
        self.rawOrientationMatrix_a_y = rawOrientationMatrix_a_y
        self.rawOrientationMatrix_a_z = rawOrientationMatrix_a_z
        self.rawOrientationMatrix_b_x = rawOrientationMatrix_b_x
        self.rawOrientationMatrix_b_y = rawOrientationMatrix_b_y
        self.rawOrientationMatrix_b_z = rawOrientationMatrix_b_z
        self.rawOrientationMatrix_c_x = rawOrientationMatrix_c_x
        self.rawOrientationMatrix_c_y = rawOrientationMatrix_c_y
        self.rawOrientationMatrix_c_z = rawOrientationMatrix_c_z
        self.unitCell_a = unitCell_a
        self.unitCell_b = unitCell_b
        self.unitCell_c = unitCell_c
        self.unitCell_alpha = unitCell_alpha
        self.unitCell_beta = unitCell_beta
        self.unitCell_gamma = unitCell_gamma
        self.timeStamp = timeStamp
    def factory(*args_, **kwargs_):
        if ScreeningOutputLattice.subclass:
            return ScreeningOutputLattice.subclass(*args_, **kwargs_)
        else:
            return ScreeningOutputLattice(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getScreeningOutputLatticeId(self): return self.screeningOutputLatticeId
    def setScreeningOutputLatticeId(self, screeningOutputLatticeId): self.screeningOutputLatticeId = screeningOutputLatticeId
    def getScreeningOutputId(self): return self.screeningOutputId
    def setScreeningOutputId(self, screeningOutputId): self.screeningOutputId = screeningOutputId
    def getSpaceGroup(self): return self.spaceGroup
    def setSpaceGroup(self, spaceGroup): self.spaceGroup = spaceGroup
    def getPointGroup(self): return self.pointGroup
    def setPointGroup(self, pointGroup): self.pointGroup = pointGroup
    def getBravaisLattice(self): return self.bravaisLattice
    def setBravaisLattice(self, bravaisLattice): self.bravaisLattice = bravaisLattice
    def getRawOrientationMatrix_a_x(self): return self.rawOrientationMatrix_a_x
    def setRawOrientationMatrix_a_x(self, rawOrientationMatrix_a_x): self.rawOrientationMatrix_a_x = rawOrientationMatrix_a_x
    def getRawOrientationMatrix_a_y(self): return self.rawOrientationMatrix_a_y
    def setRawOrientationMatrix_a_y(self, rawOrientationMatrix_a_y): self.rawOrientationMatrix_a_y = rawOrientationMatrix_a_y
    def getRawOrientationMatrix_a_z(self): return self.rawOrientationMatrix_a_z
    def setRawOrientationMatrix_a_z(self, rawOrientationMatrix_a_z): self.rawOrientationMatrix_a_z = rawOrientationMatrix_a_z
    def getRawOrientationMatrix_b_x(self): return self.rawOrientationMatrix_b_x
    def setRawOrientationMatrix_b_x(self, rawOrientationMatrix_b_x): self.rawOrientationMatrix_b_x = rawOrientationMatrix_b_x
    def getRawOrientationMatrix_b_y(self): return self.rawOrientationMatrix_b_y
    def setRawOrientationMatrix_b_y(self, rawOrientationMatrix_b_y): self.rawOrientationMatrix_b_y = rawOrientationMatrix_b_y
    def getRawOrientationMatrix_b_z(self): return self.rawOrientationMatrix_b_z
    def setRawOrientationMatrix_b_z(self, rawOrientationMatrix_b_z): self.rawOrientationMatrix_b_z = rawOrientationMatrix_b_z
    def getRawOrientationMatrix_c_x(self): return self.rawOrientationMatrix_c_x
    def setRawOrientationMatrix_c_x(self, rawOrientationMatrix_c_x): self.rawOrientationMatrix_c_x = rawOrientationMatrix_c_x
    def getRawOrientationMatrix_c_y(self): return self.rawOrientationMatrix_c_y
    def setRawOrientationMatrix_c_y(self, rawOrientationMatrix_c_y): self.rawOrientationMatrix_c_y = rawOrientationMatrix_c_y
    def getRawOrientationMatrix_c_z(self): return self.rawOrientationMatrix_c_z
    def setRawOrientationMatrix_c_z(self, rawOrientationMatrix_c_z): self.rawOrientationMatrix_c_z = rawOrientationMatrix_c_z
    def getUnitCell_a(self): return self.unitCell_a
    def setUnitCell_a(self, unitCell_a): self.unitCell_a = unitCell_a
    def getUnitCell_b(self): return self.unitCell_b
    def setUnitCell_b(self, unitCell_b): self.unitCell_b = unitCell_b
    def getUnitCell_c(self): return self.unitCell_c
    def setUnitCell_c(self, unitCell_c): self.unitCell_c = unitCell_c
    def getUnitCell_alpha(self): return self.unitCell_alpha
    def setUnitCell_alpha(self, unitCell_alpha): self.unitCell_alpha = unitCell_alpha
    def getUnitCell_beta(self): return self.unitCell_beta
    def setUnitCell_beta(self, unitCell_beta): self.unitCell_beta = unitCell_beta
    def getUnitCell_gamma(self): return self.unitCell_gamma
    def setUnitCell_gamma(self, unitCell_gamma): self.unitCell_gamma = unitCell_gamma
    def getTimeStamp(self): return self.timeStamp
    def setTimeStamp(self, timeStamp): self.timeStamp = timeStamp
    def export(self, outfile, level = 0, name_='ScreeningOutputLattice'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='ScreeningOutputLattice'):
        pass
    def exportChildren(self, outfile, level, name_='ScreeningOutputLattice'):
        showIndent(outfile, level)
        outfile.write('<screeningOutputLatticeId>%s</screeningOutputLatticeId>\n' % quote_xml(self.getScreeningOutputLatticeId()))
        showIndent(outfile, level)
        outfile.write('<screeningOutputId>%s</screeningOutputId>\n' % quote_xml(self.getScreeningOutputId()))
        showIndent(outfile, level)
        outfile.write('<spaceGroup>%s</spaceGroup>\n' % quote_xml(self.getSpaceGroup()))
        showIndent(outfile, level)
        outfile.write('<pointGroup>%s</pointGroup>\n' % quote_xml(self.getPointGroup()))
        showIndent(outfile, level)
        outfile.write('<bravaisLattice>%s</bravaisLattice>\n' % quote_xml(self.getBravaisLattice()))
        showIndent(outfile, level)
        outfile.write('<rawOrientationMatrix_a_x>%e</rawOrientationMatrix_a_x>\n' % self.getRawOrientationMatrix_a_x())
        showIndent(outfile, level)
        outfile.write('<rawOrientationMatrix_a_y>%e</rawOrientationMatrix_a_y>\n' % self.getRawOrientationMatrix_a_y())
        showIndent(outfile, level)
        outfile.write('<rawOrientationMatrix_a_z>%e</rawOrientationMatrix_a_z>\n' % self.getRawOrientationMatrix_a_z())
        showIndent(outfile, level)
        outfile.write('<rawOrientationMatrix_b_x>%e</rawOrientationMatrix_b_x>\n' % self.getRawOrientationMatrix_b_x())
        showIndent(outfile, level)
        outfile.write('<rawOrientationMatrix_b_y>%e</rawOrientationMatrix_b_y>\n' % self.getRawOrientationMatrix_b_y())
        showIndent(outfile, level)
        outfile.write('<rawOrientationMatrix_b_z>%e</rawOrientationMatrix_b_z>\n' % self.getRawOrientationMatrix_b_z())
        showIndent(outfile, level)
        outfile.write('<rawOrientationMatrix_c_x>%e</rawOrientationMatrix_c_x>\n' % self.getRawOrientationMatrix_c_x())
        showIndent(outfile, level)
        outfile.write('<rawOrientationMatrix_c_y>%e</rawOrientationMatrix_c_y>\n' % self.getRawOrientationMatrix_c_y())
        showIndent(outfile, level)
        outfile.write('<rawOrientationMatrix_c_z>%e</rawOrientationMatrix_c_z>\n' % self.getRawOrientationMatrix_c_z())
        showIndent(outfile, level)
        outfile.write('<unitCell_a>%e</unitCell_a>\n' % self.getUnitCell_a())
        showIndent(outfile, level)
        outfile.write('<unitCell_b>%e</unitCell_b>\n' % self.getUnitCell_b())
        showIndent(outfile, level)
        outfile.write('<unitCell_c>%e</unitCell_c>\n' % self.getUnitCell_c())
        showIndent(outfile, level)
        outfile.write('<unitCell_alpha>%e</unitCell_alpha>\n' % self.getUnitCell_alpha())
        showIndent(outfile, level)
        outfile.write('<unitCell_beta>%e</unitCell_beta>\n' % self.getUnitCell_beta())
        showIndent(outfile, level)
        outfile.write('<unitCell_gamma>%e</unitCell_gamma>\n' % self.getUnitCell_gamma())
        showIndent(outfile, level)
        outfile.write('<timeStamp>%s</timeStamp>\n' % quote_xml(self.getTimeStamp()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='ScreeningOutputLattice' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">ScreeningOutputLattice:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='ScreeningOutputLattice' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = ScreeningOutputLattice.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="ScreeningOutputLattice" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='ScreeningOutputLattice'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('screeningOutputLatticeId = %s,\n' % quote_python(self.getScreeningOutputLatticeId()))
        showIndent(outfile, level)
        outfile.write('screeningOutputId = %s,\n' % quote_python(self.getScreeningOutputId()))
        showIndent(outfile, level)
        outfile.write('spaceGroup = %s,\n' % quote_python(self.getSpaceGroup()))
        showIndent(outfile, level)
        outfile.write('pointGroup = %s,\n' % quote_python(self.getPointGroup()))
        showIndent(outfile, level)
        outfile.write('bravaisLattice = %s,\n' % quote_python(self.getBravaisLattice()))
        showIndent(outfile, level)
        outfile.write('rawOrientationMatrix_a_x = %e,\n' % self.getRawOrientationMatrix_a_x())
        showIndent(outfile, level)
        outfile.write('rawOrientationMatrix_a_y = %e,\n' % self.getRawOrientationMatrix_a_y())
        showIndent(outfile, level)
        outfile.write('rawOrientationMatrix_a_z = %e,\n' % self.getRawOrientationMatrix_a_z())
        showIndent(outfile, level)
        outfile.write('rawOrientationMatrix_b_x = %e,\n' % self.getRawOrientationMatrix_b_x())
        showIndent(outfile, level)
        outfile.write('rawOrientationMatrix_b_y = %e,\n' % self.getRawOrientationMatrix_b_y())
        showIndent(outfile, level)
        outfile.write('rawOrientationMatrix_b_z = %e,\n' % self.getRawOrientationMatrix_b_z())
        showIndent(outfile, level)
        outfile.write('rawOrientationMatrix_c_x = %e,\n' % self.getRawOrientationMatrix_c_x())
        showIndent(outfile, level)
        outfile.write('rawOrientationMatrix_c_y = %e,\n' % self.getRawOrientationMatrix_c_y())
        showIndent(outfile, level)
        outfile.write('rawOrientationMatrix_c_z = %e,\n' % self.getRawOrientationMatrix_c_z())
        showIndent(outfile, level)
        outfile.write('unitCell_a = %e,\n' % self.getUnitCell_a())
        showIndent(outfile, level)
        outfile.write('unitCell_b = %e,\n' % self.getUnitCell_b())
        showIndent(outfile, level)
        outfile.write('unitCell_c = %e,\n' % self.getUnitCell_c())
        showIndent(outfile, level)
        outfile.write('unitCell_alpha = %e,\n' % self.getUnitCell_alpha())
        showIndent(outfile, level)
        outfile.write('unitCell_beta = %e,\n' % self.getUnitCell_beta())
        showIndent(outfile, level)
        outfile.write('unitCell_gamma = %e,\n' % self.getUnitCell_gamma())
        showIndent(outfile, level)
        outfile.write('timeStamp = %s,\n' % quote_python(self.getTimeStamp()))
    def exportLiteralHtml(self, outfile, level = 0, name_='ScreeningOutputLattice'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('screeningOutputLatticeId = <a  href:"#">%s</a><br>\n' % quote_python(self.getScreeningOutputLatticeId()))
        showIndentHtml(outfile, level)
        outfile.write('screeningOutputId = <a  href:"#">%s</a><br>\n' % quote_python(self.getScreeningOutputId()))
        showIndentHtml(outfile, level)
        outfile.write('spaceGroup = <a  href:"#">%s</a><br>\n' % quote_python(self.getSpaceGroup()))
        showIndentHtml(outfile, level)
        outfile.write('pointGroup = <a  href:"#">%s</a><br>\n' % quote_python(self.getPointGroup()))
        showIndentHtml(outfile, level)
        outfile.write('bravaisLattice = <a  href:"#">%s</a><br>\n' % quote_python(self.getBravaisLattice()))
        showIndentHtml(outfile, level)
        outfile.write('rawOrientationMatrix_a_x = <a  href:"#">%e</a><br>\n' % self.getRawOrientationMatrix_a_x())
        showIndentHtml(outfile, level)
        outfile.write('rawOrientationMatrix_a_y = <a  href:"#">%e</a><br>\n' % self.getRawOrientationMatrix_a_y())
        showIndentHtml(outfile, level)
        outfile.write('rawOrientationMatrix_a_z = <a  href:"#">%e</a><br>\n' % self.getRawOrientationMatrix_a_z())
        showIndentHtml(outfile, level)
        outfile.write('rawOrientationMatrix_b_x = <a  href:"#">%e</a><br>\n' % self.getRawOrientationMatrix_b_x())
        showIndentHtml(outfile, level)
        outfile.write('rawOrientationMatrix_b_y = <a  href:"#">%e</a><br>\n' % self.getRawOrientationMatrix_b_y())
        showIndentHtml(outfile, level)
        outfile.write('rawOrientationMatrix_b_z = <a  href:"#">%e</a><br>\n' % self.getRawOrientationMatrix_b_z())
        showIndentHtml(outfile, level)
        outfile.write('rawOrientationMatrix_c_x = <a  href:"#">%e</a><br>\n' % self.getRawOrientationMatrix_c_x())
        showIndentHtml(outfile, level)
        outfile.write('rawOrientationMatrix_c_y = <a  href:"#">%e</a><br>\n' % self.getRawOrientationMatrix_c_y())
        showIndentHtml(outfile, level)
        outfile.write('rawOrientationMatrix_c_z = <a  href:"#">%e</a><br>\n' % self.getRawOrientationMatrix_c_z())
        showIndentHtml(outfile, level)
        outfile.write('unitCell_a = <a  href:"#">%e</a><br>\n' % self.getUnitCell_a())
        showIndentHtml(outfile, level)
        outfile.write('unitCell_b = <a  href:"#">%e</a><br>\n' % self.getUnitCell_b())
        showIndentHtml(outfile, level)
        outfile.write('unitCell_c = <a  href:"#">%e</a><br>\n' % self.getUnitCell_c())
        showIndentHtml(outfile, level)
        outfile.write('unitCell_alpha = <a  href:"#">%e</a><br>\n' % self.getUnitCell_alpha())
        showIndentHtml(outfile, level)
        outfile.write('unitCell_beta = <a  href:"#">%e</a><br>\n' % self.getUnitCell_beta())
        showIndentHtml(outfile, level)
        outfile.write('unitCell_gamma = <a  href:"#">%e</a><br>\n' % self.getUnitCell_gamma())
        showIndentHtml(outfile, level)
        outfile.write('timeStamp = <a  href:"#">%s</a><br>\n' % quote_python(self.getTimeStamp()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningOutputLatticeId':
            screeningOutputLatticeId_ = ''
            for text__content_ in child_.childNodes:
                screeningOutputLatticeId_ += text__content_.nodeValue
            self.screeningOutputLatticeId = screeningOutputLatticeId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningOutputId':
            screeningOutputId_ = ''
            for text__content_ in child_.childNodes:
                screeningOutputId_ += text__content_.nodeValue
            self.screeningOutputId = screeningOutputId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'spaceGroup':
            spaceGroup_ = ''
            for text__content_ in child_.childNodes:
                spaceGroup_ += text__content_.nodeValue
            self.spaceGroup = spaceGroup_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'pointGroup':
            pointGroup_ = ''
            for text__content_ in child_.childNodes:
                pointGroup_ += text__content_.nodeValue
            self.pointGroup = pointGroup_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'bravaisLattice':
            bravaisLattice_ = ''
            for text__content_ in child_.childNodes:
                bravaisLattice_ += text__content_.nodeValue
            self.bravaisLattice = bravaisLattice_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rawOrientationMatrix_a_x':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.rawOrientationMatrix_a_x = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rawOrientationMatrix_a_y':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.rawOrientationMatrix_a_y = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rawOrientationMatrix_a_z':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.rawOrientationMatrix_a_z = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rawOrientationMatrix_b_x':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.rawOrientationMatrix_b_x = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rawOrientationMatrix_b_y':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.rawOrientationMatrix_b_y = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rawOrientationMatrix_b_z':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.rawOrientationMatrix_b_z = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rawOrientationMatrix_c_x':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.rawOrientationMatrix_c_x = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rawOrientationMatrix_c_y':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.rawOrientationMatrix_c_y = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rawOrientationMatrix_c_z':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.rawOrientationMatrix_c_z = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'unitCell_a':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.unitCell_a = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'unitCell_b':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.unitCell_b = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'unitCell_c':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.unitCell_c = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'unitCell_alpha':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.unitCell_alpha = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'unitCell_beta':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.unitCell_beta = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'unitCell_gamma':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.unitCell_gamma = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'timeStamp':
            timeStamp_ = ''
            for text__content_ in child_.childNodes:
                timeStamp_ += text__content_.nodeValue
            self.timeStamp = timeStamp_
# end class ScreeningOutputLattice


class ScreeningRank(object):
    subclass = None
    def __init__(self, screeningRankId='', screeningRankSetId='', screeningId='', rankValue=0.0, rankInformation=''):
        self.screeningRankId = screeningRankId
        self.screeningRankSetId = screeningRankSetId
        self.screeningId = screeningId
        self.rankValue = rankValue
        self.rankInformation = rankInformation
    def factory(*args_, **kwargs_):
        if ScreeningRank.subclass:
            return ScreeningRank.subclass(*args_, **kwargs_)
        else:
            return ScreeningRank(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getScreeningRankId(self): return self.screeningRankId
    def setScreeningRankId(self, screeningRankId): self.screeningRankId = screeningRankId
    def getScreeningRankSetId(self): return self.screeningRankSetId
    def setScreeningRankSetId(self, screeningRankSetId): self.screeningRankSetId = screeningRankSetId
    def getScreeningId(self): return self.screeningId
    def setScreeningId(self, screeningId): self.screeningId = screeningId
    def getRankValue(self): return self.rankValue
    def setRankValue(self, rankValue): self.rankValue = rankValue
    def getRankInformation(self): return self.rankInformation
    def setRankInformation(self, rankInformation): self.rankInformation = rankInformation
    def export(self, outfile, level = 0, name_='ScreeningRank'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='ScreeningRank'):
        pass
    def exportChildren(self, outfile, level, name_='ScreeningRank'):
        showIndent(outfile, level)
        outfile.write('<screeningRankId>%s</screeningRankId>\n' % quote_xml(self.getScreeningRankId()))
        showIndent(outfile, level)
        outfile.write('<screeningRankSetId>%s</screeningRankSetId>\n' % quote_xml(self.getScreeningRankSetId()))
        showIndent(outfile, level)
        outfile.write('<screeningId>%s</screeningId>\n' % quote_xml(self.getScreeningId()))
        showIndent(outfile, level)
        outfile.write('<rankValue>%e</rankValue>\n' % self.getRankValue())
        showIndent(outfile, level)
        outfile.write('<rankInformation>%s</rankInformation>\n' % quote_xml(self.getRankInformation()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='ScreeningRank' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">ScreeningRank:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='ScreeningRank' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = ScreeningRank.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="ScreeningRank" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='ScreeningRank'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('screeningRankId = %s,\n' % quote_python(self.getScreeningRankId()))
        showIndent(outfile, level)
        outfile.write('screeningRankSetId = %s,\n' % quote_python(self.getScreeningRankSetId()))
        showIndent(outfile, level)
        outfile.write('screeningId = %s,\n' % quote_python(self.getScreeningId()))
        showIndent(outfile, level)
        outfile.write('rankValue = %e,\n' % self.getRankValue())
        showIndent(outfile, level)
        outfile.write('rankInformation = %s,\n' % quote_python(self.getRankInformation()))
    def exportLiteralHtml(self, outfile, level = 0, name_='ScreeningRank'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('screeningRankId = <a  href:"#">%s</a><br>\n' % quote_python(self.getScreeningRankId()))
        showIndentHtml(outfile, level)
        outfile.write('screeningRankSetId = <a  href:"#">%s</a><br>\n' % quote_python(self.getScreeningRankSetId()))
        showIndentHtml(outfile, level)
        outfile.write('screeningId = <a  href:"#">%s</a><br>\n' % quote_python(self.getScreeningId()))
        showIndentHtml(outfile, level)
        outfile.write('rankValue = <a  href:"#">%e</a><br>\n' % self.getRankValue())
        showIndentHtml(outfile, level)
        outfile.write('rankInformation = <a  href:"#">%s</a><br>\n' % quote_python(self.getRankInformation()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningRankId':
            screeningRankId_ = ''
            for text__content_ in child_.childNodes:
                screeningRankId_ += text__content_.nodeValue
            self.screeningRankId = screeningRankId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningRankSetId':
            screeningRankSetId_ = ''
            for text__content_ in child_.childNodes:
                screeningRankSetId_ += text__content_.nodeValue
            self.screeningRankSetId = screeningRankSetId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningId':
            screeningId_ = ''
            for text__content_ in child_.childNodes:
                screeningId_ += text__content_.nodeValue
            self.screeningId = screeningId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rankValue':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.rankValue = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rankInformation':
            rankInformation_ = ''
            for text__content_ in child_.childNodes:
                rankInformation_ += text__content_.nodeValue
            self.rankInformation = rankInformation_
# end class ScreeningRank


class ScreeningRankSet(object):
    subclass = None
    def __init__(self, screeningRankSetId='', rankEngine='', rankingProjectFileName='', rankingSummaryFileName=''):
        self.screeningRankSetId = screeningRankSetId
        self.rankEngine = rankEngine
        self.rankingProjectFileName = rankingProjectFileName
        self.rankingSummaryFileName = rankingSummaryFileName
    def factory(*args_, **kwargs_):
        if ScreeningRankSet.subclass:
            return ScreeningRankSet.subclass(*args_, **kwargs_)
        else:
            return ScreeningRankSet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getScreeningRankSetId(self): return self.screeningRankSetId
    def setScreeningRankSetId(self, screeningRankSetId): self.screeningRankSetId = screeningRankSetId
    def getRankEngine(self): return self.rankEngine
    def setRankEngine(self, rankEngine): self.rankEngine = rankEngine
    def getRankingProjectFileName(self): return self.rankingProjectFileName
    def setRankingProjectFileName(self, rankingProjectFileName): self.rankingProjectFileName = rankingProjectFileName
    def getRankingSummaryFileName(self): return self.rankingSummaryFileName
    def setRankingSummaryFileName(self, rankingSummaryFileName): self.rankingSummaryFileName = rankingSummaryFileName
    def export(self, outfile, level = 0, name_='ScreeningRankSet'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='ScreeningRankSet'):
        pass
    def exportChildren(self, outfile, level, name_='ScreeningRankSet'):
        showIndent(outfile, level)
        outfile.write('<screeningRankSetId>%s</screeningRankSetId>\n' % quote_xml(self.getScreeningRankSetId()))
        showIndent(outfile, level)
        outfile.write('<rankEngine>%s</rankEngine>\n' % quote_xml(self.getRankEngine()))
        showIndent(outfile, level)
        outfile.write('<rankingProjectFileName>%s</rankingProjectFileName>\n' % quote_xml(self.getRankingProjectFileName()))
        showIndent(outfile, level)
        outfile.write('<rankingSummaryFileName>%s</rankingSummaryFileName>\n' % quote_xml(self.getRankingSummaryFileName()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='ScreeningRankSet' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">ScreeningRankSet:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='ScreeningRankSet' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = ScreeningRankSet.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="ScreeningRankSet" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='ScreeningRankSet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('screeningRankSetId = %s,\n' % quote_python(self.getScreeningRankSetId()))
        showIndent(outfile, level)
        outfile.write('rankEngine = %s,\n' % quote_python(self.getRankEngine()))
        showIndent(outfile, level)
        outfile.write('rankingProjectFileName = %s,\n' % quote_python(self.getRankingProjectFileName()))
        showIndent(outfile, level)
        outfile.write('rankingSummaryFileName = %s,\n' % quote_python(self.getRankingSummaryFileName()))
    def exportLiteralHtml(self, outfile, level = 0, name_='ScreeningRankSet'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('screeningRankSetId = <a  href:"#">%s</a><br>\n' % quote_python(self.getScreeningRankSetId()))
        showIndentHtml(outfile, level)
        outfile.write('rankEngine = <a  href:"#">%s</a><br>\n' % quote_python(self.getRankEngine()))
        showIndentHtml(outfile, level)
        outfile.write('rankingProjectFileName = <a  href:"#">%s</a><br>\n' % quote_python(self.getRankingProjectFileName()))
        showIndentHtml(outfile, level)
        outfile.write('rankingSummaryFileName = <a  href:"#">%s</a><br>\n' % quote_python(self.getRankingSummaryFileName()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningRankSetId':
            screeningRankSetId_ = ''
            for text__content_ in child_.childNodes:
                screeningRankSetId_ += text__content_.nodeValue
            self.screeningRankSetId = screeningRankSetId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rankEngine':
            rankEngine_ = ''
            for text__content_ in child_.childNodes:
                rankEngine_ += text__content_.nodeValue
            self.rankEngine = rankEngine_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rankingProjectFileName':
            rankingProjectFileName_ = ''
            for text__content_ in child_.childNodes:
                rankingProjectFileName_ += text__content_.nodeValue
            self.rankingProjectFileName = rankingProjectFileName_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rankingSummaryFileName':
            rankingSummaryFileName_ = ''
            for text__content_ in child_.childNodes:
                rankingSummaryFileName_ += text__content_.nodeValue
            self.rankingSummaryFileName = rankingSummaryFileName_
# end class ScreeningRankSet


class ScreeningStrategy(object):
    subclass = None
    def __init__(self, screeningStrategyId='', screeningOutputId='', phiStart=0.0, phiEnd=0.0, rotation=0.0, exposureTime=0.0, resolution=0.0, completeness=0.0, multiplicity=0.0, anomalous=False, program='', rankingResolution=0.0):
        self.screeningStrategyId = screeningStrategyId
        self.screeningOutputId = screeningOutputId
        self.phiStart = phiStart
        self.phiEnd = phiEnd
        self.rotation = rotation
        self.exposureTime = exposureTime
        self.resolution = resolution
        self.completeness = completeness
        self.multiplicity = multiplicity
        self.anomalous = anomalous
        self.program = program
        self.rankingResolution = rankingResolution
    def factory(*args_, **kwargs_):
        if ScreeningStrategy.subclass:
            return ScreeningStrategy.subclass(*args_, **kwargs_)
        else:
            return ScreeningStrategy(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getScreeningStrategyId(self): return self.screeningStrategyId
    def setScreeningStrategyId(self, screeningStrategyId): self.screeningStrategyId = screeningStrategyId
    def getScreeningOutputId(self): return self.screeningOutputId
    def setScreeningOutputId(self, screeningOutputId): self.screeningOutputId = screeningOutputId
    def getPhiStart(self): return self.phiStart
    def setPhiStart(self, phiStart): self.phiStart = phiStart
    def getPhiEnd(self): return self.phiEnd
    def setPhiEnd(self, phiEnd): self.phiEnd = phiEnd
    def getRotation(self): return self.rotation
    def setRotation(self, rotation): self.rotation = rotation
    def getExposureTime(self): return self.exposureTime
    def setExposureTime(self, exposureTime): self.exposureTime = exposureTime
    def getResolution(self): return self.resolution
    def setResolution(self, resolution): self.resolution = resolution
    def getCompleteness(self): return self.completeness
    def setCompleteness(self, completeness): self.completeness = completeness
    def getMultiplicity(self): return self.multiplicity
    def setMultiplicity(self, multiplicity): self.multiplicity = multiplicity
    def getAnomalous(self): return self.anomalous
    def setAnomalous(self, anomalous): self.anomalous = anomalous
    def getProgram(self): return self.program
    def setProgram(self, program): self.program = program
    def getRankingResolution(self): return self.rankingResolution
    def setRankingResolution(self, rankingResolution): self.rankingResolution = rankingResolution
    def export(self, outfile, level = 0, name_='ScreeningStrategy'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='ScreeningStrategy'):
        pass
    def exportChildren(self, outfile, level, name_='ScreeningStrategy'):
        showIndent(outfile, level)
        outfile.write('<screeningStrategyId>%s</screeningStrategyId>\n' % quote_xml(self.getScreeningStrategyId()))
        showIndent(outfile, level)
        outfile.write('<screeningOutputId>%s</screeningOutputId>\n' % quote_xml(self.getScreeningOutputId()))
        showIndent(outfile, level)
        outfile.write('<phiStart>%e</phiStart>\n' % self.getPhiStart())
        showIndent(outfile, level)
        outfile.write('<phiEnd>%e</phiEnd>\n' % self.getPhiEnd())
        showIndent(outfile, level)
        outfile.write('<rotation>%e</rotation>\n' % self.getRotation())
        showIndent(outfile, level)
        outfile.write('<exposureTime>%e</exposureTime>\n' % self.getExposureTime())
        showIndent(outfile, level)
        outfile.write('<resolution>%e</resolution>\n' % self.getResolution())
        showIndent(outfile, level)
        outfile.write('<completeness>%e</completeness>\n' % self.getCompleteness())
        showIndent(outfile, level)
        outfile.write('<multiplicity>%e</multiplicity>\n' % self.getMultiplicity())
        showIndent(outfile, level)
        outfile.write('<anomalous>%s</anomalous>\n' % self.getAnomalous())
        showIndent(outfile, level)
        outfile.write('<program>%s</program>\n' % quote_xml(self.getProgram()))
        showIndent(outfile, level)
        outfile.write('<rankingResolution>%e</rankingResolution>\n' % self.getRankingResolution())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='ScreeningStrategy' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">ScreeningStrategy:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='ScreeningStrategy' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = ScreeningStrategy.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="ScreeningStrategy" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='ScreeningStrategy'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('screeningStrategyId = %s,\n' % quote_python(self.getScreeningStrategyId()))
        showIndent(outfile, level)
        outfile.write('screeningOutputId = %s,\n' % quote_python(self.getScreeningOutputId()))
        showIndent(outfile, level)
        outfile.write('phiStart = %e,\n' % self.getPhiStart())
        showIndent(outfile, level)
        outfile.write('phiEnd = %e,\n' % self.getPhiEnd())
        showIndent(outfile, level)
        outfile.write('rotation = %e,\n' % self.getRotation())
        showIndent(outfile, level)
        outfile.write('exposureTime = %e,\n' % self.getExposureTime())
        showIndent(outfile, level)
        outfile.write('resolution = %e,\n' % self.getResolution())
        showIndent(outfile, level)
        outfile.write('completeness = %e,\n' % self.getCompleteness())
        showIndent(outfile, level)
        outfile.write('multiplicity = %e,\n' % self.getMultiplicity())
        showIndent(outfile, level)
        outfile.write('anomalous = %s,\n' % self.getAnomalous())
        showIndent(outfile, level)
        outfile.write('program = %s,\n' % quote_python(self.getProgram()))
        showIndent(outfile, level)
        outfile.write('rankingResolution = %e,\n' % self.getRankingResolution())
    def exportLiteralHtml(self, outfile, level = 0, name_='ScreeningStrategy'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('screeningStrategyId = <a  href:"#">%s</a><br>\n' % quote_python(self.getScreeningStrategyId()))
        showIndentHtml(outfile, level)
        outfile.write('screeningOutputId = <a  href:"#">%s</a><br>\n' % quote_python(self.getScreeningOutputId()))
        showIndentHtml(outfile, level)
        outfile.write('phiStart = <a  href:"#">%e</a><br>\n' % self.getPhiStart())
        showIndentHtml(outfile, level)
        outfile.write('phiEnd = <a  href:"#">%e</a><br>\n' % self.getPhiEnd())
        showIndentHtml(outfile, level)
        outfile.write('rotation = <a  href:"#">%e</a><br>\n' % self.getRotation())
        showIndentHtml(outfile, level)
        outfile.write('exposureTime = <a  href:"#">%e</a><br>\n' % self.getExposureTime())
        showIndentHtml(outfile, level)
        outfile.write('resolution = <a  href:"#">%e</a><br>\n' % self.getResolution())
        showIndentHtml(outfile, level)
        outfile.write('completeness = <a  href:"#">%e</a><br>\n' % self.getCompleteness())
        showIndentHtml(outfile, level)
        outfile.write('multiplicity = <a  href:"#">%e</a><br>\n' % self.getMultiplicity())
        showIndentHtml(outfile, level)
        outfile.write('anomalous = <a  href:"#">%s</a><br>\n' % self.getAnomalous())
        showIndentHtml(outfile, level)
        outfile.write('program = <a  href:"#">%s</a><br>\n' % quote_python(self.getProgram()))
        showIndentHtml(outfile, level)
        outfile.write('rankingResolution = <a  href:"#">%e</a><br>\n' % self.getRankingResolution())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningStrategyId':
            screeningStrategyId_ = ''
            for text__content_ in child_.childNodes:
                screeningStrategyId_ += text__content_.nodeValue
            self.screeningStrategyId = screeningStrategyId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningOutputId':
            screeningOutputId_ = ''
            for text__content_ in child_.childNodes:
                screeningOutputId_ += text__content_.nodeValue
            self.screeningOutputId = screeningOutputId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'phiStart':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.phiStart = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'phiEnd':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.phiEnd = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rotation':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.rotation = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'exposureTime':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.exposureTime = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'resolution':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.resolution = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'completeness':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.completeness = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'multiplicity':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.multiplicity = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'anomalous':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', 'True', '1'):
                    ival_ = True
                elif sval_ in ('false', 'False', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.anomalous = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'program':
            program_ = ''
            for text__content_ in child_.childNodes:
                program_ += text__content_.nodeValue
            self.program = program_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rankingResolution':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.rankingResolution = fval_
# end class ScreeningStrategy


class Session(object):
    subclass = None
    def __init__(self, sessionId='', beamLineSetupId='', proposalId='', projectCode='', startDate='', endDate='', beamLineName='', scheduled=False, nbShifts='', comments='', beamLineOperator='', timeStamp=''):
        self.sessionId = sessionId
        self.beamLineSetupId = beamLineSetupId
        self.proposalId = proposalId
        self.projectCode = projectCode
        self.startDate = startDate
        self.endDate = endDate
        self.beamLineName = beamLineName
        self.scheduled = scheduled
        self.nbShifts = nbShifts
        self.comments = comments
        self.beamLineOperator = beamLineOperator
        self.timeStamp = timeStamp
    def factory(*args_, **kwargs_):
        if Session.subclass:
            return Session.subclass(*args_, **kwargs_)
        else:
            return Session(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getSessionId(self): return self.sessionId
    def setSessionId(self, sessionId): self.sessionId = sessionId
    def getBeamLineSetupId(self): return self.beamLineSetupId
    def setBeamLineSetupId(self, beamLineSetupId): self.beamLineSetupId = beamLineSetupId
    def getProposalId(self): return self.proposalId
    def setProposalId(self, proposalId): self.proposalId = proposalId
    def getProjectCode(self): return self.projectCode
    def setProjectCode(self, projectCode): self.projectCode = projectCode
    def getStartDate(self): return self.startDate
    def setStartDate(self, startDate): self.startDate = startDate
    def getEndDate(self): return self.endDate
    def setEndDate(self, endDate): self.endDate = endDate
    def getBeamLineName(self): return self.beamLineName
    def setBeamLineName(self, beamLineName): self.beamLineName = beamLineName
    def getScheduled(self): return self.scheduled
    def setScheduled(self, scheduled): self.scheduled = scheduled
    def getNbShifts(self): return self.nbShifts
    def setNbShifts(self, nbShifts): self.nbShifts = nbShifts
    def getComments(self): return self.comments
    def setComments(self, comments): self.comments = comments
    def getBeamLineOperator(self): return self.beamLineOperator
    def setBeamLineOperator(self, beamLineOperator): self.beamLineOperator = beamLineOperator
    def getTimeStamp(self): return self.timeStamp
    def setTimeStamp(self, timeStamp): self.timeStamp = timeStamp
    def export(self, outfile, level = 0, name_='Session'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='Session'):
        pass
    def exportChildren(self, outfile, level, name_='Session'):
        showIndent(outfile, level)
        outfile.write('<sessionId>%s</sessionId>\n' % quote_xml(self.getSessionId()))
        showIndent(outfile, level)
        outfile.write('<beamLineSetupId>%s</beamLineSetupId>\n' % quote_xml(self.getBeamLineSetupId()))
        showIndent(outfile, level)
        outfile.write('<proposalId>%s</proposalId>\n' % quote_xml(self.getProposalId()))
        showIndent(outfile, level)
        outfile.write('<projectCode>%s</projectCode>\n' % quote_xml(self.getProjectCode()))
        showIndent(outfile, level)
        outfile.write('<startDate>%s</startDate>\n' % quote_xml(self.getStartDate()))
        showIndent(outfile, level)
        outfile.write('<endDate>%s</endDate>\n' % quote_xml(self.getEndDate()))
        showIndent(outfile, level)
        outfile.write('<beamLineName>%s</beamLineName>\n' % quote_xml(self.getBeamLineName()))
        showIndent(outfile, level)
        outfile.write('<scheduled>%s</scheduled>\n' % self.getScheduled())
        showIndent(outfile, level)
        outfile.write('<nbShifts>%s</nbShifts>\n' % quote_xml(self.getNbShifts()))
        showIndent(outfile, level)
        outfile.write('<comments>%s</comments>\n' % quote_xml(self.getComments()))
        showIndent(outfile, level)
        outfile.write('<beamLineOperator>%s</beamLineOperator>\n' % quote_xml(self.getBeamLineOperator()))
        showIndent(outfile, level)
        outfile.write('<timeStamp>%s</timeStamp>\n' % quote_xml(self.getTimeStamp()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='Session' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">Session:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='Session' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = Session.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="Session" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='Session'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('sessionId = %s,\n' % quote_python(self.getSessionId()))
        showIndent(outfile, level)
        outfile.write('beamLineSetupId = %s,\n' % quote_python(self.getBeamLineSetupId()))
        showIndent(outfile, level)
        outfile.write('proposalId = %s,\n' % quote_python(self.getProposalId()))
        showIndent(outfile, level)
        outfile.write('projectCode = %s,\n' % quote_python(self.getProjectCode()))
        showIndent(outfile, level)
        outfile.write('startDate = %s,\n' % quote_python(self.getStartDate()))
        showIndent(outfile, level)
        outfile.write('endDate = %s,\n' % quote_python(self.getEndDate()))
        showIndent(outfile, level)
        outfile.write('beamLineName = %s,\n' % quote_python(self.getBeamLineName()))
        showIndent(outfile, level)
        outfile.write('scheduled = %s,\n' % self.getScheduled())
        showIndent(outfile, level)
        outfile.write('nbShifts = %s,\n' % quote_python(self.getNbShifts()))
        showIndent(outfile, level)
        outfile.write('comments = %s,\n' % quote_python(self.getComments()))
        showIndent(outfile, level)
        outfile.write('beamLineOperator = %s,\n' % quote_python(self.getBeamLineOperator()))
        showIndent(outfile, level)
        outfile.write('timeStamp = %s,\n' % quote_python(self.getTimeStamp()))
    def exportLiteralHtml(self, outfile, level = 0, name_='Session'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('sessionId = <a  href:"#">%s</a><br>\n' % quote_python(self.getSessionId()))
        showIndentHtml(outfile, level)
        outfile.write('beamLineSetupId = <a  href:"#">%s</a><br>\n' % quote_python(self.getBeamLineSetupId()))
        showIndentHtml(outfile, level)
        outfile.write('proposalId = <a  href:"#">%s</a><br>\n' % quote_python(self.getProposalId()))
        showIndentHtml(outfile, level)
        outfile.write('projectCode = <a  href:"#">%s</a><br>\n' % quote_python(self.getProjectCode()))
        showIndentHtml(outfile, level)
        outfile.write('startDate = <a  href:"#">%s</a><br>\n' % quote_python(self.getStartDate()))
        showIndentHtml(outfile, level)
        outfile.write('endDate = <a  href:"#">%s</a><br>\n' % quote_python(self.getEndDate()))
        showIndentHtml(outfile, level)
        outfile.write('beamLineName = <a  href:"#">%s</a><br>\n' % quote_python(self.getBeamLineName()))
        showIndentHtml(outfile, level)
        outfile.write('scheduled = <a  href:"#">%s</a><br>\n' % self.getScheduled())
        showIndentHtml(outfile, level)
        outfile.write('nbShifts = <a  href:"#">%s</a><br>\n' % quote_python(self.getNbShifts()))
        showIndentHtml(outfile, level)
        outfile.write('comments = <a  href:"#">%s</a><br>\n' % quote_python(self.getComments()))
        showIndentHtml(outfile, level)
        outfile.write('beamLineOperator = <a  href:"#">%s</a><br>\n' % quote_python(self.getBeamLineOperator()))
        showIndentHtml(outfile, level)
        outfile.write('timeStamp = <a  href:"#">%s</a><br>\n' % quote_python(self.getTimeStamp()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sessionId':
            sessionId_ = ''
            for text__content_ in child_.childNodes:
                sessionId_ += text__content_.nodeValue
            self.sessionId = sessionId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'beamLineSetupId':
            beamLineSetupId_ = ''
            for text__content_ in child_.childNodes:
                beamLineSetupId_ += text__content_.nodeValue
            self.beamLineSetupId = beamLineSetupId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'proposalId':
            proposalId_ = ''
            for text__content_ in child_.childNodes:
                proposalId_ += text__content_.nodeValue
            self.proposalId = proposalId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'projectCode':
            projectCode_ = ''
            for text__content_ in child_.childNodes:
                projectCode_ += text__content_.nodeValue
            self.projectCode = projectCode_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'startDate':
            startDate_ = ''
            for text__content_ in child_.childNodes:
                startDate_ += text__content_.nodeValue
            self.startDate = startDate_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'endDate':
            endDate_ = ''
            for text__content_ in child_.childNodes:
                endDate_ += text__content_.nodeValue
            self.endDate = endDate_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'beamLineName':
            beamLineName_ = ''
            for text__content_ in child_.childNodes:
                beamLineName_ += text__content_.nodeValue
            self.beamLineName = beamLineName_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'scheduled':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', 'True', '1'):
                    ival_ = True
                elif sval_ in ('false', 'False', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.scheduled = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'nbShifts':
            nbShifts_ = ''
            for text__content_ in child_.childNodes:
                nbShifts_ += text__content_.nodeValue
            self.nbShifts = nbShifts_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'comments':
            comments_ = ''
            for text__content_ in child_.childNodes:
                comments_ += text__content_.nodeValue
            self.comments = comments_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'beamLineOperator':
            beamLineOperator_ = ''
            for text__content_ in child_.childNodes:
                beamLineOperator_ += text__content_.nodeValue
            self.beamLineOperator = beamLineOperator_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'timeStamp':
            timeStamp_ = ''
            for text__content_ in child_.childNodes:
                timeStamp_ += text__content_.nodeValue
            self.timeStamp = timeStamp_
# end class Session


class Session_has_Person(object):
    subclass = None
    def __init__(self, sessionId='', personId='', role=''):
        self.sessionId = sessionId
        self.personId = personId
        self.role = role
    def factory(*args_, **kwargs_):
        if Session_has_Person.subclass:
            return Session_has_Person.subclass(*args_, **kwargs_)
        else:
            return Session_has_Person(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getSessionId(self): return self.sessionId
    def setSessionId(self, sessionId): self.sessionId = sessionId
    def getPersonId(self): return self.personId
    def setPersonId(self, personId): self.personId = personId
    def getRole(self): return self.role
    def setRole(self, role): self.role = role
    def export(self, outfile, level = 0, name_='Session_has_Person'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='Session_has_Person'):
        pass
    def exportChildren(self, outfile, level, name_='Session_has_Person'):
        showIndent(outfile, level)
        outfile.write('<sessionId>%s</sessionId>\n' % quote_xml(self.getSessionId()))
        showIndent(outfile, level)
        outfile.write('<personId>%s</personId>\n' % quote_xml(self.getPersonId()))
        showIndent(outfile, level)
        outfile.write('<role>%s</role>\n' % quote_xml(self.getRole()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='Session_has_Person' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">Session_has_Person:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='Session_has_Person' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = Session_has_Person.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="Session_has_Person" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='Session_has_Person'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('sessionId = %s,\n' % quote_python(self.getSessionId()))
        showIndent(outfile, level)
        outfile.write('personId = %s,\n' % quote_python(self.getPersonId()))
        showIndent(outfile, level)
        outfile.write('role = %s,\n' % quote_python(self.getRole()))
    def exportLiteralHtml(self, outfile, level = 0, name_='Session_has_Person'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('sessionId = <a  href:"#">%s</a><br>\n' % quote_python(self.getSessionId()))
        showIndentHtml(outfile, level)
        outfile.write('personId = <a  href:"#">%s</a><br>\n' % quote_python(self.getPersonId()))
        showIndentHtml(outfile, level)
        outfile.write('role = <a  href:"#">%s</a><br>\n' % quote_python(self.getRole()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sessionId':
            sessionId_ = ''
            for text__content_ in child_.childNodes:
                sessionId_ += text__content_.nodeValue
            self.sessionId = sessionId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'personId':
            personId_ = ''
            for text__content_ in child_.childNodes:
                personId_ += text__content_.nodeValue
            self.personId = personId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'role':
            role_ = ''
            for text__content_ in child_.childNodes:
                role_ += text__content_.nodeValue
            self.role = role_
# end class Session_has_Person


class Shipping(object):
    subclass = None
    def __init__(self, shippingId='', proposalId='', shippingName='', deliveryAgent_agentName='', deliveryAgent_shippingDate='', deliveryAgent_deliveryDate='', deliveryAgent_agentCode='', deliveryAgent_flightCode='', shippingStatus='', timeStamp='', laboratoryId=''):
        self.shippingId = shippingId
        self.proposalId = proposalId
        self.shippingName = shippingName
        self.deliveryAgent_agentName = deliveryAgent_agentName
        self.deliveryAgent_shippingDate = deliveryAgent_shippingDate
        self.deliveryAgent_deliveryDate = deliveryAgent_deliveryDate
        self.deliveryAgent_agentCode = deliveryAgent_agentCode
        self.deliveryAgent_flightCode = deliveryAgent_flightCode
        self.shippingStatus = shippingStatus
        self.timeStamp = timeStamp
        self.laboratoryId = laboratoryId
    def factory(*args_, **kwargs_):
        if Shipping.subclass:
            return Shipping.subclass(*args_, **kwargs_)
        else:
            return Shipping(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getShippingId(self): return self.shippingId
    def setShippingId(self, shippingId): self.shippingId = shippingId
    def getProposalId(self): return self.proposalId
    def setProposalId(self, proposalId): self.proposalId = proposalId
    def getShippingName(self): return self.shippingName
    def setShippingName(self, shippingName): self.shippingName = shippingName
    def getDeliveryAgent_agentName(self): return self.deliveryAgent_agentName
    def setDeliveryAgent_agentName(self, deliveryAgent_agentName): self.deliveryAgent_agentName = deliveryAgent_agentName
    def getDeliveryAgent_shippingDate(self): return self.deliveryAgent_shippingDate
    def setDeliveryAgent_shippingDate(self, deliveryAgent_shippingDate): self.deliveryAgent_shippingDate = deliveryAgent_shippingDate
    def getDeliveryAgent_deliveryDate(self): return self.deliveryAgent_deliveryDate
    def setDeliveryAgent_deliveryDate(self, deliveryAgent_deliveryDate): self.deliveryAgent_deliveryDate = deliveryAgent_deliveryDate
    def getDeliveryAgent_agentCode(self): return self.deliveryAgent_agentCode
    def setDeliveryAgent_agentCode(self, deliveryAgent_agentCode): self.deliveryAgent_agentCode = deliveryAgent_agentCode
    def getDeliveryAgent_flightCode(self): return self.deliveryAgent_flightCode
    def setDeliveryAgent_flightCode(self, deliveryAgent_flightCode): self.deliveryAgent_flightCode = deliveryAgent_flightCode
    def getShippingStatus(self): return self.shippingStatus
    def setShippingStatus(self, shippingStatus): self.shippingStatus = shippingStatus
    def getTimeStamp(self): return self.timeStamp
    def setTimeStamp(self, timeStamp): self.timeStamp = timeStamp
    def getLaboratoryId(self): return self.laboratoryId
    def setLaboratoryId(self, laboratoryId): self.laboratoryId = laboratoryId
    def export(self, outfile, level = 0, name_='Shipping'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='Shipping'):
        pass
    def exportChildren(self, outfile, level, name_='Shipping'):
        showIndent(outfile, level)
        outfile.write('<shippingId>%s</shippingId>\n' % quote_xml(self.getShippingId()))
        showIndent(outfile, level)
        outfile.write('<proposalId>%s</proposalId>\n' % quote_xml(self.getProposalId()))
        showIndent(outfile, level)
        outfile.write('<shippingName>%s</shippingName>\n' % quote_xml(self.getShippingName()))
        showIndent(outfile, level)
        outfile.write('<deliveryAgent_agentName>%s</deliveryAgent_agentName>\n' % quote_xml(self.getDeliveryAgent_agentName()))
        showIndent(outfile, level)
        outfile.write('<deliveryAgent_shippingDate>%s</deliveryAgent_shippingDate>\n' % quote_xml(self.getDeliveryAgent_shippingDate()))
        showIndent(outfile, level)
        outfile.write('<deliveryAgent_deliveryDate>%s</deliveryAgent_deliveryDate>\n' % quote_xml(self.getDeliveryAgent_deliveryDate()))
        showIndent(outfile, level)
        outfile.write('<deliveryAgent_agentCode>%s</deliveryAgent_agentCode>\n' % quote_xml(self.getDeliveryAgent_agentCode()))
        showIndent(outfile, level)
        outfile.write('<deliveryAgent_flightCode>%s</deliveryAgent_flightCode>\n' % quote_xml(self.getDeliveryAgent_flightCode()))
        showIndent(outfile, level)
        outfile.write('<shippingStatus>%s</shippingStatus>\n' % quote_xml(self.getShippingStatus()))
        showIndent(outfile, level)
        outfile.write('<timeStamp>%s</timeStamp>\n' % quote_xml(self.getTimeStamp()))
        showIndent(outfile, level)
        outfile.write('<laboratoryId>%s</laboratoryId>\n' % quote_xml(self.getLaboratoryId()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='Shipping' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">Shipping:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='Shipping' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = Shipping.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="Shipping" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='Shipping'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('shippingId = %s,\n' % quote_python(self.getShippingId()))
        showIndent(outfile, level)
        outfile.write('proposalId = %s,\n' % quote_python(self.getProposalId()))
        showIndent(outfile, level)
        outfile.write('shippingName = %s,\n' % quote_python(self.getShippingName()))
        showIndent(outfile, level)
        outfile.write('deliveryAgent_agentName = %s,\n' % quote_python(self.getDeliveryAgent_agentName()))
        showIndent(outfile, level)
        outfile.write('deliveryAgent_shippingDate = %s,\n' % quote_python(self.getDeliveryAgent_shippingDate()))
        showIndent(outfile, level)
        outfile.write('deliveryAgent_deliveryDate = %s,\n' % quote_python(self.getDeliveryAgent_deliveryDate()))
        showIndent(outfile, level)
        outfile.write('deliveryAgent_agentCode = %s,\n' % quote_python(self.getDeliveryAgent_agentCode()))
        showIndent(outfile, level)
        outfile.write('deliveryAgent_flightCode = %s,\n' % quote_python(self.getDeliveryAgent_flightCode()))
        showIndent(outfile, level)
        outfile.write('shippingStatus = %s,\n' % quote_python(self.getShippingStatus()))
        showIndent(outfile, level)
        outfile.write('timeStamp = %s,\n' % quote_python(self.getTimeStamp()))
        showIndent(outfile, level)
        outfile.write('laboratoryId = %s,\n' % quote_python(self.getLaboratoryId()))
    def exportLiteralHtml(self, outfile, level = 0, name_='Shipping'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('shippingId = <a  href:"#">%s</a><br>\n' % quote_python(self.getShippingId()))
        showIndentHtml(outfile, level)
        outfile.write('proposalId = <a  href:"#">%s</a><br>\n' % quote_python(self.getProposalId()))
        showIndentHtml(outfile, level)
        outfile.write('shippingName = <a  href:"#">%s</a><br>\n' % quote_python(self.getShippingName()))
        showIndentHtml(outfile, level)
        outfile.write('deliveryAgent_agentName = <a  href:"#">%s</a><br>\n' % quote_python(self.getDeliveryAgent_agentName()))
        showIndentHtml(outfile, level)
        outfile.write('deliveryAgent_shippingDate = <a  href:"#">%s</a><br>\n' % quote_python(self.getDeliveryAgent_shippingDate()))
        showIndentHtml(outfile, level)
        outfile.write('deliveryAgent_deliveryDate = <a  href:"#">%s</a><br>\n' % quote_python(self.getDeliveryAgent_deliveryDate()))
        showIndentHtml(outfile, level)
        outfile.write('deliveryAgent_agentCode = <a  href:"#">%s</a><br>\n' % quote_python(self.getDeliveryAgent_agentCode()))
        showIndentHtml(outfile, level)
        outfile.write('deliveryAgent_flightCode = <a  href:"#">%s</a><br>\n' % quote_python(self.getDeliveryAgent_flightCode()))
        showIndentHtml(outfile, level)
        outfile.write('shippingStatus = <a  href:"#">%s</a><br>\n' % quote_python(self.getShippingStatus()))
        showIndentHtml(outfile, level)
        outfile.write('timeStamp = <a  href:"#">%s</a><br>\n' % quote_python(self.getTimeStamp()))
        showIndentHtml(outfile, level)
        outfile.write('laboratoryId = <a  href:"#">%s</a><br>\n' % quote_python(self.getLaboratoryId()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'shippingId':
            shippingId_ = ''
            for text__content_ in child_.childNodes:
                shippingId_ += text__content_.nodeValue
            self.shippingId = shippingId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'proposalId':
            proposalId_ = ''
            for text__content_ in child_.childNodes:
                proposalId_ += text__content_.nodeValue
            self.proposalId = proposalId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'shippingName':
            shippingName_ = ''
            for text__content_ in child_.childNodes:
                shippingName_ += text__content_.nodeValue
            self.shippingName = shippingName_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'deliveryAgent_agentName':
            deliveryAgent_agentName_ = ''
            for text__content_ in child_.childNodes:
                deliveryAgent_agentName_ += text__content_.nodeValue
            self.deliveryAgent_agentName = deliveryAgent_agentName_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'deliveryAgent_shippingDate':
            deliveryAgent_shippingDate_ = ''
            for text__content_ in child_.childNodes:
                deliveryAgent_shippingDate_ += text__content_.nodeValue
            self.deliveryAgent_shippingDate = deliveryAgent_shippingDate_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'deliveryAgent_deliveryDate':
            deliveryAgent_deliveryDate_ = ''
            for text__content_ in child_.childNodes:
                deliveryAgent_deliveryDate_ += text__content_.nodeValue
            self.deliveryAgent_deliveryDate = deliveryAgent_deliveryDate_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'deliveryAgent_agentCode':
            deliveryAgent_agentCode_ = ''
            for text__content_ in child_.childNodes:
                deliveryAgent_agentCode_ += text__content_.nodeValue
            self.deliveryAgent_agentCode = deliveryAgent_agentCode_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'deliveryAgent_flightCode':
            deliveryAgent_flightCode_ = ''
            for text__content_ in child_.childNodes:
                deliveryAgent_flightCode_ += text__content_.nodeValue
            self.deliveryAgent_flightCode = deliveryAgent_flightCode_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'shippingStatus':
            shippingStatus_ = ''
            for text__content_ in child_.childNodes:
                shippingStatus_ += text__content_.nodeValue
            self.shippingStatus = shippingStatus_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'timeStamp':
            timeStamp_ = ''
            for text__content_ in child_.childNodes:
                timeStamp_ += text__content_.nodeValue
            self.timeStamp = timeStamp_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'laboratoryId':
            laboratoryId_ = ''
            for text__content_ in child_.childNodes:
                laboratoryId_ += text__content_.nodeValue
            self.laboratoryId = laboratoryId_
# end class Shipping


class XFEFluorescenceSpectrum(object):
    subclass = None
    def __init__(self, xfeFluorescenceSpectrumId='', sessionId='', blSampleId='', jpegScanFileFullPath='', startTime='', endTime=''):
        self.xfeFluorescenceSpectrumId = xfeFluorescenceSpectrumId
        self.sessionId = sessionId
        self.blSampleId = blSampleId
        self.jpegScanFileFullPath = jpegScanFileFullPath
        self.startTime = startTime
        self.endTime = endTime
    def factory(*args_, **kwargs_):
        if XFEFluorescenceSpectrum.subclass:
            return XFEFluorescenceSpectrum.subclass(*args_, **kwargs_)
        else:
            return XFEFluorescenceSpectrum(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getXfeFluorescenceSpectrumId(self): return self.xfeFluorescenceSpectrumId
    def setXfeFluorescenceSpectrumId(self, xfeFluorescenceSpectrumId): self.xfeFluorescenceSpectrumId = xfeFluorescenceSpectrumId
    def getSessionId(self): return self.sessionId
    def setSessionId(self, sessionId): self.sessionId = sessionId
    def getBlSampleId(self): return self.blSampleId
    def setBlSampleId(self, blSampleId): self.blSampleId = blSampleId
    def getJpegScanFileFullPath(self): return self.jpegScanFileFullPath
    def setJpegScanFileFullPath(self, jpegScanFileFullPath): self.jpegScanFileFullPath = jpegScanFileFullPath
    def getStartTime(self): return self.startTime
    def setStartTime(self, startTime): self.startTime = startTime
    def getEndTime(self): return self.endTime
    def setEndTime(self, endTime): self.endTime = endTime
    def export(self, outfile, level = 0, name_='XFEFluorescenceSpectrum'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='XFEFluorescenceSpectrum'):
        pass
    def exportChildren(self, outfile, level, name_='XFEFluorescenceSpectrum'):
        showIndent(outfile, level)
        outfile.write('<xfeFluorescenceSpectrumId>%s</xfeFluorescenceSpectrumId>\n' % quote_xml(self.getXfeFluorescenceSpectrumId()))
        showIndent(outfile, level)
        outfile.write('<sessionId>%s</sessionId>\n' % quote_xml(self.getSessionId()))
        showIndent(outfile, level)
        outfile.write('<blSampleId>%s</blSampleId>\n' % quote_xml(self.getBlSampleId()))
        showIndent(outfile, level)
        outfile.write('<jpegScanFileFullPath>%s</jpegScanFileFullPath>\n' % quote_xml(self.getJpegScanFileFullPath()))
        showIndent(outfile, level)
        outfile.write('<startTime>%s</startTime>\n' % quote_xml(self.getStartTime()))
        showIndent(outfile, level)
        outfile.write('<endTime>%s</endTime>\n' % quote_xml(self.getEndTime()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='XFEFluorescenceSpectrum' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">XFEFluorescenceSpectrum:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='XFEFluorescenceSpectrum' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = XFEFluorescenceSpectrum.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="XFEFluorescenceSpectrum" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='XFEFluorescenceSpectrum'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('xfeFluorescenceSpectrumId = %s,\n' % quote_python(self.getXfeFluorescenceSpectrumId()))
        showIndent(outfile, level)
        outfile.write('sessionId = %s,\n' % quote_python(self.getSessionId()))
        showIndent(outfile, level)
        outfile.write('blSampleId = %s,\n' % quote_python(self.getBlSampleId()))
        showIndent(outfile, level)
        outfile.write('jpegScanFileFullPath = %s,\n' % quote_python(self.getJpegScanFileFullPath()))
        showIndent(outfile, level)
        outfile.write('startTime = %s,\n' % quote_python(self.getStartTime()))
        showIndent(outfile, level)
        outfile.write('endTime = %s,\n' % quote_python(self.getEndTime()))
    def exportLiteralHtml(self, outfile, level = 0, name_='XFEFluorescenceSpectrum'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('xfeFluorescenceSpectrumId = <a  href:"#">%s</a><br>\n' % quote_python(self.getXfeFluorescenceSpectrumId()))
        showIndentHtml(outfile, level)
        outfile.write('sessionId = <a  href:"#">%s</a><br>\n' % quote_python(self.getSessionId()))
        showIndentHtml(outfile, level)
        outfile.write('blSampleId = <a  href:"#">%s</a><br>\n' % quote_python(self.getBlSampleId()))
        showIndentHtml(outfile, level)
        outfile.write('jpegScanFileFullPath = <a  href:"#">%s</a><br>\n' % quote_python(self.getJpegScanFileFullPath()))
        showIndentHtml(outfile, level)
        outfile.write('startTime = <a  href:"#">%s</a><br>\n' % quote_python(self.getStartTime()))
        showIndentHtml(outfile, level)
        outfile.write('endTime = <a  href:"#">%s</a><br>\n' % quote_python(self.getEndTime()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'xfeFluorescenceSpectrumId':
            xfeFluorescenceSpectrumId_ = ''
            for text__content_ in child_.childNodes:
                xfeFluorescenceSpectrumId_ += text__content_.nodeValue
            self.xfeFluorescenceSpectrumId = xfeFluorescenceSpectrumId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sessionId':
            sessionId_ = ''
            for text__content_ in child_.childNodes:
                sessionId_ += text__content_.nodeValue
            self.sessionId = sessionId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'blSampleId':
            blSampleId_ = ''
            for text__content_ in child_.childNodes:
                blSampleId_ += text__content_.nodeValue
            self.blSampleId = blSampleId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'jpegScanFileFullPath':
            jpegScanFileFullPath_ = ''
            for text__content_ in child_.childNodes:
                jpegScanFileFullPath_ += text__content_.nodeValue
            self.jpegScanFileFullPath = jpegScanFileFullPath_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'startTime':
            startTime_ = ''
            for text__content_ in child_.childNodes:
                startTime_ += text__content_.nodeValue
            self.startTime = startTime_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'endTime':
            endTime_ = ''
            for text__content_ in child_.childNodes:
                endTime_ += text__content_.nodeValue
            self.endTime = endTime_
# end class XFEFluorescenceSpectrum


class XmlDocument(object):
    subclass = None
    def __init__(self, xmlDocumentId='', XmlSchemaId='', xml=''):
        self.xmlDocumentId = xmlDocumentId
        self.XmlSchemaId = XmlSchemaId
        self.xml = xml
    def factory(*args_, **kwargs_):
        if XmlDocument.subclass:
            return XmlDocument.subclass(*args_, **kwargs_)
        else:
            return XmlDocument(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getXmlDocumentId(self): return self.xmlDocumentId
    def setXmlDocumentId(self, xmlDocumentId): self.xmlDocumentId = xmlDocumentId
    def getXmlSchemaId(self): return self.XmlSchemaId
    def setXmlSchemaId(self, XmlSchemaId): self.XmlSchemaId = XmlSchemaId
    def getXml(self): return self.xml
    def setXml(self, xml): self.xml = xml
    def export(self, outfile, level = 0, name_='XmlDocument'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='XmlDocument'):
        pass
    def exportChildren(self, outfile, level, name_='XmlDocument'):
        showIndent(outfile, level)
        outfile.write('<xmlDocumentId>%s</xmlDocumentId>\n' % quote_xml(self.getXmlDocumentId()))
        showIndent(outfile, level)
        outfile.write('<XmlSchemaId>%s</XmlSchemaId>\n' % quote_xml(self.getXmlSchemaId()))
        showIndent(outfile, level)
        outfile.write('<xml>%s</xml>\n' % quote_xml(self.getXml()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='XmlDocument' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">XmlDocument:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='XmlDocument' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = XmlDocument.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="XmlDocument" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='XmlDocument'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('xmlDocumentId = %s,\n' % quote_python(self.getXmlDocumentId()))
        showIndent(outfile, level)
        outfile.write('XmlSchemaId = %s,\n' % quote_python(self.getXmlSchemaId()))
        showIndent(outfile, level)
        outfile.write('xml = %s,\n' % quote_python(self.getXml()))
    def exportLiteralHtml(self, outfile, level = 0, name_='XmlDocument'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('xmlDocumentId = <a  href:"#">%s</a><br>\n' % quote_python(self.getXmlDocumentId()))
        showIndentHtml(outfile, level)
        outfile.write('XmlSchemaId = <a  href:"#">%s</a><br>\n' % quote_python(self.getXmlSchemaId()))
        showIndentHtml(outfile, level)
        outfile.write('xml = <a  href:"#">%s</a><br>\n' % quote_python(self.getXml()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'xmlDocumentId':
            xmlDocumentId_ = ''
            for text__content_ in child_.childNodes:
                xmlDocumentId_ += text__content_.nodeValue
            self.xmlDocumentId = xmlDocumentId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'XmlSchemaId':
            XmlSchemaId_ = ''
            for text__content_ in child_.childNodes:
                XmlSchemaId_ += text__content_.nodeValue
            self.XmlSchemaId = XmlSchemaId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'xml':
            xml_ = ''
            for text__content_ in child_.childNodes:
                xml_ += text__content_.nodeValue
            self.xml = xml_
# end class XmlDocument


class XmlSchema(object):
    subclass = None
    def __init__(self, xmlSchemaId='', description=''):
        self.xmlSchemaId = xmlSchemaId
        self.description = description
    def factory(*args_, **kwargs_):
        if XmlSchema.subclass:
            return XmlSchema.subclass(*args_, **kwargs_)
        else:
            return XmlSchema(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getXmlSchemaId(self): return self.xmlSchemaId
    def setXmlSchemaId(self, xmlSchemaId): self.xmlSchemaId = xmlSchemaId
    def getDescription(self): return self.description
    def setDescription(self, description): self.description = description
    def export(self, outfile, level = 0, name_='XmlSchema'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='XmlSchema'):
        pass
    def exportChildren(self, outfile, level, name_='XmlSchema'):
        showIndent(outfile, level)
        outfile.write('<xmlSchemaId>%s</xmlSchemaId>\n' % quote_xml(self.getXmlSchemaId()))
        showIndent(outfile, level)
        outfile.write('<description>%s</description>\n' % quote_xml(self.getDescription()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='XmlSchema' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">XmlSchema:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='XmlSchema' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = XmlSchema.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="XmlSchema" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='XmlSchema'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('xmlSchemaId = %s,\n' % quote_python(self.getXmlSchemaId()))
        showIndent(outfile, level)
        outfile.write('description = %s,\n' % quote_python(self.getDescription()))
    def exportLiteralHtml(self, outfile, level = 0, name_='XmlSchema'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('xmlSchemaId = <a  href:"#">%s</a><br>\n' % quote_python(self.getXmlSchemaId()))
        showIndentHtml(outfile, level)
        outfile.write('description = <a  href:"#">%s</a><br>\n' % quote_python(self.getDescription()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'xmlSchemaId':
            xmlSchemaId_ = ''
            for text__content_ in child_.childNodes:
                xmlSchemaId_ += text__content_.nodeValue
            self.xmlSchemaId = xmlSchemaId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'description':
            description_ = ''
            for text__content_ in child_.childNodes:
                description_ += text__content_.nodeValue
            self.description = description_
# end class XmlSchema


class dbstatus(object):
    subclass = None
    def __init__(self, safetyRequestId='', experimentKindId='', datamatrixInSampleChangerId='', blSampleId='', screeningRankId='', screeningId='', screeningInputId='', xmlSchemaId='', containerId='', proposalId='', anomalousScatteringId='', beamLineSetupId='', anomalousScattererId='', dewarId='', screeningStrategyId='', crystal_has_UUID_Id='', sessionId='', personId='', xmlDocumentId='', screeningRankSetId='', energyScanId='', shippingId='', laboratoryId='', crystalId='', imageId='', screeningOutputId='', screeningOutputLatticeId='', dataCollectionId='', xfeFluorescenceSpectrumId='', diffractionPlanId='', proteinId='', code='', message=''):
        self.safetyRequestId = safetyRequestId
        self.experimentKindId = experimentKindId
        self.datamatrixInSampleChangerId = datamatrixInSampleChangerId
        self.blSampleId = blSampleId
        self.screeningRankId = screeningRankId
        self.screeningId = screeningId
        self.screeningInputId = screeningInputId
        self.xmlSchemaId = xmlSchemaId
        self.containerId = containerId
        self.proposalId = proposalId
        self.anomalousScatteringId = anomalousScatteringId
        self.beamLineSetupId = beamLineSetupId
        self.anomalousScattererId = anomalousScattererId
        self.dewarId = dewarId
        self.screeningStrategyId = screeningStrategyId
        self.crystal_has_UUID_Id = crystal_has_UUID_Id
        self.sessionId = sessionId
        self.personId = personId
        self.xmlDocumentId = xmlDocumentId
        self.screeningRankSetId = screeningRankSetId
        self.energyScanId = energyScanId
        self.shippingId = shippingId
        self.laboratoryId = laboratoryId
        self.crystalId = crystalId
        self.imageId = imageId
        self.screeningOutputId = screeningOutputId
        self.screeningOutputLatticeId = screeningOutputLatticeId
        self.dataCollectionId = dataCollectionId
        self.xfeFluorescenceSpectrumId = xfeFluorescenceSpectrumId
        self.diffractionPlanId = diffractionPlanId
        self.proteinId = proteinId
        self.code = code
        self.message = message
    def factory(*args_, **kwargs_):
        if dbstatus.subclass:
            return dbstatus.subclass(*args_, **kwargs_)
        else:
            return dbstatus(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getSafetyRequestId(self): return self.safetyRequestId
    def setSafetyRequestId(self, safetyRequestId): self.safetyRequestId = safetyRequestId
    def getExperimentKindId(self): return self.experimentKindId
    def setExperimentKindId(self, experimentKindId): self.experimentKindId = experimentKindId
    def getDatamatrixInSampleChangerId(self): return self.datamatrixInSampleChangerId
    def setDatamatrixInSampleChangerId(self, datamatrixInSampleChangerId): self.datamatrixInSampleChangerId = datamatrixInSampleChangerId
    def getBlSampleId(self): return self.blSampleId
    def setBlSampleId(self, blSampleId): self.blSampleId = blSampleId
    def getScreeningRankId(self): return self.screeningRankId
    def setScreeningRankId(self, screeningRankId): self.screeningRankId = screeningRankId
    def getScreeningId(self): return self.screeningId
    def setScreeningId(self, screeningId): self.screeningId = screeningId
    def getScreeningInputId(self): return self.screeningInputId
    def setScreeningInputId(self, screeningInputId): self.screeningInputId = screeningInputId
    def getXmlSchemaId(self): return self.xmlSchemaId
    def setXmlSchemaId(self, xmlSchemaId): self.xmlSchemaId = xmlSchemaId
    def getContainerId(self): return self.containerId
    def setContainerId(self, containerId): self.containerId = containerId
    def getProposalId(self): return self.proposalId
    def setProposalId(self, proposalId): self.proposalId = proposalId
    def getAnomalousScatteringId(self): return self.anomalousScatteringId
    def setAnomalousScatteringId(self, anomalousScatteringId): self.anomalousScatteringId = anomalousScatteringId
    def getBeamLineSetupId(self): return self.beamLineSetupId
    def setBeamLineSetupId(self, beamLineSetupId): self.beamLineSetupId = beamLineSetupId
    def getAnomalousScattererId(self): return self.anomalousScattererId
    def setAnomalousScattererId(self, anomalousScattererId): self.anomalousScattererId = anomalousScattererId
    def getDewarId(self): return self.dewarId
    def setDewarId(self, dewarId): self.dewarId = dewarId
    def getScreeningStrategyId(self): return self.screeningStrategyId
    def setScreeningStrategyId(self, screeningStrategyId): self.screeningStrategyId = screeningStrategyId
    def getCrystal_has_UUID_Id(self): return self.crystal_has_UUID_Id
    def setCrystal_has_UUID_Id(self, crystal_has_UUID_Id): self.crystal_has_UUID_Id = crystal_has_UUID_Id
    def getSessionId(self): return self.sessionId
    def setSessionId(self, sessionId): self.sessionId = sessionId
    def getPersonId(self): return self.personId
    def setPersonId(self, personId): self.personId = personId
    def getXmlDocumentId(self): return self.xmlDocumentId
    def setXmlDocumentId(self, xmlDocumentId): self.xmlDocumentId = xmlDocumentId
    def getScreeningRankSetId(self): return self.screeningRankSetId
    def setScreeningRankSetId(self, screeningRankSetId): self.screeningRankSetId = screeningRankSetId
    def getEnergyScanId(self): return self.energyScanId
    def setEnergyScanId(self, energyScanId): self.energyScanId = energyScanId
    def getShippingId(self): return self.shippingId
    def setShippingId(self, shippingId): self.shippingId = shippingId
    def getLaboratoryId(self): return self.laboratoryId
    def setLaboratoryId(self, laboratoryId): self.laboratoryId = laboratoryId
    def getCrystalId(self): return self.crystalId
    def setCrystalId(self, crystalId): self.crystalId = crystalId
    def getImageId(self): return self.imageId
    def setImageId(self, imageId): self.imageId = imageId
    def getScreeningOutputId(self): return self.screeningOutputId
    def setScreeningOutputId(self, screeningOutputId): self.screeningOutputId = screeningOutputId
    def getScreeningOutputLatticeId(self): return self.screeningOutputLatticeId
    def setScreeningOutputLatticeId(self, screeningOutputLatticeId): self.screeningOutputLatticeId = screeningOutputLatticeId
    def getDataCollectionId(self): return self.dataCollectionId
    def setDataCollectionId(self, dataCollectionId): self.dataCollectionId = dataCollectionId
    def getXfeFluorescenceSpectrumId(self): return self.xfeFluorescenceSpectrumId
    def setXfeFluorescenceSpectrumId(self, xfeFluorescenceSpectrumId): self.xfeFluorescenceSpectrumId = xfeFluorescenceSpectrumId
    def getDiffractionPlanId(self): return self.diffractionPlanId
    def setDiffractionPlanId(self, diffractionPlanId): self.diffractionPlanId = diffractionPlanId
    def getProteinId(self): return self.proteinId
    def setProteinId(self, proteinId): self.proteinId = proteinId
    def getCode(self): return self.code
    def setCode(self, code): self.code = code
    def getMessage(self): return self.message
    def setMessage(self, message): self.message = message
    def export(self, outfile, level = 0, name_='dbstatus'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='dbstatus'):
        pass
    def exportChildren(self, outfile, level, name_='dbstatus'):
        showIndent(outfile, level)
        outfile.write('<safetyRequestId>%s</safetyRequestId>\n' % quote_xml(self.getSafetyRequestId()))
        showIndent(outfile, level)
        outfile.write('<experimentKindId>%s</experimentKindId>\n' % quote_xml(self.getExperimentKindId()))
        showIndent(outfile, level)
        outfile.write('<datamatrixInSampleChangerId>%s</datamatrixInSampleChangerId>\n' % quote_xml(self.getDatamatrixInSampleChangerId()))
        showIndent(outfile, level)
        outfile.write('<blSampleId>%s</blSampleId>\n' % quote_xml(self.getBlSampleId()))
        showIndent(outfile, level)
        outfile.write('<screeningRankId>%s</screeningRankId>\n' % quote_xml(self.getScreeningRankId()))
        showIndent(outfile, level)
        outfile.write('<screeningId>%s</screeningId>\n' % quote_xml(self.getScreeningId()))
        showIndent(outfile, level)
        outfile.write('<screeningInputId>%s</screeningInputId>\n' % quote_xml(self.getScreeningInputId()))
        showIndent(outfile, level)
        outfile.write('<xmlSchemaId>%s</xmlSchemaId>\n' % quote_xml(self.getXmlSchemaId()))
        showIndent(outfile, level)
        outfile.write('<containerId>%s</containerId>\n' % quote_xml(self.getContainerId()))
        showIndent(outfile, level)
        outfile.write('<proposalId>%s</proposalId>\n' % quote_xml(self.getProposalId()))
        showIndent(outfile, level)
        outfile.write('<anomalousScatteringId>%s</anomalousScatteringId>\n' % quote_xml(self.getAnomalousScatteringId()))
        showIndent(outfile, level)
        outfile.write('<beamLineSetupId>%s</beamLineSetupId>\n' % quote_xml(self.getBeamLineSetupId()))
        showIndent(outfile, level)
        outfile.write('<anomalousScattererId>%s</anomalousScattererId>\n' % quote_xml(self.getAnomalousScattererId()))
        showIndent(outfile, level)
        outfile.write('<dewarId>%s</dewarId>\n' % quote_xml(self.getDewarId()))
        showIndent(outfile, level)
        outfile.write('<screeningStrategyId>%s</screeningStrategyId>\n' % quote_xml(self.getScreeningStrategyId()))
        showIndent(outfile, level)
        outfile.write('<crystal_has_UUID_Id>%s</crystal_has_UUID_Id>\n' % quote_xml(self.getCrystal_has_UUID_Id()))
        showIndent(outfile, level)
        outfile.write('<sessionId>%s</sessionId>\n' % quote_xml(self.getSessionId()))
        showIndent(outfile, level)
        outfile.write('<personId>%s</personId>\n' % quote_xml(self.getPersonId()))
        showIndent(outfile, level)
        outfile.write('<xmlDocumentId>%s</xmlDocumentId>\n' % quote_xml(self.getXmlDocumentId()))
        showIndent(outfile, level)
        outfile.write('<screeningRankSetId>%s</screeningRankSetId>\n' % quote_xml(self.getScreeningRankSetId()))
        showIndent(outfile, level)
        outfile.write('<energyScanId>%s</energyScanId>\n' % quote_xml(self.getEnergyScanId()))
        showIndent(outfile, level)
        outfile.write('<shippingId>%s</shippingId>\n' % quote_xml(self.getShippingId()))
        showIndent(outfile, level)
        outfile.write('<laboratoryId>%s</laboratoryId>\n' % quote_xml(self.getLaboratoryId()))
        showIndent(outfile, level)
        outfile.write('<crystalId>%s</crystalId>\n' % quote_xml(self.getCrystalId()))
        showIndent(outfile, level)
        outfile.write('<imageId>%s</imageId>\n' % quote_xml(self.getImageId()))
        showIndent(outfile, level)
        outfile.write('<screeningOutputId>%s</screeningOutputId>\n' % quote_xml(self.getScreeningOutputId()))
        showIndent(outfile, level)
        outfile.write('<screeningOutputLatticeId>%s</screeningOutputLatticeId>\n' % quote_xml(self.getScreeningOutputLatticeId()))
        showIndent(outfile, level)
        outfile.write('<dataCollectionId>%s</dataCollectionId>\n' % quote_xml(self.getDataCollectionId()))
        showIndent(outfile, level)
        outfile.write('<xfeFluorescenceSpectrumId>%s</xfeFluorescenceSpectrumId>\n' % quote_xml(self.getXfeFluorescenceSpectrumId()))
        showIndent(outfile, level)
        outfile.write('<diffractionPlanId>%s</diffractionPlanId>\n' % quote_xml(self.getDiffractionPlanId()))
        showIndent(outfile, level)
        outfile.write('<proteinId>%s</proteinId>\n' % quote_xml(self.getProteinId()))
        showIndent(outfile, level)
        outfile.write('<code>%s</code>\n' % quote_xml(self.getCode()))
        showIndent(outfile, level)
        outfile.write('<message>%s</message>\n' % quote_xml(self.getMessage()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='dbstatus' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">dbstatus:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='dbstatus' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = dbstatus.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="dbstatus" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='dbstatus'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('safetyRequestId = %s,\n' % quote_python(self.getSafetyRequestId()))
        showIndent(outfile, level)
        outfile.write('experimentKindId = %s,\n' % quote_python(self.getExperimentKindId()))
        showIndent(outfile, level)
        outfile.write('datamatrixInSampleChangerId = %s,\n' % quote_python(self.getDatamatrixInSampleChangerId()))
        showIndent(outfile, level)
        outfile.write('blSampleId = %s,\n' % quote_python(self.getBlSampleId()))
        showIndent(outfile, level)
        outfile.write('screeningRankId = %s,\n' % quote_python(self.getScreeningRankId()))
        showIndent(outfile, level)
        outfile.write('screeningId = %s,\n' % quote_python(self.getScreeningId()))
        showIndent(outfile, level)
        outfile.write('screeningInputId = %s,\n' % quote_python(self.getScreeningInputId()))
        showIndent(outfile, level)
        outfile.write('xmlSchemaId = %s,\n' % quote_python(self.getXmlSchemaId()))
        showIndent(outfile, level)
        outfile.write('containerId = %s,\n' % quote_python(self.getContainerId()))
        showIndent(outfile, level)
        outfile.write('proposalId = %s,\n' % quote_python(self.getProposalId()))
        showIndent(outfile, level)
        outfile.write('anomalousScatteringId = %s,\n' % quote_python(self.getAnomalousScatteringId()))
        showIndent(outfile, level)
        outfile.write('beamLineSetupId = %s,\n' % quote_python(self.getBeamLineSetupId()))
        showIndent(outfile, level)
        outfile.write('anomalousScattererId = %s,\n' % quote_python(self.getAnomalousScattererId()))
        showIndent(outfile, level)
        outfile.write('dewarId = %s,\n' % quote_python(self.getDewarId()))
        showIndent(outfile, level)
        outfile.write('screeningStrategyId = %s,\n' % quote_python(self.getScreeningStrategyId()))
        showIndent(outfile, level)
        outfile.write('crystal_has_UUID_Id = %s,\n' % quote_python(self.getCrystal_has_UUID_Id()))
        showIndent(outfile, level)
        outfile.write('sessionId = %s,\n' % quote_python(self.getSessionId()))
        showIndent(outfile, level)
        outfile.write('personId = %s,\n' % quote_python(self.getPersonId()))
        showIndent(outfile, level)
        outfile.write('xmlDocumentId = %s,\n' % quote_python(self.getXmlDocumentId()))
        showIndent(outfile, level)
        outfile.write('screeningRankSetId = %s,\n' % quote_python(self.getScreeningRankSetId()))
        showIndent(outfile, level)
        outfile.write('energyScanId = %s,\n' % quote_python(self.getEnergyScanId()))
        showIndent(outfile, level)
        outfile.write('shippingId = %s,\n' % quote_python(self.getShippingId()))
        showIndent(outfile, level)
        outfile.write('laboratoryId = %s,\n' % quote_python(self.getLaboratoryId()))
        showIndent(outfile, level)
        outfile.write('crystalId = %s,\n' % quote_python(self.getCrystalId()))
        showIndent(outfile, level)
        outfile.write('imageId = %s,\n' % quote_python(self.getImageId()))
        showIndent(outfile, level)
        outfile.write('screeningOutputId = %s,\n' % quote_python(self.getScreeningOutputId()))
        showIndent(outfile, level)
        outfile.write('screeningOutputLatticeId = %s,\n' % quote_python(self.getScreeningOutputLatticeId()))
        showIndent(outfile, level)
        outfile.write('dataCollectionId = %s,\n' % quote_python(self.getDataCollectionId()))
        showIndent(outfile, level)
        outfile.write('xfeFluorescenceSpectrumId = %s,\n' % quote_python(self.getXfeFluorescenceSpectrumId()))
        showIndent(outfile, level)
        outfile.write('diffractionPlanId = %s,\n' % quote_python(self.getDiffractionPlanId()))
        showIndent(outfile, level)
        outfile.write('proteinId = %s,\n' % quote_python(self.getProteinId()))
        showIndent(outfile, level)
        outfile.write('code = %s,\n' % quote_python(self.getCode()))
        showIndent(outfile, level)
        outfile.write('message = %s,\n' % quote_python(self.getMessage()))
    def exportLiteralHtml(self, outfile, level = 0, name_='dbstatus'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('safetyRequestId = <a  href:"#">%s</a><br>\n' % quote_python(self.getSafetyRequestId()))
        showIndentHtml(outfile, level)
        outfile.write('experimentKindId = <a  href:"#">%s</a><br>\n' % quote_python(self.getExperimentKindId()))
        showIndentHtml(outfile, level)
        outfile.write('datamatrixInSampleChangerId = <a  href:"#">%s</a><br>\n' % quote_python(self.getDatamatrixInSampleChangerId()))
        showIndentHtml(outfile, level)
        outfile.write('blSampleId = <a  href:"#">%s</a><br>\n' % quote_python(self.getBlSampleId()))
        showIndentHtml(outfile, level)
        outfile.write('screeningRankId = <a  href:"#">%s</a><br>\n' % quote_python(self.getScreeningRankId()))
        showIndentHtml(outfile, level)
        outfile.write('screeningId = <a  href:"#">%s</a><br>\n' % quote_python(self.getScreeningId()))
        showIndentHtml(outfile, level)
        outfile.write('screeningInputId = <a  href:"#">%s</a><br>\n' % quote_python(self.getScreeningInputId()))
        showIndentHtml(outfile, level)
        outfile.write('xmlSchemaId = <a  href:"#">%s</a><br>\n' % quote_python(self.getXmlSchemaId()))
        showIndentHtml(outfile, level)
        outfile.write('containerId = <a  href:"#">%s</a><br>\n' % quote_python(self.getContainerId()))
        showIndentHtml(outfile, level)
        outfile.write('proposalId = <a  href:"#">%s</a><br>\n' % quote_python(self.getProposalId()))
        showIndentHtml(outfile, level)
        outfile.write('anomalousScatteringId = <a  href:"#">%s</a><br>\n' % quote_python(self.getAnomalousScatteringId()))
        showIndentHtml(outfile, level)
        outfile.write('beamLineSetupId = <a  href:"#">%s</a><br>\n' % quote_python(self.getBeamLineSetupId()))
        showIndentHtml(outfile, level)
        outfile.write('anomalousScattererId = <a  href:"#">%s</a><br>\n' % quote_python(self.getAnomalousScattererId()))
        showIndentHtml(outfile, level)
        outfile.write('dewarId = <a  href:"#">%s</a><br>\n' % quote_python(self.getDewarId()))
        showIndentHtml(outfile, level)
        outfile.write('screeningStrategyId = <a  href:"#">%s</a><br>\n' % quote_python(self.getScreeningStrategyId()))
        showIndentHtml(outfile, level)
        outfile.write('crystal_has_UUID_Id = <a  href:"#">%s</a><br>\n' % quote_python(self.getCrystal_has_UUID_Id()))
        showIndentHtml(outfile, level)
        outfile.write('sessionId = <a  href:"#">%s</a><br>\n' % quote_python(self.getSessionId()))
        showIndentHtml(outfile, level)
        outfile.write('personId = <a  href:"#">%s</a><br>\n' % quote_python(self.getPersonId()))
        showIndentHtml(outfile, level)
        outfile.write('xmlDocumentId = <a  href:"#">%s</a><br>\n' % quote_python(self.getXmlDocumentId()))
        showIndentHtml(outfile, level)
        outfile.write('screeningRankSetId = <a  href:"#">%s</a><br>\n' % quote_python(self.getScreeningRankSetId()))
        showIndentHtml(outfile, level)
        outfile.write('energyScanId = <a  href:"#">%s</a><br>\n' % quote_python(self.getEnergyScanId()))
        showIndentHtml(outfile, level)
        outfile.write('shippingId = <a  href:"#">%s</a><br>\n' % quote_python(self.getShippingId()))
        showIndentHtml(outfile, level)
        outfile.write('laboratoryId = <a  href:"#">%s</a><br>\n' % quote_python(self.getLaboratoryId()))
        showIndentHtml(outfile, level)
        outfile.write('crystalId = <a  href:"#">%s</a><br>\n' % quote_python(self.getCrystalId()))
        showIndentHtml(outfile, level)
        outfile.write('imageId = <a  href:"#">%s</a><br>\n' % quote_python(self.getImageId()))
        showIndentHtml(outfile, level)
        outfile.write('screeningOutputId = <a  href:"#">%s</a><br>\n' % quote_python(self.getScreeningOutputId()))
        showIndentHtml(outfile, level)
        outfile.write('screeningOutputLatticeId = <a  href:"#">%s</a><br>\n' % quote_python(self.getScreeningOutputLatticeId()))
        showIndentHtml(outfile, level)
        outfile.write('dataCollectionId = <a  href:"#">%s</a><br>\n' % quote_python(self.getDataCollectionId()))
        showIndentHtml(outfile, level)
        outfile.write('xfeFluorescenceSpectrumId = <a  href:"#">%s</a><br>\n' % quote_python(self.getXfeFluorescenceSpectrumId()))
        showIndentHtml(outfile, level)
        outfile.write('diffractionPlanId = <a  href:"#">%s</a><br>\n' % quote_python(self.getDiffractionPlanId()))
        showIndentHtml(outfile, level)
        outfile.write('proteinId = <a  href:"#">%s</a><br>\n' % quote_python(self.getProteinId()))
        showIndentHtml(outfile, level)
        outfile.write('code = <a  href:"#">%s</a><br>\n' % quote_python(self.getCode()))
        showIndentHtml(outfile, level)
        outfile.write('message = <a  href:"#">%s</a><br>\n' % quote_python(self.getMessage()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'safetyRequestId':
            safetyRequestId_ = ''
            for text__content_ in child_.childNodes:
                safetyRequestId_ += text__content_.nodeValue
            self.safetyRequestId = safetyRequestId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'experimentKindId':
            experimentKindId_ = ''
            for text__content_ in child_.childNodes:
                experimentKindId_ += text__content_.nodeValue
            self.experimentKindId = experimentKindId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'datamatrixInSampleChangerId':
            datamatrixInSampleChangerId_ = ''
            for text__content_ in child_.childNodes:
                datamatrixInSampleChangerId_ += text__content_.nodeValue
            self.datamatrixInSampleChangerId = datamatrixInSampleChangerId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'blSampleId':
            blSampleId_ = ''
            for text__content_ in child_.childNodes:
                blSampleId_ += text__content_.nodeValue
            self.blSampleId = blSampleId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningRankId':
            screeningRankId_ = ''
            for text__content_ in child_.childNodes:
                screeningRankId_ += text__content_.nodeValue
            self.screeningRankId = screeningRankId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningId':
            screeningId_ = ''
            for text__content_ in child_.childNodes:
                screeningId_ += text__content_.nodeValue
            self.screeningId = screeningId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningInputId':
            screeningInputId_ = ''
            for text__content_ in child_.childNodes:
                screeningInputId_ += text__content_.nodeValue
            self.screeningInputId = screeningInputId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'xmlSchemaId':
            xmlSchemaId_ = ''
            for text__content_ in child_.childNodes:
                xmlSchemaId_ += text__content_.nodeValue
            self.xmlSchemaId = xmlSchemaId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'containerId':
            containerId_ = ''
            for text__content_ in child_.childNodes:
                containerId_ += text__content_.nodeValue
            self.containerId = containerId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'proposalId':
            proposalId_ = ''
            for text__content_ in child_.childNodes:
                proposalId_ += text__content_.nodeValue
            self.proposalId = proposalId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'anomalousScatteringId':
            anomalousScatteringId_ = ''
            for text__content_ in child_.childNodes:
                anomalousScatteringId_ += text__content_.nodeValue
            self.anomalousScatteringId = anomalousScatteringId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'beamLineSetupId':
            beamLineSetupId_ = ''
            for text__content_ in child_.childNodes:
                beamLineSetupId_ += text__content_.nodeValue
            self.beamLineSetupId = beamLineSetupId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'anomalousScattererId':
            anomalousScattererId_ = ''
            for text__content_ in child_.childNodes:
                anomalousScattererId_ += text__content_.nodeValue
            self.anomalousScattererId = anomalousScattererId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'dewarId':
            dewarId_ = ''
            for text__content_ in child_.childNodes:
                dewarId_ += text__content_.nodeValue
            self.dewarId = dewarId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningStrategyId':
            screeningStrategyId_ = ''
            for text__content_ in child_.childNodes:
                screeningStrategyId_ += text__content_.nodeValue
            self.screeningStrategyId = screeningStrategyId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'crystal_has_UUID_Id':
            crystal_has_UUID_Id_ = ''
            for text__content_ in child_.childNodes:
                crystal_has_UUID_Id_ += text__content_.nodeValue
            self.crystal_has_UUID_Id = crystal_has_UUID_Id_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sessionId':
            sessionId_ = ''
            for text__content_ in child_.childNodes:
                sessionId_ += text__content_.nodeValue
            self.sessionId = sessionId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'personId':
            personId_ = ''
            for text__content_ in child_.childNodes:
                personId_ += text__content_.nodeValue
            self.personId = personId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'xmlDocumentId':
            xmlDocumentId_ = ''
            for text__content_ in child_.childNodes:
                xmlDocumentId_ += text__content_.nodeValue
            self.xmlDocumentId = xmlDocumentId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningRankSetId':
            screeningRankSetId_ = ''
            for text__content_ in child_.childNodes:
                screeningRankSetId_ += text__content_.nodeValue
            self.screeningRankSetId = screeningRankSetId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'energyScanId':
            energyScanId_ = ''
            for text__content_ in child_.childNodes:
                energyScanId_ += text__content_.nodeValue
            self.energyScanId = energyScanId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'shippingId':
            shippingId_ = ''
            for text__content_ in child_.childNodes:
                shippingId_ += text__content_.nodeValue
            self.shippingId = shippingId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'laboratoryId':
            laboratoryId_ = ''
            for text__content_ in child_.childNodes:
                laboratoryId_ += text__content_.nodeValue
            self.laboratoryId = laboratoryId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'crystalId':
            crystalId_ = ''
            for text__content_ in child_.childNodes:
                crystalId_ += text__content_.nodeValue
            self.crystalId = crystalId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'imageId':
            imageId_ = ''
            for text__content_ in child_.childNodes:
                imageId_ += text__content_.nodeValue
            self.imageId = imageId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningOutputId':
            screeningOutputId_ = ''
            for text__content_ in child_.childNodes:
                screeningOutputId_ += text__content_.nodeValue
            self.screeningOutputId = screeningOutputId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'screeningOutputLatticeId':
            screeningOutputLatticeId_ = ''
            for text__content_ in child_.childNodes:
                screeningOutputLatticeId_ += text__content_.nodeValue
            self.screeningOutputLatticeId = screeningOutputLatticeId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'dataCollectionId':
            dataCollectionId_ = ''
            for text__content_ in child_.childNodes:
                dataCollectionId_ += text__content_.nodeValue
            self.dataCollectionId = dataCollectionId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'xfeFluorescenceSpectrumId':
            xfeFluorescenceSpectrumId_ = ''
            for text__content_ in child_.childNodes:
                xfeFluorescenceSpectrumId_ += text__content_.nodeValue
            self.xfeFluorescenceSpectrumId = xfeFluorescenceSpectrumId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'diffractionPlanId':
            diffractionPlanId_ = ''
            for text__content_ in child_.childNodes:
                diffractionPlanId_ += text__content_.nodeValue
            self.diffractionPlanId = diffractionPlanId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'proteinId':
            proteinId_ = ''
            for text__content_ in child_.childNodes:
                proteinId_ += text__content_.nodeValue
            self.proteinId = proteinId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'code':
            code_ = ''
            for text__content_ in child_.childNodes:
                code_ += text__content_.nodeValue
            self.code = code_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'message':
            message_ = ''
            for text__content_ in child_.childNodes:
                message_ += text__content_.nodeValue
            self.message = message_
# end class dbstatus


class dbobject(object):
    subclass = None
    def __init__(self, SafetyRequest_object=None, ExperimentKindDetails_object=None, DatamatrixInSampleChanger_object=None, BLSample_object=None, ScreeningRank_object=None, Screening_object=None, ScreeningInput_object=None, XmlSchema_object=None, Container_object=None, Proposal_object=None, AnomalousScattering_object=None, BeamLineSetup_object=None, AnomalousScatterer_object=None, Dewar_object=None, ScreeningStrategy_object=None, Crystal_has_UUID_object=None, Session_has_Person_object=None, XmlDocument_object=None, ScreeningRankSet_object=None, BLSample_has_EnergyScan_object=None, Person_object=None, Shipping_object=None, Laboratory_object=None, EnergyScan_object=None, Crystal_object=None, Image_object=None, ScreeningOutput_object=None, ScreeningOutputLattice_object=None, DataCollection_object=None, Session_object=None, XFEFluorescenceSpectrum_object=None, DiffractionPlan_object=None, Protein_object=None):
        if SafetyRequest_object is None:
            self.SafetyRequest_object = []
        else:
            self.SafetyRequest_object = SafetyRequest_object
        if ExperimentKindDetails_object is None:
            self.ExperimentKindDetails_object = []
        else:
            self.ExperimentKindDetails_object = ExperimentKindDetails_object
        if DatamatrixInSampleChanger_object is None:
            self.DatamatrixInSampleChanger_object = []
        else:
            self.DatamatrixInSampleChanger_object = DatamatrixInSampleChanger_object
        if BLSample_object is None:
            self.BLSample_object = []
        else:
            self.BLSample_object = BLSample_object
        if ScreeningRank_object is None:
            self.ScreeningRank_object = []
        else:
            self.ScreeningRank_object = ScreeningRank_object
        if Screening_object is None:
            self.Screening_object = []
        else:
            self.Screening_object = Screening_object
        if ScreeningInput_object is None:
            self.ScreeningInput_object = []
        else:
            self.ScreeningInput_object = ScreeningInput_object
        if XmlSchema_object is None:
            self.XmlSchema_object = []
        else:
            self.XmlSchema_object = XmlSchema_object
        if Container_object is None:
            self.Container_object = []
        else:
            self.Container_object = Container_object
        if Proposal_object is None:
            self.Proposal_object = []
        else:
            self.Proposal_object = Proposal_object
        if AnomalousScattering_object is None:
            self.AnomalousScattering_object = []
        else:
            self.AnomalousScattering_object = AnomalousScattering_object
        if BeamLineSetup_object is None:
            self.BeamLineSetup_object = []
        else:
            self.BeamLineSetup_object = BeamLineSetup_object
        if AnomalousScatterer_object is None:
            self.AnomalousScatterer_object = []
        else:
            self.AnomalousScatterer_object = AnomalousScatterer_object
        if Dewar_object is None:
            self.Dewar_object = []
        else:
            self.Dewar_object = Dewar_object
        if ScreeningStrategy_object is None:
            self.ScreeningStrategy_object = []
        else:
            self.ScreeningStrategy_object = ScreeningStrategy_object
        if Crystal_has_UUID_object is None:
            self.Crystal_has_UUID_object = []
        else:
            self.Crystal_has_UUID_object = Crystal_has_UUID_object
        if Session_has_Person_object is None:
            self.Session_has_Person_object = []
        else:
            self.Session_has_Person_object = Session_has_Person_object
        if XmlDocument_object is None:
            self.XmlDocument_object = []
        else:
            self.XmlDocument_object = XmlDocument_object
        if ScreeningRankSet_object is None:
            self.ScreeningRankSet_object = []
        else:
            self.ScreeningRankSet_object = ScreeningRankSet_object
        if BLSample_has_EnergyScan_object is None:
            self.BLSample_has_EnergyScan_object = []
        else:
            self.BLSample_has_EnergyScan_object = BLSample_has_EnergyScan_object
        if Person_object is None:
            self.Person_object = []
        else:
            self.Person_object = Person_object
        if Shipping_object is None:
            self.Shipping_object = []
        else:
            self.Shipping_object = Shipping_object
        if Laboratory_object is None:
            self.Laboratory_object = []
        else:
            self.Laboratory_object = Laboratory_object
        if EnergyScan_object is None:
            self.EnergyScan_object = []
        else:
            self.EnergyScan_object = EnergyScan_object
        if Crystal_object is None:
            self.Crystal_object = []
        else:
            self.Crystal_object = Crystal_object
        if Image_object is None:
            self.Image_object = []
        else:
            self.Image_object = Image_object
        if ScreeningOutput_object is None:
            self.ScreeningOutput_object = []
        else:
            self.ScreeningOutput_object = ScreeningOutput_object
        if ScreeningOutputLattice_object is None:
            self.ScreeningOutputLattice_object = []
        else:
            self.ScreeningOutputLattice_object = ScreeningOutputLattice_object
        if DataCollection_object is None:
            self.DataCollection_object = []
        else:
            self.DataCollection_object = DataCollection_object
        if Session_object is None:
            self.Session_object = []
        else:
            self.Session_object = Session_object
        if XFEFluorescenceSpectrum_object is None:
            self.XFEFluorescenceSpectrum_object = []
        else:
            self.XFEFluorescenceSpectrum_object = XFEFluorescenceSpectrum_object
        if DiffractionPlan_object is None:
            self.DiffractionPlan_object = []
        else:
            self.DiffractionPlan_object = DiffractionPlan_object
        if Protein_object is None:
            self.Protein_object = []
        else:
            self.Protein_object = Protein_object
    def factory(*args_, **kwargs_):
        if dbobject.subclass:
            return dbobject.subclass(*args_, **kwargs_)
        else:
            return dbobject(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getSafetyRequest_object(self): return self.SafetyRequest_object
    def setSafetyRequest_object(self, SafetyRequest_object): self.SafetyRequest_object = SafetyRequest_object
    def addSafetyRequest_object(self, value): self.SafetyRequest_object.append(value)
    def insertSafetyRequest_object(self, index, value): self.SafetyRequest_object[index] = value
    def getExperimentKindDetails_object(self): return self.ExperimentKindDetails_object
    def setExperimentKindDetails_object(self, ExperimentKindDetails_object): self.ExperimentKindDetails_object = ExperimentKindDetails_object
    def addExperimentKindDetails_object(self, value): self.ExperimentKindDetails_object.append(value)
    def insertExperimentKindDetails_object(self, index, value): self.ExperimentKindDetails_object[index] = value
    def getDatamatrixInSampleChanger_object(self): return self.DatamatrixInSampleChanger_object
    def setDatamatrixInSampleChanger_object(self, DatamatrixInSampleChanger_object): self.DatamatrixInSampleChanger_object = DatamatrixInSampleChanger_object
    def addDatamatrixInSampleChanger_object(self, value): self.DatamatrixInSampleChanger_object.append(value)
    def insertDatamatrixInSampleChanger_object(self, index, value): self.DatamatrixInSampleChanger_object[index] = value
    def getBLSample_object(self): return self.BLSample_object
    def setBLSample_object(self, BLSample_object): self.BLSample_object = BLSample_object
    def addBLSample_object(self, value): self.BLSample_object.append(value)
    def insertBLSample_object(self, index, value): self.BLSample_object[index] = value
    def getScreeningRank_object(self): return self.ScreeningRank_object
    def setScreeningRank_object(self, ScreeningRank_object): self.ScreeningRank_object = ScreeningRank_object
    def addScreeningRank_object(self, value): self.ScreeningRank_object.append(value)
    def insertScreeningRank_object(self, index, value): self.ScreeningRank_object[index] = value
    def getScreening_object(self): return self.Screening_object
    def setScreening_object(self, Screening_object): self.Screening_object = Screening_object
    def addScreening_object(self, value): self.Screening_object.append(value)
    def insertScreening_object(self, index, value): self.Screening_object[index] = value
    def getScreeningInput_object(self): return self.ScreeningInput_object
    def setScreeningInput_object(self, ScreeningInput_object): self.ScreeningInput_object = ScreeningInput_object
    def addScreeningInput_object(self, value): self.ScreeningInput_object.append(value)
    def insertScreeningInput_object(self, index, value): self.ScreeningInput_object[index] = value
    def getXmlSchema_object(self): return self.XmlSchema_object
    def setXmlSchema_object(self, XmlSchema_object): self.XmlSchema_object = XmlSchema_object
    def addXmlSchema_object(self, value): self.XmlSchema_object.append(value)
    def insertXmlSchema_object(self, index, value): self.XmlSchema_object[index] = value
    def getContainer_object(self): return self.Container_object
    def setContainer_object(self, Container_object): self.Container_object = Container_object
    def addContainer_object(self, value): self.Container_object.append(value)
    def insertContainer_object(self, index, value): self.Container_object[index] = value
    def getProposal_object(self): return self.Proposal_object
    def setProposal_object(self, Proposal_object): self.Proposal_object = Proposal_object
    def addProposal_object(self, value): self.Proposal_object.append(value)
    def insertProposal_object(self, index, value): self.Proposal_object[index] = value
    def getAnomalousScattering_object(self): return self.AnomalousScattering_object
    def setAnomalousScattering_object(self, AnomalousScattering_object): self.AnomalousScattering_object = AnomalousScattering_object
    def addAnomalousScattering_object(self, value): self.AnomalousScattering_object.append(value)
    def insertAnomalousScattering_object(self, index, value): self.AnomalousScattering_object[index] = value
    def getBeamLineSetup_object(self): return self.BeamLineSetup_object
    def setBeamLineSetup_object(self, BeamLineSetup_object): self.BeamLineSetup_object = BeamLineSetup_object
    def addBeamLineSetup_object(self, value): self.BeamLineSetup_object.append(value)
    def insertBeamLineSetup_object(self, index, value): self.BeamLineSetup_object[index] = value
    def getAnomalousScatterer_object(self): return self.AnomalousScatterer_object
    def setAnomalousScatterer_object(self, AnomalousScatterer_object): self.AnomalousScatterer_object = AnomalousScatterer_object
    def addAnomalousScatterer_object(self, value): self.AnomalousScatterer_object.append(value)
    def insertAnomalousScatterer_object(self, index, value): self.AnomalousScatterer_object[index] = value
    def getDewar_object(self): return self.Dewar_object
    def setDewar_object(self, Dewar_object): self.Dewar_object = Dewar_object
    def addDewar_object(self, value): self.Dewar_object.append(value)
    def insertDewar_object(self, index, value): self.Dewar_object[index] = value
    def getScreeningStrategy_object(self): return self.ScreeningStrategy_object
    def setScreeningStrategy_object(self, ScreeningStrategy_object): self.ScreeningStrategy_object = ScreeningStrategy_object
    def addScreeningStrategy_object(self, value): self.ScreeningStrategy_object.append(value)
    def insertScreeningStrategy_object(self, index, value): self.ScreeningStrategy_object[index] = value
    def getCrystal_has_UUID_object(self): return self.Crystal_has_UUID_object
    def setCrystal_has_UUID_object(self, Crystal_has_UUID_object): self.Crystal_has_UUID_object = Crystal_has_UUID_object
    def addCrystal_has_UUID_object(self, value): self.Crystal_has_UUID_object.append(value)
    def insertCrystal_has_UUID_object(self, index, value): self.Crystal_has_UUID_object[index] = value
    def getSession_has_Person_object(self): return self.Session_has_Person_object
    def setSession_has_Person_object(self, Session_has_Person_object): self.Session_has_Person_object = Session_has_Person_object
    def addSession_has_Person_object(self, value): self.Session_has_Person_object.append(value)
    def insertSession_has_Person_object(self, index, value): self.Session_has_Person_object[index] = value
    def getXmlDocument_object(self): return self.XmlDocument_object
    def setXmlDocument_object(self, XmlDocument_object): self.XmlDocument_object = XmlDocument_object
    def addXmlDocument_object(self, value): self.XmlDocument_object.append(value)
    def insertXmlDocument_object(self, index, value): self.XmlDocument_object[index] = value
    def getScreeningRankSet_object(self): return self.ScreeningRankSet_object
    def setScreeningRankSet_object(self, ScreeningRankSet_object): self.ScreeningRankSet_object = ScreeningRankSet_object
    def addScreeningRankSet_object(self, value): self.ScreeningRankSet_object.append(value)
    def insertScreeningRankSet_object(self, index, value): self.ScreeningRankSet_object[index] = value
    def getBLSample_has_EnergyScan_object(self): return self.BLSample_has_EnergyScan_object
    def setBLSample_has_EnergyScan_object(self, BLSample_has_EnergyScan_object): self.BLSample_has_EnergyScan_object = BLSample_has_EnergyScan_object
    def addBLSample_has_EnergyScan_object(self, value): self.BLSample_has_EnergyScan_object.append(value)
    def insertBLSample_has_EnergyScan_object(self, index, value): self.BLSample_has_EnergyScan_object[index] = value
    def getPerson_object(self): return self.Person_object
    def setPerson_object(self, Person_object): self.Person_object = Person_object
    def addPerson_object(self, value): self.Person_object.append(value)
    def insertPerson_object(self, index, value): self.Person_object[index] = value
    def getShipping_object(self): return self.Shipping_object
    def setShipping_object(self, Shipping_object): self.Shipping_object = Shipping_object
    def addShipping_object(self, value): self.Shipping_object.append(value)
    def insertShipping_object(self, index, value): self.Shipping_object[index] = value
    def getLaboratory_object(self): return self.Laboratory_object
    def setLaboratory_object(self, Laboratory_object): self.Laboratory_object = Laboratory_object
    def addLaboratory_object(self, value): self.Laboratory_object.append(value)
    def insertLaboratory_object(self, index, value): self.Laboratory_object[index] = value
    def getEnergyScan_object(self): return self.EnergyScan_object
    def setEnergyScan_object(self, EnergyScan_object): self.EnergyScan_object = EnergyScan_object
    def addEnergyScan_object(self, value): self.EnergyScan_object.append(value)
    def insertEnergyScan_object(self, index, value): self.EnergyScan_object[index] = value
    def getCrystal_object(self): return self.Crystal_object
    def setCrystal_object(self, Crystal_object): self.Crystal_object = Crystal_object
    def addCrystal_object(self, value): self.Crystal_object.append(value)
    def insertCrystal_object(self, index, value): self.Crystal_object[index] = value
    def getImage_object(self): return self.Image_object
    def setImage_object(self, Image_object): self.Image_object = Image_object
    def addImage_object(self, value): self.Image_object.append(value)
    def insertImage_object(self, index, value): self.Image_object[index] = value
    def getScreeningOutput_object(self): return self.ScreeningOutput_object
    def setScreeningOutput_object(self, ScreeningOutput_object): self.ScreeningOutput_object = ScreeningOutput_object
    def addScreeningOutput_object(self, value): self.ScreeningOutput_object.append(value)
    def insertScreeningOutput_object(self, index, value): self.ScreeningOutput_object[index] = value
    def getScreeningOutputLattice_object(self): return self.ScreeningOutputLattice_object
    def setScreeningOutputLattice_object(self, ScreeningOutputLattice_object): self.ScreeningOutputLattice_object = ScreeningOutputLattice_object
    def addScreeningOutputLattice_object(self, value): self.ScreeningOutputLattice_object.append(value)
    def insertScreeningOutputLattice_object(self, index, value): self.ScreeningOutputLattice_object[index] = value
    def getDataCollection_object(self): return self.DataCollection_object
    def setDataCollection_object(self, DataCollection_object): self.DataCollection_object = DataCollection_object
    def addDataCollection_object(self, value): self.DataCollection_object.append(value)
    def insertDataCollection_object(self, index, value): self.DataCollection_object[index] = value
    def getSession_object(self): return self.Session_object
    def setSession_object(self, Session_object): self.Session_object = Session_object
    def addSession_object(self, value): self.Session_object.append(value)
    def insertSession_object(self, index, value): self.Session_object[index] = value
    def getXFEFluorescenceSpectrum_object(self): return self.XFEFluorescenceSpectrum_object
    def setXFEFluorescenceSpectrum_object(self, XFEFluorescenceSpectrum_object): self.XFEFluorescenceSpectrum_object = XFEFluorescenceSpectrum_object
    def addXFEFluorescenceSpectrum_object(self, value): self.XFEFluorescenceSpectrum_object.append(value)
    def insertXFEFluorescenceSpectrum_object(self, index, value): self.XFEFluorescenceSpectrum_object[index] = value
    def getDiffractionPlan_object(self): return self.DiffractionPlan_object
    def setDiffractionPlan_object(self, DiffractionPlan_object): self.DiffractionPlan_object = DiffractionPlan_object
    def addDiffractionPlan_object(self, value): self.DiffractionPlan_object.append(value)
    def insertDiffractionPlan_object(self, index, value): self.DiffractionPlan_object[index] = value
    def getProtein_object(self): return self.Protein_object
    def setProtein_object(self, Protein_object): self.Protein_object = Protein_object
    def addProtein_object(self, value): self.Protein_object.append(value)
    def insertProtein_object(self, index, value): self.Protein_object[index] = value
    def export(self, outfile, level = 0, name_='dbobject'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='dbobject'):
        pass
    def exportChildren(self, outfile, level, name_='dbobject'):
        for SafetyRequest_object_ in self.getSafetyRequest_object():
            SafetyRequest_object_.export(outfile, level, name_='SafetyRequest_object')
        for ExperimentKindDetails_object_ in self.getExperimentKindDetails_object():
            ExperimentKindDetails_object_.export(outfile, level, name_='ExperimentKindDetails_object')
        for DatamatrixInSampleChanger_object_ in self.getDatamatrixInSampleChanger_object():
            DatamatrixInSampleChanger_object_.export(outfile, level, name_='DatamatrixInSampleChanger_object')
        for BLSample_object_ in self.getBLSample_object():
            BLSample_object_.export(outfile, level, name_='BLSample_object')
        for ScreeningRank_object_ in self.getScreeningRank_object():
            ScreeningRank_object_.export(outfile, level, name_='ScreeningRank_object')
        for Screening_object_ in self.getScreening_object():
            Screening_object_.export(outfile, level, name_='Screening_object')
        for ScreeningInput_object_ in self.getScreeningInput_object():
            ScreeningInput_object_.export(outfile, level, name_='ScreeningInput_object')
        for XmlSchema_object_ in self.getXmlSchema_object():
            XmlSchema_object_.export(outfile, level, name_='XmlSchema_object')
        for Container_object_ in self.getContainer_object():
            Container_object_.export(outfile, level, name_='Container_object')
        for Proposal_object_ in self.getProposal_object():
            Proposal_object_.export(outfile, level, name_='Proposal_object')
        for AnomalousScattering_object_ in self.getAnomalousScattering_object():
            AnomalousScattering_object_.export(outfile, level, name_='AnomalousScattering_object')
        for BeamLineSetup_object_ in self.getBeamLineSetup_object():
            BeamLineSetup_object_.export(outfile, level, name_='BeamLineSetup_object')
        for AnomalousScatterer_object_ in self.getAnomalousScatterer_object():
            AnomalousScatterer_object_.export(outfile, level, name_='AnomalousScatterer_object')
        for Dewar_object_ in self.getDewar_object():
            Dewar_object_.export(outfile, level, name_='Dewar_object')
        for ScreeningStrategy_object_ in self.getScreeningStrategy_object():
            ScreeningStrategy_object_.export(outfile, level, name_='ScreeningStrategy_object')
        for Crystal_has_UUID_object_ in self.getCrystal_has_UUID_object():
            Crystal_has_UUID_object_.export(outfile, level, name_='Crystal_has_UUID_object')
        for Session_has_Person_object_ in self.getSession_has_Person_object():
            Session_has_Person_object_.export(outfile, level, name_='Session_has_Person_object')
        for XmlDocument_object_ in self.getXmlDocument_object():
            XmlDocument_object_.export(outfile, level, name_='XmlDocument_object')
        for ScreeningRankSet_object_ in self.getScreeningRankSet_object():
            ScreeningRankSet_object_.export(outfile, level, name_='ScreeningRankSet_object')
        for BLSample_has_EnergyScan_object_ in self.getBLSample_has_EnergyScan_object():
            BLSample_has_EnergyScan_object_.export(outfile, level, name_='BLSample_has_EnergyScan_object')
        for Person_object_ in self.getPerson_object():
            Person_object_.export(outfile, level, name_='Person_object')
        for Shipping_object_ in self.getShipping_object():
            Shipping_object_.export(outfile, level, name_='Shipping_object')
        for Laboratory_object_ in self.getLaboratory_object():
            Laboratory_object_.export(outfile, level, name_='Laboratory_object')
        for EnergyScan_object_ in self.getEnergyScan_object():
            EnergyScan_object_.export(outfile, level, name_='EnergyScan_object')
        for Crystal_object_ in self.getCrystal_object():
            Crystal_object_.export(outfile, level, name_='Crystal_object')
        for Image_object_ in self.getImage_object():
            Image_object_.export(outfile, level, name_='Image_object')
        for ScreeningOutput_object_ in self.getScreeningOutput_object():
            ScreeningOutput_object_.export(outfile, level, name_='ScreeningOutput_object')
        for ScreeningOutputLattice_object_ in self.getScreeningOutputLattice_object():
            ScreeningOutputLattice_object_.export(outfile, level, name_='ScreeningOutputLattice_object')
        for DataCollection_object_ in self.getDataCollection_object():
            DataCollection_object_.export(outfile, level, name_='DataCollection_object')
        for Session_object_ in self.getSession_object():
            Session_object_.export(outfile, level, name_='Session_object')
        for XFEFluorescenceSpectrum_object_ in self.getXFEFluorescenceSpectrum_object():
            XFEFluorescenceSpectrum_object_.export(outfile, level, name_='XFEFluorescenceSpectrum_object')
        for DiffractionPlan_object_ in self.getDiffractionPlan_object():
            DiffractionPlan_object_.export(outfile, level, name_='DiffractionPlan_object')
        for Protein_object_ in self.getProtein_object():
            Protein_object_.export(outfile, level, name_='Protein_object')

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='dbobject' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">dbobject:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='dbobject' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = dbobject.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="dbobject" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='dbobject'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('SafetyRequest_object=[\n')
        level += 1
        for SafetyRequest_object in self.SafetyRequest_object:
            showIndent(outfile, level)
            outfile.write('SafetyRequest(\n')
            SafetyRequest_object.exportLiteral(outfile, level, name_='SafetyRequest_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ExperimentKindDetails_object=[\n')
        level += 1
        for ExperimentKindDetails_object in self.ExperimentKindDetails_object:
            showIndent(outfile, level)
            outfile.write('ExperimentKindDetails(\n')
            ExperimentKindDetails_object.exportLiteral(outfile, level, name_='ExperimentKindDetails_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('DatamatrixInSampleChanger_object=[\n')
        level += 1
        for DatamatrixInSampleChanger_object in self.DatamatrixInSampleChanger_object:
            showIndent(outfile, level)
            outfile.write('DatamatrixInSampleChanger(\n')
            DatamatrixInSampleChanger_object.exportLiteral(outfile, level, name_='DatamatrixInSampleChanger_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('BLSample_object=[\n')
        level += 1
        for BLSample_object in self.BLSample_object:
            showIndent(outfile, level)
            outfile.write('BLSample(\n')
            BLSample_object.exportLiteral(outfile, level, name_='BLSample_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ScreeningRank_object=[\n')
        level += 1
        for ScreeningRank_object in self.ScreeningRank_object:
            showIndent(outfile, level)
            outfile.write('ScreeningRank(\n')
            ScreeningRank_object.exportLiteral(outfile, level, name_='ScreeningRank_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Screening_object=[\n')
        level += 1
        for Screening_object in self.Screening_object:
            showIndent(outfile, level)
            outfile.write('Screening(\n')
            Screening_object.exportLiteral(outfile, level, name_='Screening_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ScreeningInput_object=[\n')
        level += 1
        for ScreeningInput_object in self.ScreeningInput_object:
            showIndent(outfile, level)
            outfile.write('ScreeningInput(\n')
            ScreeningInput_object.exportLiteral(outfile, level, name_='ScreeningInput_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('XmlSchema_object=[\n')
        level += 1
        for XmlSchema_object in self.XmlSchema_object:
            showIndent(outfile, level)
            outfile.write('XmlSchema(\n')
            XmlSchema_object.exportLiteral(outfile, level, name_='XmlSchema_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Container_object=[\n')
        level += 1
        for Container_object in self.Container_object:
            showIndent(outfile, level)
            outfile.write('Container(\n')
            Container_object.exportLiteral(outfile, level, name_='Container_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Proposal_object=[\n')
        level += 1
        for Proposal_object in self.Proposal_object:
            showIndent(outfile, level)
            outfile.write('Proposal(\n')
            Proposal_object.exportLiteral(outfile, level, name_='Proposal_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('AnomalousScattering_object=[\n')
        level += 1
        for AnomalousScattering_object in self.AnomalousScattering_object:
            showIndent(outfile, level)
            outfile.write('AnomalousScattering(\n')
            AnomalousScattering_object.exportLiteral(outfile, level, name_='AnomalousScattering_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('BeamLineSetup_object=[\n')
        level += 1
        for BeamLineSetup_object in self.BeamLineSetup_object:
            showIndent(outfile, level)
            outfile.write('BeamLineSetup(\n')
            BeamLineSetup_object.exportLiteral(outfile, level, name_='BeamLineSetup_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('AnomalousScatterer_object=[\n')
        level += 1
        for AnomalousScatterer_object in self.AnomalousScatterer_object:
            showIndent(outfile, level)
            outfile.write('AnomalousScatterer(\n')
            AnomalousScatterer_object.exportLiteral(outfile, level, name_='AnomalousScatterer_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Dewar_object=[\n')
        level += 1
        for Dewar_object in self.Dewar_object:
            showIndent(outfile, level)
            outfile.write('Dewar(\n')
            Dewar_object.exportLiteral(outfile, level, name_='Dewar_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ScreeningStrategy_object=[\n')
        level += 1
        for ScreeningStrategy_object in self.ScreeningStrategy_object:
            showIndent(outfile, level)
            outfile.write('ScreeningStrategy(\n')
            ScreeningStrategy_object.exportLiteral(outfile, level, name_='ScreeningStrategy_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Crystal_has_UUID_object=[\n')
        level += 1
        for Crystal_has_UUID_object in self.Crystal_has_UUID_object:
            showIndent(outfile, level)
            outfile.write('Crystal_has_UUID(\n')
            Crystal_has_UUID_object.exportLiteral(outfile, level, name_='Crystal_has_UUID_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Session_has_Person_object=[\n')
        level += 1
        for Session_has_Person_object in self.Session_has_Person_object:
            showIndent(outfile, level)
            outfile.write('Session_has_Person(\n')
            Session_has_Person_object.exportLiteral(outfile, level, name_='Session_has_Person_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('XmlDocument_object=[\n')
        level += 1
        for XmlDocument_object in self.XmlDocument_object:
            showIndent(outfile, level)
            outfile.write('XmlDocument(\n')
            XmlDocument_object.exportLiteral(outfile, level, name_='XmlDocument_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ScreeningRankSet_object=[\n')
        level += 1
        for ScreeningRankSet_object in self.ScreeningRankSet_object:
            showIndent(outfile, level)
            outfile.write('ScreeningRankSet(\n')
            ScreeningRankSet_object.exportLiteral(outfile, level, name_='ScreeningRankSet_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('BLSample_has_EnergyScan_object=[\n')
        level += 1
        for BLSample_has_EnergyScan_object in self.BLSample_has_EnergyScan_object:
            showIndent(outfile, level)
            outfile.write('BLSample_has_EnergyScan(\n')
            BLSample_has_EnergyScan_object.exportLiteral(outfile, level, name_='BLSample_has_EnergyScan_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Person_object=[\n')
        level += 1
        for Person_object in self.Person_object:
            showIndent(outfile, level)
            outfile.write('Person(\n')
            Person_object.exportLiteral(outfile, level, name_='Person_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Shipping_object=[\n')
        level += 1
        for Shipping_object in self.Shipping_object:
            showIndent(outfile, level)
            outfile.write('Shipping(\n')
            Shipping_object.exportLiteral(outfile, level, name_='Shipping_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Laboratory_object=[\n')
        level += 1
        for Laboratory_object in self.Laboratory_object:
            showIndent(outfile, level)
            outfile.write('Laboratory(\n')
            Laboratory_object.exportLiteral(outfile, level, name_='Laboratory_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('EnergyScan_object=[\n')
        level += 1
        for EnergyScan_object in self.EnergyScan_object:
            showIndent(outfile, level)
            outfile.write('EnergyScan(\n')
            EnergyScan_object.exportLiteral(outfile, level, name_='EnergyScan_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Crystal_object=[\n')
        level += 1
        for Crystal_object in self.Crystal_object:
            showIndent(outfile, level)
            outfile.write('Crystal(\n')
            Crystal_object.exportLiteral(outfile, level, name_='Crystal_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Image_object=[\n')
        level += 1
        for Image_object in self.Image_object:
            showIndent(outfile, level)
            outfile.write('Image(\n')
            Image_object.exportLiteral(outfile, level, name_='Image_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ScreeningOutput_object=[\n')
        level += 1
        for ScreeningOutput_object in self.ScreeningOutput_object:
            showIndent(outfile, level)
            outfile.write('ScreeningOutput(\n')
            ScreeningOutput_object.exportLiteral(outfile, level, name_='ScreeningOutput_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ScreeningOutputLattice_object=[\n')
        level += 1
        for ScreeningOutputLattice_object in self.ScreeningOutputLattice_object:
            showIndent(outfile, level)
            outfile.write('ScreeningOutputLattice(\n')
            ScreeningOutputLattice_object.exportLiteral(outfile, level, name_='ScreeningOutputLattice_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('DataCollection_object=[\n')
        level += 1
        for DataCollection_object in self.DataCollection_object:
            showIndent(outfile, level)
            outfile.write('DataCollection(\n')
            DataCollection_object.exportLiteral(outfile, level, name_='DataCollection_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Session_object=[\n')
        level += 1
        for Session_object in self.Session_object:
            showIndent(outfile, level)
            outfile.write('Session(\n')
            Session_object.exportLiteral(outfile, level, name_='Session_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('XFEFluorescenceSpectrum_object=[\n')
        level += 1
        for XFEFluorescenceSpectrum_object in self.XFEFluorescenceSpectrum_object:
            showIndent(outfile, level)
            outfile.write('XFEFluorescenceSpectrum(\n')
            XFEFluorescenceSpectrum_object.exportLiteral(outfile, level, name_='XFEFluorescenceSpectrum_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('DiffractionPlan_object=[\n')
        level += 1
        for DiffractionPlan_object in self.DiffractionPlan_object:
            showIndent(outfile, level)
            outfile.write('DiffractionPlan(\n')
            DiffractionPlan_object.exportLiteral(outfile, level, name_='DiffractionPlan_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Protein_object=[\n')
        level += 1
        for Protein_object in self.Protein_object:
            showIndent(outfile, level)
            outfile.write('Protein(\n')
            Protein_object.exportLiteral(outfile, level, name_='Protein_object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='dbobject'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('SafetyRequest_object<br>\n')
        level += 1
        for SafetyRequest_object in self.SafetyRequest_object:
            SafetyRequest_object.exportLiteralHtml(outfile, level, name_='SafetyRequest_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('ExperimentKindDetails_object<br>\n')
        level += 1
        for ExperimentKindDetails_object in self.ExperimentKindDetails_object:
            ExperimentKindDetails_object.exportLiteralHtml(outfile, level, name_='ExperimentKindDetails_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('DatamatrixInSampleChanger_object<br>\n')
        level += 1
        for DatamatrixInSampleChanger_object in self.DatamatrixInSampleChanger_object:
            DatamatrixInSampleChanger_object.exportLiteralHtml(outfile, level, name_='DatamatrixInSampleChanger_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('BLSample_object<br>\n')
        level += 1
        for BLSample_object in self.BLSample_object:
            BLSample_object.exportLiteralHtml(outfile, level, name_='BLSample_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('ScreeningRank_object<br>\n')
        level += 1
        for ScreeningRank_object in self.ScreeningRank_object:
            ScreeningRank_object.exportLiteralHtml(outfile, level, name_='ScreeningRank_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('Screening_object<br>\n')
        level += 1
        for Screening_object in self.Screening_object:
            Screening_object.exportLiteralHtml(outfile, level, name_='Screening_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('ScreeningInput_object<br>\n')
        level += 1
        for ScreeningInput_object in self.ScreeningInput_object:
            ScreeningInput_object.exportLiteralHtml(outfile, level, name_='ScreeningInput_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('XmlSchema_object<br>\n')
        level += 1
        for XmlSchema_object in self.XmlSchema_object:
            XmlSchema_object.exportLiteralHtml(outfile, level, name_='XmlSchema_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('Container_object<br>\n')
        level += 1
        for Container_object in self.Container_object:
            Container_object.exportLiteralHtml(outfile, level, name_='Container_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('Proposal_object<br>\n')
        level += 1
        for Proposal_object in self.Proposal_object:
            Proposal_object.exportLiteralHtml(outfile, level, name_='Proposal_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('AnomalousScattering_object<br>\n')
        level += 1
        for AnomalousScattering_object in self.AnomalousScattering_object:
            AnomalousScattering_object.exportLiteralHtml(outfile, level, name_='AnomalousScattering_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('BeamLineSetup_object<br>\n')
        level += 1
        for BeamLineSetup_object in self.BeamLineSetup_object:
            BeamLineSetup_object.exportLiteralHtml(outfile, level, name_='BeamLineSetup_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('AnomalousScatterer_object<br>\n')
        level += 1
        for AnomalousScatterer_object in self.AnomalousScatterer_object:
            AnomalousScatterer_object.exportLiteralHtml(outfile, level, name_='AnomalousScatterer_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('Dewar_object<br>\n')
        level += 1
        for Dewar_object in self.Dewar_object:
            Dewar_object.exportLiteralHtml(outfile, level, name_='Dewar_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('ScreeningStrategy_object<br>\n')
        level += 1
        for ScreeningStrategy_object in self.ScreeningStrategy_object:
            ScreeningStrategy_object.exportLiteralHtml(outfile, level, name_='ScreeningStrategy_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('Crystal_has_UUID_object<br>\n')
        level += 1
        for Crystal_has_UUID_object in self.Crystal_has_UUID_object:
            Crystal_has_UUID_object.exportLiteralHtml(outfile, level, name_='Crystal_has_UUID_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('Session_has_Person_object<br>\n')
        level += 1
        for Session_has_Person_object in self.Session_has_Person_object:
            Session_has_Person_object.exportLiteralHtml(outfile, level, name_='Session_has_Person_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('XmlDocument_object<br>\n')
        level += 1
        for XmlDocument_object in self.XmlDocument_object:
            XmlDocument_object.exportLiteralHtml(outfile, level, name_='XmlDocument_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('ScreeningRankSet_object<br>\n')
        level += 1
        for ScreeningRankSet_object in self.ScreeningRankSet_object:
            ScreeningRankSet_object.exportLiteralHtml(outfile, level, name_='ScreeningRankSet_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('BLSample_has_EnergyScan_object<br>\n')
        level += 1
        for BLSample_has_EnergyScan_object in self.BLSample_has_EnergyScan_object:
            BLSample_has_EnergyScan_object.exportLiteralHtml(outfile, level, name_='BLSample_has_EnergyScan_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('Person_object<br>\n')
        level += 1
        for Person_object in self.Person_object:
            Person_object.exportLiteralHtml(outfile, level, name_='Person_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('Shipping_object<br>\n')
        level += 1
        for Shipping_object in self.Shipping_object:
            Shipping_object.exportLiteralHtml(outfile, level, name_='Shipping_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('Laboratory_object<br>\n')
        level += 1
        for Laboratory_object in self.Laboratory_object:
            Laboratory_object.exportLiteralHtml(outfile, level, name_='Laboratory_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('EnergyScan_object<br>\n')
        level += 1
        for EnergyScan_object in self.EnergyScan_object:
            EnergyScan_object.exportLiteralHtml(outfile, level, name_='EnergyScan_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('Crystal_object<br>\n')
        level += 1
        for Crystal_object in self.Crystal_object:
            Crystal_object.exportLiteralHtml(outfile, level, name_='Crystal_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('Image_object<br>\n')
        level += 1
        for Image_object in self.Image_object:
            Image_object.exportLiteralHtml(outfile, level, name_='Image_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('ScreeningOutput_object<br>\n')
        level += 1
        for ScreeningOutput_object in self.ScreeningOutput_object:
            ScreeningOutput_object.exportLiteralHtml(outfile, level, name_='ScreeningOutput_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('ScreeningOutputLattice_object<br>\n')
        level += 1
        for ScreeningOutputLattice_object in self.ScreeningOutputLattice_object:
            ScreeningOutputLattice_object.exportLiteralHtml(outfile, level, name_='ScreeningOutputLattice_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('DataCollection_object<br>\n')
        level += 1
        for DataCollection_object in self.DataCollection_object:
            DataCollection_object.exportLiteralHtml(outfile, level, name_='DataCollection_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('Session_object<br>\n')
        level += 1
        for Session_object in self.Session_object:
            Session_object.exportLiteralHtml(outfile, level, name_='Session_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('XFEFluorescenceSpectrum_object<br>\n')
        level += 1
        for XFEFluorescenceSpectrum_object in self.XFEFluorescenceSpectrum_object:
            XFEFluorescenceSpectrum_object.exportLiteralHtml(outfile, level, name_='XFEFluorescenceSpectrum_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('DiffractionPlan_object<br>\n')
        level += 1
        for DiffractionPlan_object in self.DiffractionPlan_object:
            DiffractionPlan_object.exportLiteralHtml(outfile, level, name_='DiffractionPlan_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('Protein_object<br>\n')
        level += 1
        for Protein_object in self.Protein_object:
            Protein_object.exportLiteralHtml(outfile, level, name_='Protein_object')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SafetyRequest_object':
            obj_ = SafetyRequest.factory()
            obj_.build(child_)
            self.SafetyRequest_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ExperimentKindDetails_object':
            obj_ = ExperimentKindDetails.factory()
            obj_.build(child_)
            self.ExperimentKindDetails_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'DatamatrixInSampleChanger_object':
            obj_ = DatamatrixInSampleChanger.factory()
            obj_.build(child_)
            self.DatamatrixInSampleChanger_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'BLSample_object':
            obj_ = BLSample.factory()
            obj_.build(child_)
            self.BLSample_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ScreeningRank_object':
            obj_ = ScreeningRank.factory()
            obj_.build(child_)
            self.ScreeningRank_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Screening_object':
            obj_ = Screening.factory()
            obj_.build(child_)
            self.Screening_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ScreeningInput_object':
            obj_ = ScreeningInput.factory()
            obj_.build(child_)
            self.ScreeningInput_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'XmlSchema_object':
            obj_ = XmlSchema.factory()
            obj_.build(child_)
            self.XmlSchema_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Container_object':
            obj_ = Container.factory()
            obj_.build(child_)
            self.Container_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Proposal_object':
            obj_ = Proposal.factory()
            obj_.build(child_)
            self.Proposal_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'AnomalousScattering_object':
            obj_ = AnomalousScattering.factory()
            obj_.build(child_)
            self.AnomalousScattering_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'BeamLineSetup_object':
            obj_ = BeamLineSetup.factory()
            obj_.build(child_)
            self.BeamLineSetup_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'AnomalousScatterer_object':
            obj_ = AnomalousScatterer.factory()
            obj_.build(child_)
            self.AnomalousScatterer_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Dewar_object':
            obj_ = Dewar.factory()
            obj_.build(child_)
            self.Dewar_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ScreeningStrategy_object':
            obj_ = ScreeningStrategy.factory()
            obj_.build(child_)
            self.ScreeningStrategy_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Crystal_has_UUID_object':
            obj_ = Crystal_has_UUID.factory()
            obj_.build(child_)
            self.Crystal_has_UUID_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Session_has_Person_object':
            obj_ = Session_has_Person.factory()
            obj_.build(child_)
            self.Session_has_Person_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'XmlDocument_object':
            obj_ = XmlDocument.factory()
            obj_.build(child_)
            self.XmlDocument_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ScreeningRankSet_object':
            obj_ = ScreeningRankSet.factory()
            obj_.build(child_)
            self.ScreeningRankSet_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'BLSample_has_EnergyScan_object':
            obj_ = BLSample_has_EnergyScan.factory()
            obj_.build(child_)
            self.BLSample_has_EnergyScan_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Person_object':
            obj_ = Person.factory()
            obj_.build(child_)
            self.Person_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Shipping_object':
            obj_ = Shipping.factory()
            obj_.build(child_)
            self.Shipping_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Laboratory_object':
            obj_ = Laboratory.factory()
            obj_.build(child_)
            self.Laboratory_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'EnergyScan_object':
            obj_ = EnergyScan.factory()
            obj_.build(child_)
            self.EnergyScan_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Crystal_object':
            obj_ = Crystal.factory()
            obj_.build(child_)
            self.Crystal_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Image_object':
            obj_ = Image.factory()
            obj_.build(child_)
            self.Image_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ScreeningOutput_object':
            obj_ = ScreeningOutput.factory()
            obj_.build(child_)
            self.ScreeningOutput_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ScreeningOutputLattice_object':
            obj_ = ScreeningOutputLattice.factory()
            obj_.build(child_)
            self.ScreeningOutputLattice_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'DataCollection_object':
            obj_ = DataCollection.factory()
            obj_.build(child_)
            self.DataCollection_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Session_object':
            obj_ = Session.factory()
            obj_.build(child_)
            self.Session_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'XFEFluorescenceSpectrum_object':
            obj_ = XFEFluorescenceSpectrum.factory()
            obj_.build(child_)
            self.XFEFluorescenceSpectrum_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'DiffractionPlan_object':
            obj_ = DiffractionPlan.factory()
            obj_.build(child_)
            self.DiffractionPlan_object.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Protein_object':
            obj_ = Protein.factory()
            obj_.build(child_)
            self.Protein_object.append(obj_)
# end class dbobject


class mosflm_commands(object):
    subclass = None
    def __init__(self, command=None):
        if command is None:
            self.command = []
        else:
            self.command = command
    def factory(*args_, **kwargs_):
        if mosflm_commands.subclass:
            return mosflm_commands.subclass(*args_, **kwargs_)
        else:
            return mosflm_commands(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getCommand(self): return self.command
    def setCommand(self, command): self.command = command
    def addCommand(self, value): self.command.append(value)
    def insertCommand(self, index, value): self.command[index] = value
    def export(self, outfile, level = 0, name_='mosflm_commands'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='mosflm_commands'):
        pass
    def exportChildren(self, outfile, level, name_='mosflm_commands'):
        for command_ in self.getCommand():
            showIndent(outfile, level)
            outfile.write('<command>%s</command>\n' % quote_xml(command_))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='mosflm_commands' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">mosflm_commands:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='mosflm_commands' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = mosflm_commands.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="mosflm_commands" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='mosflm_commands'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('command=[\n')
        level += 1
        for command in self.command:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(command))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='mosflm_commands'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('command<br>\n')
        level += 1
        for command in self.command:
            showIndentHtml(outfile, level)
            outfile.write('<a  href:"#">%s</a><br>\n' % quote_python(command))
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'command':
            command_ = ''
            for text__content_ in child_.childNodes:
                command_ += text__content_.nodeValue
            self.command.append(command_)
# end class mosflm_commands


class scala_commands(object):
    subclass = None
    def __init__(self, command=None):
        if command is None:
            self.command = []
        else:
            self.command = command
    def factory(*args_, **kwargs_):
        if scala_commands.subclass:
            return scala_commands.subclass(*args_, **kwargs_)
        else:
            return scala_commands(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getCommand(self): return self.command
    def setCommand(self, command): self.command = command
    def addCommand(self, value): self.command.append(value)
    def insertCommand(self, index, value): self.command[index] = value
    def export(self, outfile, level = 0, name_='scala_commands'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='scala_commands'):
        pass
    def exportChildren(self, outfile, level, name_='scala_commands'):
        for command_ in self.getCommand():
            showIndent(outfile, level)
            outfile.write('<command>%s</command>\n' % quote_xml(command_))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='scala_commands' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">scala_commands:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='scala_commands' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = scala_commands.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="scala_commands" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='scala_commands'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('command=[\n')
        level += 1
        for command in self.command:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(command))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='scala_commands'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('command<br>\n')
        level += 1
        for command in self.command:
            showIndentHtml(outfile, level)
            outfile.write('<a  href:"#">%s</a><br>\n' % quote_python(command))
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'command':
            command_ = ''
            for text__content_ in child_.childNodes:
                command_ += text__content_.nodeValue
            self.command.append(command_)
# end class scala_commands


class xds_commands(object):
    subclass = None
    def __init__(self, command=None):
        if command is None:
            self.command = []
        else:
            self.command = command
    def factory(*args_, **kwargs_):
        if xds_commands.subclass:
            return xds_commands.subclass(*args_, **kwargs_)
        else:
            return xds_commands(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getCommand(self): return self.command
    def setCommand(self, command): self.command = command
    def addCommand(self, value): self.command.append(value)
    def insertCommand(self, index, value): self.command[index] = value
    def export(self, outfile, level = 0, name_='xds_commands'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='xds_commands'):
        pass
    def exportChildren(self, outfile, level, name_='xds_commands'):
        for command_ in self.getCommand():
            showIndent(outfile, level)
            outfile.write('<command>%s</command>\n' % quote_xml(command_))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='xds_commands' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">xds_commands:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='xds_commands' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = xds_commands.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="xds_commands" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='xds_commands'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('command=[\n')
        level += 1
        for command in self.command:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(command))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='xds_commands'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('command<br>\n')
        level += 1
        for command in self.command:
            showIndentHtml(outfile, level)
            outfile.write('<a  href:"#">%s</a><br>\n' % quote_python(command))
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'command':
            command_ = ''
            for text__content_ in child_.childNodes:
                command_ += text__content_.nodeValue
            self.command.append(command_)
# end class xds_commands


class extra_commands(object):
    subclass = None
    def __init__(self, mosflm_commands=None, scala_commands=None, xds_commands=None):
        self.mosflm_commands = mosflm_commands
        self.scala_commands = scala_commands
        self.xds_commands = xds_commands
    def factory(*args_, **kwargs_):
        if extra_commands.subclass:
            return extra_commands.subclass(*args_, **kwargs_)
        else:
            return extra_commands(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getMosflm_commands(self): return self.mosflm_commands
    def setMosflm_commands(self, mosflm_commands): self.mosflm_commands = mosflm_commands
    def getScala_commands(self): return self.scala_commands
    def setScala_commands(self, scala_commands): self.scala_commands = scala_commands
    def getXds_commands(self): return self.xds_commands
    def setXds_commands(self, xds_commands): self.xds_commands = xds_commands
    def export(self, outfile, level = 0, name_='extra_commands'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='extra_commands'):
        pass
    def exportChildren(self, outfile, level, name_='extra_commands'):
        if self.mosflm_commands:
            self.mosflm_commands.export(outfile, level)
        if self.scala_commands:
            self.scala_commands.export(outfile, level)
        if self.xds_commands:
            self.xds_commands.export(outfile, level)

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='extra_commands' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">extra_commands:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='extra_commands' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = extra_commands.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="extra_commands" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='extra_commands'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.mosflm_commands:
            showIndent(outfile, level)
            outfile.write('mosflm_commands = mosflm_commands(\n')
            self.mosflm_commands.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.scala_commands:
            showIndent(outfile, level)
            outfile.write('scala_commands = scala_commands(\n')
            self.scala_commands.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.xds_commands:
            showIndent(outfile, level)
            outfile.write('xds_commands = xds_commands(\n')
            self.xds_commands.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='extra_commands'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        if self.mosflm_commands:
            showIndentHtml(outfile, level)
            outfile.write('mosflm_commands<br>\n')
            self.mosflm_commands.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        if self.scala_commands:
            showIndentHtml(outfile, level)
            outfile.write('scala_commands<br>\n')
            self.scala_commands.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        if self.xds_commands:
            showIndentHtml(outfile, level)
            outfile.write('xds_commands<br>\n')
            self.xds_commands.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'mosflm_commands':
            obj_ = mosflm_commands.factory()
            obj_.build(child_)
            self.setMosflm_commands(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'scala_commands':
            obj_ = scala_commands.factory()
            obj_.build(child_)
            self.setScala_commands(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'xds_commands':
            obj_ = xds_commands.factory()
            obj_.build(child_)
            self.setXds_commands(obj_)
# end class extra_commands


class status(object):
    subclass = None
    def __init__(self, code='', message=''):
        self.code = code
        self.message = message
    def factory(*args_, **kwargs_):
        if status.subclass:
            return status.subclass(*args_, **kwargs_)
        else:
            return status(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getCode(self): return self.code
    def setCode(self, code): self.code = code
    def getMessage(self): return self.message
    def setMessage(self, message): self.message = message
    def export(self, outfile, level = 0, name_='status'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='status'):
        pass
    def exportChildren(self, outfile, level, name_='status'):
        showIndent(outfile, level)
        outfile.write('<code>%s</code>\n' % quote_xml(self.getCode()))
        showIndent(outfile, level)
        outfile.write('<message>%s</message>\n' % quote_xml(self.getMessage()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='status' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">status:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='status' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = status.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="status" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='status'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('code = %s,\n' % quote_python(self.getCode()))
        showIndent(outfile, level)
        outfile.write('message = %s,\n' % quote_python(self.getMessage()))
    def exportLiteralHtml(self, outfile, level = 0, name_='status'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('code = <a  href:"#">%s</a><br>\n' % quote_python(self.getCode()))
        showIndentHtml(outfile, level)
        outfile.write('message = <a  href:"#">%s</a><br>\n' % quote_python(self.getMessage()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'code':
            code_ = ''
            for text__content_ in child_.childNodes:
                code_ += text__content_.nodeValue
            self.code = code_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'message':
            message_ = ''
            for text__content_ in child_.childNodes:
                message_ += text__content_.nodeValue
            self.message = message_
# end class status


class fileinfo(object):
    subclass = None
    def __init__(self, directory='', prefix='', suffix='', template='', run_number=''):
        self.directory = directory
        self.prefix = prefix
        self.suffix = suffix
        self.template = template
        self.run_number = run_number
    def factory(*args_, **kwargs_):
        if fileinfo.subclass:
            return fileinfo.subclass(*args_, **kwargs_)
        else:
            return fileinfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getDirectory(self): return self.directory
    def setDirectory(self, directory): self.directory = directory
    def getPrefix(self): return self.prefix
    def setPrefix(self, prefix): self.prefix = prefix
    def getSuffix(self): return self.suffix
    def setSuffix(self, suffix): self.suffix = suffix
    def getTemplate(self): return self.template
    def setTemplate(self, template): self.template = template
    def getRun_number(self): return self.run_number
    def setRun_number(self, run_number): self.run_number = run_number
    def export(self, outfile, level = 0, name_='fileinfo'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='fileinfo'):
        pass
    def exportChildren(self, outfile, level, name_='fileinfo'):
        showIndent(outfile, level)
        outfile.write('<directory>%s</directory>\n' % quote_xml(self.getDirectory()))
        showIndent(outfile, level)
        outfile.write('<prefix>%s</prefix>\n' % quote_xml(self.getPrefix()))
        showIndent(outfile, level)
        outfile.write('<suffix>%s</suffix>\n' % quote_xml(self.getSuffix()))
        showIndent(outfile, level)
        outfile.write('<template>%s</template>\n' % quote_xml(self.getTemplate()))
        showIndent(outfile, level)
        outfile.write('<run_number>%s</run_number>\n' % quote_xml(self.getRun_number()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='fileinfo' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">fileinfo:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='fileinfo' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = fileinfo.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="fileinfo" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='fileinfo'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('directory = %s,\n' % quote_python(self.getDirectory()))
        showIndent(outfile, level)
        outfile.write('prefix = %s,\n' % quote_python(self.getPrefix()))
        showIndent(outfile, level)
        outfile.write('suffix = %s,\n' % quote_python(self.getSuffix()))
        showIndent(outfile, level)
        outfile.write('template = %s,\n' % quote_python(self.getTemplate()))
        showIndent(outfile, level)
        outfile.write('run_number = %s,\n' % quote_python(self.getRun_number()))
    def exportLiteralHtml(self, outfile, level = 0, name_='fileinfo'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('directory = <a  href:"#">%s</a><br>\n' % quote_python(self.getDirectory()))
        showIndentHtml(outfile, level)
        outfile.write('prefix = <a  href:"#">%s</a><br>\n' % quote_python(self.getPrefix()))
        showIndentHtml(outfile, level)
        outfile.write('suffix = <a  href:"#">%s</a><br>\n' % quote_python(self.getSuffix()))
        showIndentHtml(outfile, level)
        outfile.write('template = <a  href:"#">%s</a><br>\n' % quote_python(self.getTemplate()))
        showIndentHtml(outfile, level)
        outfile.write('run_number = <a  href:"#">%s</a><br>\n' % quote_python(self.getRun_number()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'directory':
            directory_ = ''
            for text__content_ in child_.childNodes:
                directory_ += text__content_.nodeValue
            self.directory = directory_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'prefix':
            prefix_ = ''
            for text__content_ in child_.childNodes:
                prefix_ += text__content_.nodeValue
            self.prefix = prefix_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'suffix':
            suffix_ = ''
            for text__content_ in child_.childNodes:
                suffix_ += text__content_.nodeValue
            self.suffix = suffix_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'template':
            template_ = ''
            for text__content_ in child_.childNodes:
                template_ += text__content_.nodeValue
            self.template = template_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'run_number':
            run_number_ = ''
            for text__content_ in child_.childNodes:
                run_number_ += text__content_.nodeValue
            self.run_number = run_number_
# end class fileinfo


class oscillation_sequence(object):
    subclass = None
    def __init__(self, start=0.0, end=0.0, range=0.0, number_of_images='', overlap=0.0, exposure_time=0.0, start_image_number='', number_of_passes=''):
        self.start = start
        self.end = end
        self.range = range
        self.number_of_images = number_of_images
        self.overlap = overlap
        self.exposure_time = exposure_time
        self.start_image_number = start_image_number
        self.number_of_passes = number_of_passes
    def factory(*args_, **kwargs_):
        if oscillation_sequence.subclass:
            return oscillation_sequence.subclass(*args_, **kwargs_)
        else:
            return oscillation_sequence(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getStart(self): return self.start
    def setStart(self, start): self.start = start
    def getEnd(self): return self.end
    def setEnd(self, end): self.end = end
    def getRange(self): return self.range
    def setRange(self, range): self.range = range
    def getNumber_of_images(self): return self.number_of_images
    def setNumber_of_images(self, number_of_images): self.number_of_images = number_of_images
    def getOverlap(self): return self.overlap
    def setOverlap(self, overlap): self.overlap = overlap
    def getExposure_time(self): return self.exposure_time
    def setExposure_time(self, exposure_time): self.exposure_time = exposure_time
    def getStart_image_number(self): return self.start_image_number
    def setStart_image_number(self, start_image_number): self.start_image_number = start_image_number
    def getNumber_of_passes(self): return self.number_of_passes
    def setNumber_of_passes(self, number_of_passes): self.number_of_passes = number_of_passes
    def export(self, outfile, level = 0, name_='oscillation_sequence'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='oscillation_sequence'):
        pass
    def exportChildren(self, outfile, level, name_='oscillation_sequence'):
        showIndent(outfile, level)
        outfile.write('<start>%e</start>\n' % self.getStart())
        showIndent(outfile, level)
        outfile.write('<end>%e</end>\n' % self.getEnd())
        showIndent(outfile, level)
        outfile.write('<range>%e</range>\n' % self.getRange())
        showIndent(outfile, level)
        outfile.write('<number_of_images>%s</number_of_images>\n' % quote_xml(self.getNumber_of_images()))
        showIndent(outfile, level)
        outfile.write('<overlap>%e</overlap>\n' % self.getOverlap())
        showIndent(outfile, level)
        outfile.write('<exposure_time>%e</exposure_time>\n' % self.getExposure_time())
        showIndent(outfile, level)
        outfile.write('<start_image_number>%s</start_image_number>\n' % quote_xml(self.getStart_image_number()))
        showIndent(outfile, level)
        outfile.write('<number_of_passes>%s</number_of_passes>\n' % quote_xml(self.getNumber_of_passes()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='oscillation_sequence' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">oscillation_sequence:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='oscillation_sequence' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = oscillation_sequence.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="oscillation_sequence" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='oscillation_sequence'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('start = %e,\n' % self.getStart())
        showIndent(outfile, level)
        outfile.write('end = %e,\n' % self.getEnd())
        showIndent(outfile, level)
        outfile.write('range = %e,\n' % self.getRange())
        showIndent(outfile, level)
        outfile.write('number_of_images = %s,\n' % quote_python(self.getNumber_of_images()))
        showIndent(outfile, level)
        outfile.write('overlap = %e,\n' % self.getOverlap())
        showIndent(outfile, level)
        outfile.write('exposure_time = %e,\n' % self.getExposure_time())
        showIndent(outfile, level)
        outfile.write('start_image_number = %s,\n' % quote_python(self.getStart_image_number()))
        showIndent(outfile, level)
        outfile.write('number_of_passes = %s,\n' % quote_python(self.getNumber_of_passes()))
    def exportLiteralHtml(self, outfile, level = 0, name_='oscillation_sequence'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('start = <a  href:"#">%e</a><br>\n' % self.getStart())
        showIndentHtml(outfile, level)
        outfile.write('end = <a  href:"#">%e</a><br>\n' % self.getEnd())
        showIndentHtml(outfile, level)
        outfile.write('range = <a  href:"#">%e</a><br>\n' % self.getRange())
        showIndentHtml(outfile, level)
        outfile.write('number_of_images = <a  href:"#">%s</a><br>\n' % quote_python(self.getNumber_of_images()))
        showIndentHtml(outfile, level)
        outfile.write('overlap = <a  href:"#">%e</a><br>\n' % self.getOverlap())
        showIndentHtml(outfile, level)
        outfile.write('exposure_time = <a  href:"#">%e</a><br>\n' % self.getExposure_time())
        showIndentHtml(outfile, level)
        outfile.write('start_image_number = <a  href:"#">%s</a><br>\n' % quote_python(self.getStart_image_number()))
        showIndentHtml(outfile, level)
        outfile.write('number_of_passes = <a  href:"#">%s</a><br>\n' % quote_python(self.getNumber_of_passes()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'start':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.start = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'end':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.end = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'range':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.range = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'number_of_images':
            number_of_images_ = ''
            for text__content_ in child_.childNodes:
                number_of_images_ += text__content_.nodeValue
            self.number_of_images = number_of_images_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'overlap':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.overlap = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'exposure_time':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.exposure_time = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'start_image_number':
            start_image_number_ = ''
            for text__content_ in child_.childNodes:
                start_image_number_ += text__content_.nodeValue
            self.start_image_number = start_image_number_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'number_of_passes':
            number_of_passes_ = ''
            for text__content_ in child_.childNodes:
                number_of_passes_ += text__content_.nodeValue
            self.number_of_passes = number_of_passes_
# end class oscillation_sequence


class detector(object):
    subclass = None
    def __init__(self, ttype='', suffix=''):
        self.ttype = ttype
        self.suffix = suffix
    def factory(*args_, **kwargs_):
        if detector.subclass:
            return detector.subclass(*args_, **kwargs_)
        else:
            return detector(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getType(self): return self.ttype
    def setType(self, ttype): self.ttype = ttype
    def getSuffix(self): return self.suffix
    def setSuffix(self, suffix): self.suffix = suffix
    def export(self, outfile, level = 0, name_='detector'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='detector'):
        pass
    def exportChildren(self, outfile, level, name_='detector'):
        showIndent(outfile, level)
        outfile.write('<type>%s</type>\n' % quote_xml(self.getType()))
        showIndent(outfile, level)
        outfile.write('<suffix>%s</suffix>\n' % quote_xml(self.getSuffix()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='detector' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">detector:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='detector' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = detector.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="detector" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='detector'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('ttype = %s,\n' % quote_python(self.getType()))
        showIndent(outfile, level)
        outfile.write('suffix = %s,\n' % quote_python(self.getSuffix()))
    def exportLiteralHtml(self, outfile, level = 0, name_='detector'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('ttype = <a  href:"#">%s</a><br>\n' % quote_python(self.getType()))
        showIndentHtml(outfile, level)
        outfile.write('suffix = <a  href:"#">%s</a><br>\n' % quote_python(self.getSuffix()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'type':
            type_ = ''
            for text__content_ in child_.childNodes:
                type_ += text__content_.nodeValue
            self.ttype = type_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'suffix':
            suffix_ = ''
            for text__content_ in child_.childNodes:
                suffix_ += text__content_.nodeValue
            self.suffix = suffix_
# end class detector


class beam(object):
    subclass = None
    def __init__(self, x=0.0, y=0.0):
        self.x = x
        self.y = y
    def factory(*args_, **kwargs_):
        if beam.subclass:
            return beam.subclass(*args_, **kwargs_)
        else:
            return beam(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getX(self): return self.x
    def setX(self, x): self.x = x
    def getY(self): return self.y
    def setY(self, y): self.y = y
    def export(self, outfile, level = 0, name_='beam'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='beam'):
        pass
    def exportChildren(self, outfile, level, name_='beam'):
        showIndent(outfile, level)
        outfile.write('<x>%e</x>\n' % self.getX())
        showIndent(outfile, level)
        outfile.write('<y>%e</y>\n' % self.getY())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='beam' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">beam:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='beam' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = beam.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="beam" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='beam'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('x = %e,\n' % self.getX())
        showIndent(outfile, level)
        outfile.write('y = %e,\n' % self.getY())
    def exportLiteralHtml(self, outfile, level = 0, name_='beam'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('x = <a  href:"#">%e</a><br>\n' % self.getX())
        showIndentHtml(outfile, level)
        outfile.write('y = <a  href:"#">%e</a><br>\n' % self.getY())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'x':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.x = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'y':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.y = fval_
# end class beam


class cell(object):
    subclass = None
    def __init__(self, a=0.0, b=0.0, c=0.0, alpha=0.0, beta=0.0, gamma=0.0):
        self.a = a
        self.b = b
        self.c = c
        self.alpha = alpha
        self.beta = beta
        self.gamma = gamma
    def factory(*args_, **kwargs_):
        if cell.subclass:
            return cell.subclass(*args_, **kwargs_)
        else:
            return cell(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getA(self): return self.a
    def setA(self, a): self.a = a
    def getB(self): return self.b
    def setB(self, b): self.b = b
    def getC(self): return self.c
    def setC(self, c): self.c = c
    def getAlpha(self): return self.alpha
    def setAlpha(self, alpha): self.alpha = alpha
    def getBeta(self): return self.beta
    def setBeta(self, beta): self.beta = beta
    def getGamma(self): return self.gamma
    def setGamma(self, gamma): self.gamma = gamma
    def export(self, outfile, level = 0, name_='cell'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='cell'):
        pass
    def exportChildren(self, outfile, level, name_='cell'):
        showIndent(outfile, level)
        outfile.write('<a>%e</a>\n' % self.getA())
        showIndent(outfile, level)
        outfile.write('<b>%e</b>\n' % self.getB())
        showIndent(outfile, level)
        outfile.write('<c>%e</c>\n' % self.getC())
        showIndent(outfile, level)
        outfile.write('<alpha>%e</alpha>\n' % self.getAlpha())
        showIndent(outfile, level)
        outfile.write('<beta>%e</beta>\n' % self.getBeta())
        showIndent(outfile, level)
        outfile.write('<gamma>%e</gamma>\n' % self.getGamma())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='cell' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">cell:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='cell' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = cell.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="cell" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='cell'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('a = %e,\n' % self.getA())
        showIndent(outfile, level)
        outfile.write('b = %e,\n' % self.getB())
        showIndent(outfile, level)
        outfile.write('c = %e,\n' % self.getC())
        showIndent(outfile, level)
        outfile.write('alpha = %e,\n' % self.getAlpha())
        showIndent(outfile, level)
        outfile.write('beta = %e,\n' % self.getBeta())
        showIndent(outfile, level)
        outfile.write('gamma = %e,\n' % self.getGamma())
    def exportLiteralHtml(self, outfile, level = 0, name_='cell'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('a = <a  href:"#">%e</a><br>\n' % self.getA())
        showIndentHtml(outfile, level)
        outfile.write('b = <a  href:"#">%e</a><br>\n' % self.getB())
        showIndentHtml(outfile, level)
        outfile.write('c = <a  href:"#">%e</a><br>\n' % self.getC())
        showIndentHtml(outfile, level)
        outfile.write('alpha = <a  href:"#">%e</a><br>\n' % self.getAlpha())
        showIndentHtml(outfile, level)
        outfile.write('beta = <a  href:"#">%e</a><br>\n' % self.getBeta())
        showIndentHtml(outfile, level)
        outfile.write('gamma = <a  href:"#">%e</a><br>\n' % self.getGamma())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'a':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.a = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'b':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.b = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'c':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.c = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'alpha':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.alpha = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'beta':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.beta = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'gamma':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.gamma = fval_
# end class cell


class experiment(object):
    subclass = None
    def __init__(self, wavelength=0.0, distance=0.0, resolution=None):
        self.wavelength = wavelength
        self.distance = distance
        self.resolution = resolution
    def factory(*args_, **kwargs_):
        if experiment.subclass:
            return experiment.subclass(*args_, **kwargs_)
        else:
            return experiment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getWavelength(self): return self.wavelength
    def setWavelength(self, wavelength): self.wavelength = wavelength
    def getDistance(self): return self.distance
    def setDistance(self, distance): self.distance = distance
    def getResolution(self): return self.resolution
    def setResolution(self, resolution): self.resolution = resolution
    def export(self, outfile, level = 0, name_='experiment'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='experiment'):
        pass
    def exportChildren(self, outfile, level, name_='experiment'):
        showIndent(outfile, level)
        outfile.write('<wavelength>%e</wavelength>\n' % self.getWavelength())
        showIndent(outfile, level)
        outfile.write('<distance>%e</distance>\n' % self.getDistance())
        if self.resolution:
            self.resolution.export(outfile, level)

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='experiment' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">experiment:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='experiment' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = experiment.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="experiment" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='experiment'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('wavelength = %e,\n' % self.getWavelength())
        showIndent(outfile, level)
        outfile.write('distance = %e,\n' % self.getDistance())
        if self.resolution:
            showIndent(outfile, level)
            outfile.write('resolution = resolution(\n')
            self.resolution.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='experiment'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('wavelength = <a  href:"#">%e</a><br>\n' % self.getWavelength())
        showIndentHtml(outfile, level)
        outfile.write('distance = <a  href:"#">%e</a><br>\n' % self.getDistance())
        if self.resolution:
            showIndentHtml(outfile, level)
            outfile.write('resolution<br>\n')
            self.resolution.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'wavelength':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.wavelength = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'distance':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.distance = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'resolution':
            obj_ = resolution.factory()
            obj_.build(child_)
            self.setResolution(obj_)
# end class experiment


class matrix(object):
    subclass = None
    def __init__(self, e11=0.0, e12=0.0, e13=0.0, e21=0.0, e22=0.0, e23=0.0, e31=0.0, e32=0.0, e33=0.0):
        self.e11 = e11
        self.e12 = e12
        self.e13 = e13
        self.e21 = e21
        self.e22 = e22
        self.e23 = e23
        self.e31 = e31
        self.e32 = e32
        self.e33 = e33
    def factory(*args_, **kwargs_):
        if matrix.subclass:
            return matrix.subclass(*args_, **kwargs_)
        else:
            return matrix(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getE11(self): return self.e11
    def setE11(self, e11): self.e11 = e11
    def getE12(self): return self.e12
    def setE12(self, e12): self.e12 = e12
    def getE13(self): return self.e13
    def setE13(self, e13): self.e13 = e13
    def getE21(self): return self.e21
    def setE21(self, e21): self.e21 = e21
    def getE22(self): return self.e22
    def setE22(self, e22): self.e22 = e22
    def getE23(self): return self.e23
    def setE23(self, e23): self.e23 = e23
    def getE31(self): return self.e31
    def setE31(self, e31): self.e31 = e31
    def getE32(self): return self.e32
    def setE32(self, e32): self.e32 = e32
    def getE33(self): return self.e33
    def setE33(self, e33): self.e33 = e33
    def export(self, outfile, level = 0, name_='matrix'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='matrix'):
        pass
    def exportChildren(self, outfile, level, name_='matrix'):
        showIndent(outfile, level)
        outfile.write('<e11>%e</e11>\n' % self.getE11())
        showIndent(outfile, level)
        outfile.write('<e12>%e</e12>\n' % self.getE12())
        showIndent(outfile, level)
        outfile.write('<e13>%e</e13>\n' % self.getE13())
        showIndent(outfile, level)
        outfile.write('<e21>%e</e21>\n' % self.getE21())
        showIndent(outfile, level)
        outfile.write('<e22>%e</e22>\n' % self.getE22())
        showIndent(outfile, level)
        outfile.write('<e23>%e</e23>\n' % self.getE23())
        showIndent(outfile, level)
        outfile.write('<e31>%e</e31>\n' % self.getE31())
        showIndent(outfile, level)
        outfile.write('<e32>%e</e32>\n' % self.getE32())
        showIndent(outfile, level)
        outfile.write('<e33>%e</e33>\n' % self.getE33())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='matrix' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">matrix:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='matrix' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = matrix.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="matrix" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='matrix'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('e11 = %e,\n' % self.getE11())
        showIndent(outfile, level)
        outfile.write('e12 = %e,\n' % self.getE12())
        showIndent(outfile, level)
        outfile.write('e13 = %e,\n' % self.getE13())
        showIndent(outfile, level)
        outfile.write('e21 = %e,\n' % self.getE21())
        showIndent(outfile, level)
        outfile.write('e22 = %e,\n' % self.getE22())
        showIndent(outfile, level)
        outfile.write('e23 = %e,\n' % self.getE23())
        showIndent(outfile, level)
        outfile.write('e31 = %e,\n' % self.getE31())
        showIndent(outfile, level)
        outfile.write('e32 = %e,\n' % self.getE32())
        showIndent(outfile, level)
        outfile.write('e33 = %e,\n' % self.getE33())
    def exportLiteralHtml(self, outfile, level = 0, name_='matrix'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('e11 = <a  href:"#">%e</a><br>\n' % self.getE11())
        showIndentHtml(outfile, level)
        outfile.write('e12 = <a  href:"#">%e</a><br>\n' % self.getE12())
        showIndentHtml(outfile, level)
        outfile.write('e13 = <a  href:"#">%e</a><br>\n' % self.getE13())
        showIndentHtml(outfile, level)
        outfile.write('e21 = <a  href:"#">%e</a><br>\n' % self.getE21())
        showIndentHtml(outfile, level)
        outfile.write('e22 = <a  href:"#">%e</a><br>\n' % self.getE22())
        showIndentHtml(outfile, level)
        outfile.write('e23 = <a  href:"#">%e</a><br>\n' % self.getE23())
        showIndentHtml(outfile, level)
        outfile.write('e31 = <a  href:"#">%e</a><br>\n' % self.getE31())
        showIndentHtml(outfile, level)
        outfile.write('e32 = <a  href:"#">%e</a><br>\n' % self.getE32())
        showIndentHtml(outfile, level)
        outfile.write('e33 = <a  href:"#">%e</a><br>\n' % self.getE33())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'e11':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.e11 = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'e12':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.e12 = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'e13':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.e13 = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'e21':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.e21 = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'e22':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.e22 = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'e23':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.e23 = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'e31':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.e31 = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'e32':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.e32 = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'e33':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.e33 = fval_
# end class matrix


class dna_message(object):
    subclass = None
    def __init__(self, ttype='', content_type='', level='', message=''):
        self.ttype = ttype
        self.content_type = content_type
        self.level = level
        self.message = message
    def factory(*args_, **kwargs_):
        if dna_message.subclass:
            return dna_message.subclass(*args_, **kwargs_)
        else:
            return dna_message(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getType(self): return self.ttype
    def setType(self, ttype): self.ttype = ttype
    def getContent_type(self): return self.content_type
    def setContent_type(self, content_type): self.content_type = content_type
    def getLevel(self): return self.level
    def setLevel(self, level): self.level = level
    def getMessage(self): return self.message
    def setMessage(self, message): self.message = message
    def export(self, outfile, level = 0, name_='dna_message'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='dna_message'):
        pass
    def exportChildren(self, outfile, level, name_='dna_message'):
        showIndent(outfile, level)
        outfile.write('<type>%s</type>\n' % quote_xml(self.getType()))
        showIndent(outfile, level)
        outfile.write('<content_type>%s</content_type>\n' % quote_xml(self.getContent_type()))
        showIndent(outfile, level)
        outfile.write('<level>%s</level>\n' % quote_xml(self.getLevel()))
        showIndent(outfile, level)
        outfile.write('<message>%s</message>\n' % quote_xml(self.getMessage()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='dna_message' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">dna_message:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='dna_message' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = dna_message.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="dna_message" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='dna_message'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('ttype = %s,\n' % quote_python(self.getType()))
        showIndent(outfile, level)
        outfile.write('content_type = %s,\n' % quote_python(self.getContent_type()))
        showIndent(outfile, level)
        outfile.write('level = %s,\n' % quote_python(self.getLevel()))
        showIndent(outfile, level)
        outfile.write('message = %s,\n' % quote_python(self.getMessage()))
    def exportLiteralHtml(self, outfile, level = 0, name_='dna_message'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('ttype = <a  href:"#">%s</a><br>\n' % quote_python(self.getType()))
        showIndentHtml(outfile, level)
        outfile.write('content_type = <a  href:"#">%s</a><br>\n' % quote_python(self.getContent_type()))
        showIndentHtml(outfile, level)
        outfile.write('level = <a  href:"#">%s</a><br>\n' % quote_python(self.getLevel()))
        showIndentHtml(outfile, level)
        outfile.write('message = <a  href:"#">%s</a><br>\n' % quote_python(self.getMessage()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'type':
            type_ = ''
            for text__content_ in child_.childNodes:
                type_ += text__content_.nodeValue
            self.ttype = type_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'content_type':
            content_type_ = ''
            for text__content_ in child_.childNodes:
                content_type_ += text__content_.nodeValue
            self.content_type = content_type_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'level':
            level_ = ''
            for text__content_ in child_.childNodes:
                level_ += text__content_.nodeValue
            self.level = level_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'message':
            message_ = ''
            for text__content_ in child_.childNodes:
                message_ += text__content_.nodeValue
            self.message = message_
# end class dna_message


class input_reflections(object):
    subclass = None
    def __init__(self, hklin=None):
        if hklin is None:
            self.hklin = []
        else:
            self.hklin = hklin
    def factory(*args_, **kwargs_):
        if input_reflections.subclass:
            return input_reflections.subclass(*args_, **kwargs_)
        else:
            return input_reflections(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getHklin(self): return self.hklin
    def setHklin(self, hklin): self.hklin = hklin
    def addHklin(self, value): self.hklin.append(value)
    def insertHklin(self, index, value): self.hklin[index] = value
    def export(self, outfile, level = 0, name_='input_reflections'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='input_reflections'):
        pass
    def exportChildren(self, outfile, level, name_='input_reflections'):
        for hklin_ in self.getHklin():
            showIndent(outfile, level)
            outfile.write('<hklin>%s</hklin>\n' % quote_xml(hklin_))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='input_reflections' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">input_reflections:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='input_reflections' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = input_reflections.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="input_reflections" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='input_reflections'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('hklin=[\n')
        level += 1
        for hklin in self.hklin:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(hklin))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='input_reflections'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('hklin<br>\n')
        level += 1
        for hklin in self.hklin:
            showIndentHtml(outfile, level)
            outfile.write('<a  href:"#">%s</a><br>\n' % quote_python(hklin))
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'hklin':
            hklin_ = ''
            for text__content_ in child_.childNodes:
                hklin_ += text__content_.nodeValue
            self.hklin.append(hklin_)
# end class input_reflections


class output_reflections(object):
    subclass = None
    def __init__(self, hklout=''):
        self.hklout = hklout
    def factory(*args_, **kwargs_):
        if output_reflections.subclass:
            return output_reflections.subclass(*args_, **kwargs_)
        else:
            return output_reflections(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getHklout(self): return self.hklout
    def setHklout(self, hklout): self.hklout = hklout
    def export(self, outfile, level = 0, name_='output_reflections'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='output_reflections'):
        pass
    def exportChildren(self, outfile, level, name_='output_reflections'):
        showIndent(outfile, level)
        outfile.write('<hklout>%s</hklout>\n' % quote_xml(self.getHklout()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='output_reflections' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">output_reflections:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='output_reflections' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = output_reflections.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="output_reflections" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='output_reflections'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('hklout = %s,\n' % quote_python(self.getHklout()))
    def exportLiteralHtml(self, outfile, level = 0, name_='output_reflections'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('hklout = <a  href:"#">%s</a><br>\n' % quote_python(self.getHklout()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'hklout':
            hklout_ = ''
            for text__content_ in child_.childNodes:
                hklout_ += text__content_.nodeValue
            self.hklout = hklout_
# end class output_reflections


class resolution(object):
    subclass = None
    def __init__(self, lower=0.0, upper=0.0):
        self.lower = lower
        self.upper = upper
    def factory(*args_, **kwargs_):
        if resolution.subclass:
            return resolution.subclass(*args_, **kwargs_)
        else:
            return resolution(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getLower(self): return self.lower
    def setLower(self, lower): self.lower = lower
    def getUpper(self): return self.upper
    def setUpper(self, upper): self.upper = upper
    def export(self, outfile, level = 0, name_='resolution'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='resolution'):
        pass
    def exportChildren(self, outfile, level, name_='resolution'):
        showIndent(outfile, level)
        outfile.write('<lower>%e</lower>\n' % self.getLower())
        showIndent(outfile, level)
        outfile.write('<upper>%e</upper>\n' % self.getUpper())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='resolution' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">resolution:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='resolution' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = resolution.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="resolution" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='resolution'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('lower = %e,\n' % self.getLower())
        showIndent(outfile, level)
        outfile.write('upper = %e,\n' % self.getUpper())
    def exportLiteralHtml(self, outfile, level = 0, name_='resolution'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('lower = <a  href:"#">%e</a><br>\n' % self.getLower())
        showIndentHtml(outfile, level)
        outfile.write('upper = <a  href:"#">%e</a><br>\n' % self.getUpper())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'lower':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.lower = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'upper':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.upper = fval_
# end class resolution


class abort_request(object):
    subclass = None
    def __init__(self, level=''):
        self.level = level
    def factory(*args_, **kwargs_):
        if abort_request.subclass:
            return abort_request.subclass(*args_, **kwargs_)
        else:
            return abort_request(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getLevel(self): return self.level
    def setLevel(self, level): self.level = level
    def export(self, outfile, level = 0, name_='abort_request'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='abort_request'):
        pass
    def exportChildren(self, outfile, level, name_='abort_request'):
        showIndent(outfile, level)
        outfile.write('<level>%s</level>\n' % quote_xml(self.getLevel()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='abort_request' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">abort_request:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='abort_request' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = abort_request.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="abort_request" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='abort_request'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('level = %s,\n' % quote_python(self.getLevel()))
    def exportLiteralHtml(self, outfile, level = 0, name_='abort_request'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('level = <a  href:"#">%s</a><br>\n' % quote_python(self.getLevel()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'level':
            level_ = ''
            for text__content_ in child_.childNodes:
                level_ += text__content_.nodeValue
            self.level = level_
# end class abort_request


class abort_response(object):
    subclass = None
    def __init__(self, status=None):
        self.status = status
    def factory(*args_, **kwargs_):
        if abort_response.subclass:
            return abort_response.subclass(*args_, **kwargs_)
        else:
            return abort_response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getStatus(self): return self.status
    def setStatus(self, status): self.status = status
    def export(self, outfile, level = 0, name_='abort_response'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='abort_response'):
        pass
    def exportChildren(self, outfile, level, name_='abort_response'):
        if self.status:
            self.status.export(outfile, level)

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='abort_response' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">abort_response:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='abort_response' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = abort_response.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="abort_response" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='abort_response'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.status:
            showIndent(outfile, level)
            outfile.write('status = status(\n')
            self.status.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='abort_response'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        if self.status:
            showIndentHtml(outfile, level)
            outfile.write('status<br>\n')
            self.status.exportLiteralHtml(outfile, level)
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'status':
            obj_ = status.factory()
            obj_.build(child_)
            self.setStatus(obj_)
# end class abort_response


class sample_reference(object):
    subclass = None
    def __init__(self, code='', container_reference='', container_code='', sample_location='', blSampleId=''):
        self.code = code
        self.container_reference = container_reference
        self.container_code = container_code
        self.sample_location = sample_location
        self.blSampleId = blSampleId
    def factory(*args_, **kwargs_):
        if sample_reference.subclass:
            return sample_reference.subclass(*args_, **kwargs_)
        else:
            return sample_reference(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getCode(self): return self.code
    def setCode(self, code): self.code = code
    def getContainer_reference(self): return self.container_reference
    def setContainer_reference(self, container_reference): self.container_reference = container_reference
    def getContainer_code(self): return self.container_code
    def setContainer_code(self, container_code): self.container_code = container_code
    def getSample_location(self): return self.sample_location
    def setSample_location(self, sample_location): self.sample_location = sample_location
    def getBlSampleId(self): return self.blSampleId
    def setBlSampleId(self, blSampleId): self.blSampleId = blSampleId
    def export(self, outfile, level = 0, name_='sample_reference'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='sample_reference'):
        pass
    def exportChildren(self, outfile, level, name_='sample_reference'):
        showIndent(outfile, level)
        outfile.write('<code>%s</code>\n' % quote_xml(self.getCode()))
        showIndent(outfile, level)
        outfile.write('<container_reference>%s</container_reference>\n' % quote_xml(self.getContainer_reference()))
        showIndent(outfile, level)
        outfile.write('<container_code>%s</container_code>\n' % quote_xml(self.getContainer_code()))
        showIndent(outfile, level)
        outfile.write('<sample_location>%s</sample_location>\n' % quote_xml(self.getSample_location()))
        showIndent(outfile, level)
        outfile.write('<blSampleId>%s</blSampleId>\n' % quote_xml(self.getBlSampleId()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='sample_reference' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">sample_reference:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='sample_reference' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = sample_reference.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="sample_reference" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='sample_reference'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('code = %s,\n' % quote_python(self.getCode()))
        showIndent(outfile, level)
        outfile.write('container_reference = %s,\n' % quote_python(self.getContainer_reference()))
        showIndent(outfile, level)
        outfile.write('container_code = %s,\n' % quote_python(self.getContainer_code()))
        showIndent(outfile, level)
        outfile.write('sample_location = %s,\n' % quote_python(self.getSample_location()))
        showIndent(outfile, level)
        outfile.write('blSampleId = %s,\n' % quote_python(self.getBlSampleId()))
    def exportLiteralHtml(self, outfile, level = 0, name_='sample_reference'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('code = <a  href:"#">%s</a><br>\n' % quote_python(self.getCode()))
        showIndentHtml(outfile, level)
        outfile.write('container_reference = <a  href:"#">%s</a><br>\n' % quote_python(self.getContainer_reference()))
        showIndentHtml(outfile, level)
        outfile.write('container_code = <a  href:"#">%s</a><br>\n' % quote_python(self.getContainer_code()))
        showIndentHtml(outfile, level)
        outfile.write('sample_location = <a  href:"#">%s</a><br>\n' % quote_python(self.getSample_location()))
        showIndentHtml(outfile, level)
        outfile.write('blSampleId = <a  href:"#">%s</a><br>\n' % quote_python(self.getBlSampleId()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'code':
            code_ = ''
            for text__content_ in child_.childNodes:
                code_ += text__content_.nodeValue
            self.code = code_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'container_reference':
            container_reference_ = ''
            for text__content_ in child_.childNodes:
                container_reference_ += text__content_.nodeValue
            self.container_reference = container_reference_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'container_code':
            container_code_ = ''
            for text__content_ in child_.childNodes:
                container_code_ += text__content_.nodeValue
            self.container_code = container_code_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sample_location':
            sample_location_ = ''
            for text__content_ in child_.childNodes:
                sample_location_ += text__content_.nodeValue
            self.sample_location = sample_location_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'blSampleId':
            blSampleId_ = ''
            for text__content_ in child_.childNodes:
                blSampleId_ += text__content_.nodeValue
            self.blSampleId = blSampleId_
# end class sample_reference


class beamline_parameters(object):
    subclass = None
    def __init__(self, maximum_exposure=0.0, minimum_exposure_time=0.0, minimum_phi_speed=0.0, maximum_phi_speed=0.0, minimum_phi_oscillation=0.0):
        self.maximum_exposure = maximum_exposure
        self.minimum_exposure_time = minimum_exposure_time
        self.minimum_phi_speed = minimum_phi_speed
        self.maximum_phi_speed = maximum_phi_speed
        self.minimum_phi_oscillation = minimum_phi_oscillation
    def factory(*args_, **kwargs_):
        if beamline_parameters.subclass:
            return beamline_parameters.subclass(*args_, **kwargs_)
        else:
            return beamline_parameters(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getMaximum_exposure(self): return self.maximum_exposure
    def setMaximum_exposure(self, maximum_exposure): self.maximum_exposure = maximum_exposure
    def getMinimum_exposure_time(self): return self.minimum_exposure_time
    def setMinimum_exposure_time(self, minimum_exposure_time): self.minimum_exposure_time = minimum_exposure_time
    def getMinimum_phi_speed(self): return self.minimum_phi_speed
    def setMinimum_phi_speed(self, minimum_phi_speed): self.minimum_phi_speed = minimum_phi_speed
    def getMaximum_phi_speed(self): return self.maximum_phi_speed
    def setMaximum_phi_speed(self, maximum_phi_speed): self.maximum_phi_speed = maximum_phi_speed
    def getMinimum_phi_oscillation(self): return self.minimum_phi_oscillation
    def setMinimum_phi_oscillation(self, minimum_phi_oscillation): self.minimum_phi_oscillation = minimum_phi_oscillation
    def export(self, outfile, level = 0, name_='beamline_parameters'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='beamline_parameters'):
        pass
    def exportChildren(self, outfile, level, name_='beamline_parameters'):
        showIndent(outfile, level)
        outfile.write('<maximum_exposure>%e</maximum_exposure>\n' % self.getMaximum_exposure())
        showIndent(outfile, level)
        outfile.write('<minimum_exposure_time>%e</minimum_exposure_time>\n' % self.getMinimum_exposure_time())
        showIndent(outfile, level)
        outfile.write('<minimum_phi_speed>%e</minimum_phi_speed>\n' % self.getMinimum_phi_speed())
        showIndent(outfile, level)
        outfile.write('<maximum_phi_speed>%e</maximum_phi_speed>\n' % self.getMaximum_phi_speed())
        showIndent(outfile, level)
        outfile.write('<minimum_phi_oscillation>%e</minimum_phi_oscillation>\n' % self.getMinimum_phi_oscillation())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='beamline_parameters' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">beamline_parameters:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='beamline_parameters' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = beamline_parameters.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="beamline_parameters" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='beamline_parameters'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('maximum_exposure = %e,\n' % self.getMaximum_exposure())
        showIndent(outfile, level)
        outfile.write('minimum_exposure_time = %e,\n' % self.getMinimum_exposure_time())
        showIndent(outfile, level)
        outfile.write('minimum_phi_speed = %e,\n' % self.getMinimum_phi_speed())
        showIndent(outfile, level)
        outfile.write('maximum_phi_speed = %e,\n' % self.getMaximum_phi_speed())
        showIndent(outfile, level)
        outfile.write('minimum_phi_oscillation = %e,\n' % self.getMinimum_phi_oscillation())
    def exportLiteralHtml(self, outfile, level = 0, name_='beamline_parameters'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('maximum_exposure = <a  href:"#">%e</a><br>\n' % self.getMaximum_exposure())
        showIndentHtml(outfile, level)
        outfile.write('minimum_exposure_time = <a  href:"#">%e</a><br>\n' % self.getMinimum_exposure_time())
        showIndentHtml(outfile, level)
        outfile.write('minimum_phi_speed = <a  href:"#">%e</a><br>\n' % self.getMinimum_phi_speed())
        showIndentHtml(outfile, level)
        outfile.write('maximum_phi_speed = <a  href:"#">%e</a><br>\n' % self.getMaximum_phi_speed())
        showIndentHtml(outfile, level)
        outfile.write('minimum_phi_oscillation = <a  href:"#">%e</a><br>\n' % self.getMinimum_phi_oscillation())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'maximum_exposure':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.maximum_exposure = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'minimum_exposure_time':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.minimum_exposure_time = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'minimum_phi_speed':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.minimum_phi_speed = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'maximum_phi_speed':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.maximum_phi_speed = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'minimum_phi_oscillation':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.minimum_phi_oscillation = fval_
# end class beamline_parameters




def parse(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = AnomalousScatterer.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc.unlink()
#    doc = None
    return rootObj


def parseString(inString):
    doc = minidom.parseString(inString)
    rootNode = doc.documentElement
    rootObj = AnomalousScatterer.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc.unlink()
#    doc = None
#    sys.stdout.write('<?xml version="1.0" ?>\n')
#    rootObj.export(sys.stdout, 0, name_="AnomalousScatterer")
    return rootObj


# AAlib Modifications for marshalling and unmarshalling
# Creating program data constructs from XML
def unMarshalling( _inFileName ):
    return parse(  _inFileName )


# Serializing program data constructs to XML
def marshalling( _oObject, _inFileName ):
    oFile = open( _inFileName, "w" )
    oFile.write('<?xml version="1.0" ?>\n')
    _oObject.export( oFile, 0, name_="AnomalousScatterer" )
    oFile.close()

