#!/usr/bin/env python



#################################################################
#
#   Project:   Python-Jython Asynchronous Action Library Project
#              http://pyaalib.sourceforge.net/
#              http://jyaalib.sourceforge.net/
#
#   Author(s): Romeu A. Pieritz - romeu.pieritz@gmail.com
#
#   Code Generated in Date:      Mon Jun  1 23:18:40 2009
#
#   License:
#   ----------------------------------------------
#   Python-Jython Asynchronous Action Library Project
#   Copyright (c) 2005-2008, PyAALib-JyAALib developers
#   All rights reserved.
#
#   Redistribution and use in source and binary forms,
#   with or without modification, are permitted
#   provided that the following conditions are met:
#
#   Redistributions of source code must retain the
#   above copyright notice,this list of conditions
#   and the following disclaimer.
#
#   Redistributions in binary form must reproduce
#   the above copyright notice,this list of conditions
#   and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the names of PyAALib-JyAALib's copyright owner
#   nor the names of its contributors may be used to endorse
#   or promote products derived from this software without
#   specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
#   AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
#   WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
#   EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#   BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
#   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
#   IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
#   OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
#   THE POSSIBILITY OF SUCH DAMAGE.
#
################################################################
#
#
# Generated by ALExternalPackGenerateDS.py.
#
# This file is generated by a modified version of the original file:
# generateDS.py, proposed by Dave Kuhlman:
#
## LICENSE
#
## Copyright (c) 2003 Dave Kuhlman
#
## Permission is hereby granted, free of charge, to any person obtaining
## a copy of this software and associated documentation files (the
## "Software"), to deal in the Software without restriction, including
## without limitation the rights to use, copy, modify, merge, publish,
## distribute, sublicense, and/or sell copies of the Software, and to
## permit persons to whom the Software is furnished to do so, subject to
## the following conditions:
#
## The above copyright notice and this permission notice shall be
## included in all copies or substantial portions of the Software.
#
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
## IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
## CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
## TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
## SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
##############################################################################

import sys
import getopt
from xml.dom import minidom
from xml.dom import Node


#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')


def showIndentHtml(outfile, level):
    for idx in range(level):
        outfile.write(' &nbsp; &nbsp; &nbsp; &nbsp;')


def quote_xml(inStr):
    s1 = inStr
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('"', '&quot;')
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


class MixedContainer(object):
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')



TEMPLATE_PAGE_P1 = """
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
    <title>AALib Plugin Data Description</title>
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <meta name="description" content="AALib Plugin generation from XSD files">
    <meta name="keywords" content="AALib, xsd, plugin">
    <meta name="author" content="Romeu Pieritz(romeu_pieritz@yahoo.fr)">
    <link href="style.css" rel="stylesheet" type="text/css">
    <base target="main">
</head>
<body>
    <div id="main">
        <div id="block">
          %s
    </div>
"""

TEMPLATE_PAGE_P2 = """
    </div>
</body>
</html>
"""



#
# Class definition
#

class DTCrystalDiffractionImage(object):
    subclass = None
    def __init__(self, fileName='', fileNameOriginal='', date='', detectorId='', detectorType='', detectorInformation='', blank=False, powderIceRings=False, information='', mosaicity=0.0, resolution=0.0, IOverSigmaI=0.0):
        self.fileName = fileName
        self.fileNameOriginal = fileNameOriginal
        self.date = date
        self.detectorId = detectorId
        self.detectorType = detectorType
        self.detectorInformation = detectorInformation
        self.blank = blank
        self.powderIceRings = powderIceRings
        self.information = information
        self.mosaicity = mosaicity
        self.resolution = resolution
        self.IOverSigmaI = IOverSigmaI
    def factory(*args_, **kwargs_):
        if DTCrystalDiffractionImage.subclass:
            return DTCrystalDiffractionImage.subclass(*args_, **kwargs_)
        else:
            return DTCrystalDiffractionImage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getFileName(self): return self.fileName
    def setFileName(self, fileName): self.fileName = fileName
    def getFileNameOriginal(self): return self.fileNameOriginal
    def setFileNameOriginal(self, fileNameOriginal): self.fileNameOriginal = fileNameOriginal
    def getDate(self): return self.date
    def setDate(self, date): self.date = date
    def getDetectorId(self): return self.detectorId
    def setDetectorId(self, detectorId): self.detectorId = detectorId
    def getDetectorType(self): return self.detectorType
    def setDetectorType(self, detectorType): self.detectorType = detectorType
    def getDetectorInformation(self): return self.detectorInformation
    def setDetectorInformation(self, detectorInformation): self.detectorInformation = detectorInformation
    def getBlank(self): return self.blank
    def setBlank(self, blank): self.blank = blank
    def getPowderIceRings(self): return self.powderIceRings
    def setPowderIceRings(self, powderIceRings): self.powderIceRings = powderIceRings
    def getInformation(self): return self.information
    def setInformation(self, information): self.information = information
    def getMosaicity(self): return self.mosaicity
    def setMosaicity(self, mosaicity): self.mosaicity = mosaicity
    def getResolution(self): return self.resolution
    def setResolution(self, resolution): self.resolution = resolution
    def getIOverSigmaI(self): return self.IOverSigmaI
    def setIOverSigmaI(self, IOverSigmaI): self.IOverSigmaI = IOverSigmaI
    def export(self, outfile, level = 0, name_='DTCrystalDiffractionImage'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='DTCrystalDiffractionImage'):
        pass
    def exportChildren(self, outfile, level, name_='DTCrystalDiffractionImage'):
        showIndent(outfile, level)
        outfile.write('<fileName>%s</fileName>\n' % quote_xml(self.getFileName()))
        showIndent(outfile, level)
        outfile.write('<fileNameOriginal>%s</fileNameOriginal>\n' % quote_xml(self.getFileNameOriginal()))
        showIndent(outfile, level)
        outfile.write('<date>%s</date>\n' % quote_xml(self.getDate()))
        showIndent(outfile, level)
        outfile.write('<detectorId>%s</detectorId>\n' % quote_xml(self.getDetectorId()))
        showIndent(outfile, level)
        outfile.write('<detectorType>%s</detectorType>\n' % quote_xml(self.getDetectorType()))
        showIndent(outfile, level)
        outfile.write('<detectorInformation>%s</detectorInformation>\n' % quote_xml(self.getDetectorInformation()))
        showIndent(outfile, level)
        outfile.write('<blank>%s</blank>\n' % self.getBlank())
        showIndent(outfile, level)
        outfile.write('<powderIceRings>%s</powderIceRings>\n' % self.getPowderIceRings())
        showIndent(outfile, level)
        outfile.write('<information>%s</information>\n' % quote_xml(self.getInformation()))
        showIndent(outfile, level)
        outfile.write('<mosaicity>%e</mosaicity>\n' % self.getMosaicity())
        showIndent(outfile, level)
        outfile.write('<resolution>%e</resolution>\n' % self.getResolution())
        showIndent(outfile, level)
        outfile.write('<IOverSigmaI>%e</IOverSigmaI>\n' % self.getIOverSigmaI())

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='DTCrystalDiffractionImage' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">DTCrystalDiffractionImage:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='DTCrystalDiffractionImage' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = DTCrystalDiffractionImage.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="DTCrystalDiffractionImage" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='DTCrystalDiffractionImage'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('fileName = %s,\n' % quote_python(self.getFileName()))
        showIndent(outfile, level)
        outfile.write('fileNameOriginal = %s,\n' % quote_python(self.getFileNameOriginal()))
        showIndent(outfile, level)
        outfile.write('date = %s,\n' % quote_python(self.getDate()))
        showIndent(outfile, level)
        outfile.write('detectorId = %s,\n' % quote_python(self.getDetectorId()))
        showIndent(outfile, level)
        outfile.write('detectorType = %s,\n' % quote_python(self.getDetectorType()))
        showIndent(outfile, level)
        outfile.write('detectorInformation = %s,\n' % quote_python(self.getDetectorInformation()))
        showIndent(outfile, level)
        outfile.write('blank = %s,\n' % self.getBlank())
        showIndent(outfile, level)
        outfile.write('powderIceRings = %s,\n' % self.getPowderIceRings())
        showIndent(outfile, level)
        outfile.write('information = %s,\n' % quote_python(self.getInformation()))
        showIndent(outfile, level)
        outfile.write('mosaicity = %e,\n' % self.getMosaicity())
        showIndent(outfile, level)
        outfile.write('resolution = %e,\n' % self.getResolution())
        showIndent(outfile, level)
        outfile.write('IOverSigmaI = %e,\n' % self.getIOverSigmaI())
    def exportLiteralHtml(self, outfile, level = 0, name_='DTCrystalDiffractionImage'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('fileName = <a  href:"#">%s</a><br>\n' % quote_python(self.getFileName()))
        showIndentHtml(outfile, level)
        outfile.write('fileNameOriginal = <a  href:"#">%s</a><br>\n' % quote_python(self.getFileNameOriginal()))
        showIndentHtml(outfile, level)
        outfile.write('date = <a  href:"#">%s</a><br>\n' % quote_python(self.getDate()))
        showIndentHtml(outfile, level)
        outfile.write('detectorId = <a  href:"#">%s</a><br>\n' % quote_python(self.getDetectorId()))
        showIndentHtml(outfile, level)
        outfile.write('detectorType = <a  href:"#">%s</a><br>\n' % quote_python(self.getDetectorType()))
        showIndentHtml(outfile, level)
        outfile.write('detectorInformation = <a  href:"#">%s</a><br>\n' % quote_python(self.getDetectorInformation()))
        showIndentHtml(outfile, level)
        outfile.write('blank = <a  href:"#">%s</a><br>\n' % self.getBlank())
        showIndentHtml(outfile, level)
        outfile.write('powderIceRings = <a  href:"#">%s</a><br>\n' % self.getPowderIceRings())
        showIndentHtml(outfile, level)
        outfile.write('information = <a  href:"#">%s</a><br>\n' % quote_python(self.getInformation()))
        showIndentHtml(outfile, level)
        outfile.write('mosaicity = <a  href:"#">%e</a><br>\n' % self.getMosaicity())
        showIndentHtml(outfile, level)
        outfile.write('resolution = <a  href:"#">%e</a><br>\n' % self.getResolution())
        showIndentHtml(outfile, level)
        outfile.write('IOverSigmaI = <a  href:"#">%e</a><br>\n' % self.getIOverSigmaI())
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'fileName':
            fileName_ = ''
            for text__content_ in child_.childNodes:
                fileName_ += text__content_.nodeValue
            self.fileName = fileName_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'fileNameOriginal':
            fileNameOriginal_ = ''
            for text__content_ in child_.childNodes:
                fileNameOriginal_ += text__content_.nodeValue
            self.fileNameOriginal = fileNameOriginal_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'date':
            date_ = ''
            for text__content_ in child_.childNodes:
                date_ += text__content_.nodeValue
            self.date = date_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'detectorId':
            detectorId_ = ''
            for text__content_ in child_.childNodes:
                detectorId_ += text__content_.nodeValue
            self.detectorId = detectorId_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'detectorType':
            detectorType_ = ''
            for text__content_ in child_.childNodes:
                detectorType_ += text__content_.nodeValue
            self.detectorType = detectorType_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'detectorInformation':
            detectorInformation_ = ''
            for text__content_ in child_.childNodes:
                detectorInformation_ += text__content_.nodeValue
            self.detectorInformation = detectorInformation_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'blank':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', 'True', '1'):
                    ival_ = True
                elif sval_ in ('false', 'False', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.blank = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'powderIceRings':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', 'True', '1'):
                    ival_ = True
                elif sval_ in ('false', 'False', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.powderIceRings = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'information':
            information_ = ''
            for text__content_ in child_.childNodes:
                information_ += text__content_.nodeValue
            self.information = information_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'mosaicity':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.mosaicity = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'resolution':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.resolution = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'IOverSigmaI':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.IOverSigmaI = fval_
# end class DTCrystalDiffractionImage


class DTCrystalGroupDiffractionImage(object):
    subclass = None
    def __init__(self, diffractionImage=None):
        if diffractionImage is None:
            self.diffractionImage = []
        else:
            self.diffractionImage = diffractionImage
    def factory(*args_, **kwargs_):
        if DTCrystalGroupDiffractionImage.subclass:
            return DTCrystalGroupDiffractionImage.subclass(*args_, **kwargs_)
        else:
            return DTCrystalGroupDiffractionImage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getDiffractionImage(self): return self.diffractionImage
    def setDiffractionImage(self, diffractionImage): self.diffractionImage = diffractionImage
    def addDiffractionImage(self, value): self.diffractionImage.append(value)
    def insertDiffractionImage(self, index, value): self.diffractionImage[index] = value
    def export(self, outfile, level = 0, name_='DTCrystalGroupDiffractionImage'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='DTCrystalGroupDiffractionImage'):
        pass
    def exportChildren(self, outfile, level, name_='DTCrystalGroupDiffractionImage'):
        for diffractionImage_ in self.getDiffractionImage():
            diffractionImage_.export(outfile, level, name_='diffractionImage')

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='DTCrystalGroupDiffractionImage' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">DTCrystalGroupDiffractionImage:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='DTCrystalGroupDiffractionImage' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = DTCrystalGroupDiffractionImage.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="DTCrystalGroupDiffractionImage" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='DTCrystalGroupDiffractionImage'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('diffractionImage=[\n')
        level += 1
        for diffractionImage in self.diffractionImage:
            showIndent(outfile, level)
            outfile.write('DTCrystalDiffractionImage(\n')
            diffractionImage.exportLiteral(outfile, level, name_='diffractionImage')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def exportLiteralHtml(self, outfile, level = 0, name_='DTCrystalGroupDiffractionImage'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('diffractionImage<br>\n')
        level += 1
        for diffractionImage in self.diffractionImage:
            diffractionImage.exportLiteralHtml(outfile, level, name_='diffractionImage')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        level -= 1
        showIndentHtml(outfile, level)
        outfile.write('<br>\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'diffractionImage':
            obj_ = DTCrystalDiffractionImage.factory()
            obj_.build(child_)
            self.diffractionImage.append(obj_)
# end class DTCrystalGroupDiffractionImage


class DTCrystalReference(object):
    subclass = None
    def __init__(self, date='', information='', applicationErrorMessage='', applicationName='', applicationInformation='', applicationSuccess=False, groupDiffractionImage=None, blankImage=False, powderIceRings=False, beamX=0.0, beamY=0.0, cellA=0.0, cellB=0.0, cellC=0.0, cellAlpha=0.0, cellBeta=0.0, cellGamma=0.0, mosaicity=0.0, resolution=0.0, IOverSigmaI=0.0, bravaisLattice='', phiStart=0.0, phiEnd=0.0, rotation=0.0, exposureTime=0.0, generalInformation='', generalXMLObject=''):
        self.date = date
        self.information = information
        self.applicationErrorMessage = applicationErrorMessage
        self.applicationName = applicationName
        self.applicationInformation = applicationInformation
        self.applicationSuccess = applicationSuccess
        self.groupDiffractionImage = groupDiffractionImage
        self.blankImage = blankImage
        self.powderIceRings = powderIceRings
        self.beamX = beamX
        self.beamY = beamY
        self.cellA = cellA
        self.cellB = cellB
        self.cellC = cellC
        self.cellAlpha = cellAlpha
        self.cellBeta = cellBeta
        self.cellGamma = cellGamma
        self.mosaicity = mosaicity
        self.resolution = resolution
        self.IOverSigmaI = IOverSigmaI
        self.bravaisLattice = bravaisLattice
        self.phiStart = phiStart
        self.phiEnd = phiEnd
        self.rotation = rotation
        self.exposureTime = exposureTime
        self.generalInformation = generalInformation
        self.generalXMLObject = generalXMLObject
    def factory(*args_, **kwargs_):
        if DTCrystalReference.subclass:
            return DTCrystalReference.subclass(*args_, **kwargs_)
        else:
            return DTCrystalReference(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getDate(self): return self.date
    def setDate(self, date): self.date = date
    def getInformation(self): return self.information
    def setInformation(self, information): self.information = information
    def getApplicationErrorMessage(self): return self.applicationErrorMessage
    def setApplicationErrorMessage(self, applicationErrorMessage): self.applicationErrorMessage = applicationErrorMessage
    def getApplicationName(self): return self.applicationName
    def setApplicationName(self, applicationName): self.applicationName = applicationName
    def getApplicationInformation(self): return self.applicationInformation
    def setApplicationInformation(self, applicationInformation): self.applicationInformation = applicationInformation
    def getApplicationSuccess(self): return self.applicationSuccess
    def setApplicationSuccess(self, applicationSuccess): self.applicationSuccess = applicationSuccess
    def getGroupDiffractionImage(self): return self.groupDiffractionImage
    def setGroupDiffractionImage(self, groupDiffractionImage): self.groupDiffractionImage = groupDiffractionImage
    def getBlankImage(self): return self.blankImage
    def setBlankImage(self, blankImage): self.blankImage = blankImage
    def getPowderIceRings(self): return self.powderIceRings
    def setPowderIceRings(self, powderIceRings): self.powderIceRings = powderIceRings
    def getBeamX(self): return self.beamX
    def setBeamX(self, beamX): self.beamX = beamX
    def getBeamY(self): return self.beamY
    def setBeamY(self, beamY): self.beamY = beamY
    def getCellA(self): return self.cellA
    def setCellA(self, cellA): self.cellA = cellA
    def getCellB(self): return self.cellB
    def setCellB(self, cellB): self.cellB = cellB
    def getCellC(self): return self.cellC
    def setCellC(self, cellC): self.cellC = cellC
    def getCellAlpha(self): return self.cellAlpha
    def setCellAlpha(self, cellAlpha): self.cellAlpha = cellAlpha
    def getCellBeta(self): return self.cellBeta
    def setCellBeta(self, cellBeta): self.cellBeta = cellBeta
    def getCellGamma(self): return self.cellGamma
    def setCellGamma(self, cellGamma): self.cellGamma = cellGamma
    def getMosaicity(self): return self.mosaicity
    def setMosaicity(self, mosaicity): self.mosaicity = mosaicity
    def getResolution(self): return self.resolution
    def setResolution(self, resolution): self.resolution = resolution
    def getIOverSigmaI(self): return self.IOverSigmaI
    def setIOverSigmaI(self, IOverSigmaI): self.IOverSigmaI = IOverSigmaI
    def getBravaisLattice(self): return self.bravaisLattice
    def setBravaisLattice(self, bravaisLattice): self.bravaisLattice = bravaisLattice
    def getPhiStart(self): return self.phiStart
    def setPhiStart(self, phiStart): self.phiStart = phiStart
    def getPhiEnd(self): return self.phiEnd
    def setPhiEnd(self, phiEnd): self.phiEnd = phiEnd
    def getRotation(self): return self.rotation
    def setRotation(self, rotation): self.rotation = rotation
    def getExposureTime(self): return self.exposureTime
    def setExposureTime(self, exposureTime): self.exposureTime = exposureTime
    def getGeneralInformation(self): return self.generalInformation
    def setGeneralInformation(self, generalInformation): self.generalInformation = generalInformation
    def getGeneralXMLObject(self): return self.generalXMLObject
    def setGeneralXMLObject(self, generalXMLObject): self.generalXMLObject = generalXMLObject
    def export(self, outfile, level = 0, name_='DTCrystalReference'):
        showIndent(outfile, level)
        outfile.write('<%s>\n' % name_)
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write('</%s>\n' % name_)
    def exportAttributes(self, outfile, level, name_='DTCrystalReference'):
        pass
    def exportChildren(self, outfile, level, name_='DTCrystalReference'):
        showIndent(outfile, level)
        outfile.write('<date>%s</date>\n' % quote_xml(self.getDate()))
        showIndent(outfile, level)
        outfile.write('<information>%s</information>\n' % quote_xml(self.getInformation()))
        showIndent(outfile, level)
        outfile.write('<applicationErrorMessage>%s</applicationErrorMessage>\n' % quote_xml(self.getApplicationErrorMessage()))
        showIndent(outfile, level)
        outfile.write('<applicationName>%s</applicationName>\n' % quote_xml(self.getApplicationName()))
        showIndent(outfile, level)
        outfile.write('<applicationInformation>%s</applicationInformation>\n' % quote_xml(self.getApplicationInformation()))
        showIndent(outfile, level)
        outfile.write('<applicationSuccess>%s</applicationSuccess>\n' % self.getApplicationSuccess())
        if self.groupDiffractionImage:
            self.groupDiffractionImage.export(outfile, level, name_='groupDiffractionImage')
        showIndent(outfile, level)
        outfile.write('<blankImage>%s</blankImage>\n' % self.getBlankImage())
        showIndent(outfile, level)
        outfile.write('<powderIceRings>%s</powderIceRings>\n' % self.getPowderIceRings())
        showIndent(outfile, level)
        outfile.write('<beamX>%e</beamX>\n' % self.getBeamX())
        showIndent(outfile, level)
        outfile.write('<beamY>%e</beamY>\n' % self.getBeamY())
        showIndent(outfile, level)
        outfile.write('<cellA>%e</cellA>\n' % self.getCellA())
        showIndent(outfile, level)
        outfile.write('<cellB>%e</cellB>\n' % self.getCellB())
        showIndent(outfile, level)
        outfile.write('<cellC>%e</cellC>\n' % self.getCellC())
        showIndent(outfile, level)
        outfile.write('<cellAlpha>%e</cellAlpha>\n' % self.getCellAlpha())
        showIndent(outfile, level)
        outfile.write('<cellBeta>%e</cellBeta>\n' % self.getCellBeta())
        showIndent(outfile, level)
        outfile.write('<cellGamma>%e</cellGamma>\n' % self.getCellGamma())
        showIndent(outfile, level)
        outfile.write('<mosaicity>%e</mosaicity>\n' % self.getMosaicity())
        showIndent(outfile, level)
        outfile.write('<resolution>%e</resolution>\n' % self.getResolution())
        showIndent(outfile, level)
        outfile.write('<IOverSigmaI>%e</IOverSigmaI>\n' % self.getIOverSigmaI())
        showIndent(outfile, level)
        outfile.write('<bravaisLattice>%s</bravaisLattice>\n' % quote_xml(self.getBravaisLattice()))
        showIndent(outfile, level)
        outfile.write('<phiStart>%e</phiStart>\n' % self.getPhiStart())
        showIndent(outfile, level)
        outfile.write('<phiEnd>%e</phiEnd>\n' % self.getPhiEnd())
        showIndent(outfile, level)
        outfile.write('<rotation>%e</rotation>\n' % self.getRotation())
        showIndent(outfile, level)
        outfile.write('<exposureTime>%e</exposureTime>\n' % self.getExposureTime())
        showIndent(outfile, level)
        outfile.write('<generalInformation>%s</generalInformation>\n' % quote_xml(self.getGeneralInformation()))
        showIndent(outfile, level)
        outfile.write('<generalXMLObject>%s</generalXMLObject>\n' % quote_xml(self.getGeneralXMLObject()))

    #Only to export the entire XML tree to a file stream on disk
    def outputFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write("<?xml version=\"1.0\" ?>\n")
        self.export( outfile, 0, name_='DTCrystalReference' )
        outfile.close()


    #Only to export the entire XML tree to a Html Page in a file stream on disk
    def outputPageHtml( self, _outfileName ):
        odtStrTitle = "    <span class=\"title\">DTCrystalReference:</span> <br> <br> <br>\n" 
        outfile = open( _outfileName, "w" )
        outfile.write( TEMPLATE_PAGE_P1 % ( odtStrTitle ) )
        self.exportLiteralHtml( outfile, 0, name_='DTCrystalReference' )
        outfile.write( TEMPLATE_PAGE_P2  )
        outfile.close()


    def outputFileHtml( self, _outfileName ):
        self.outputPageHtml( _outfileName )



    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = DTCrystalReference.factory()
        rootObj.build(rootNode)
        return rootObj
    parseString = staticmethod( parseString ) 


    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO.StringIO()
        oStreamString.write('<?xml version="1.0" ?>\n')
        self.export( oStreamString, 0, name_="DTCrystalReference" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML

    def exportLiteral(self, outfile, level = 0, name_='DTCrystalReference'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('date = %s,\n' % quote_python(self.getDate()))
        showIndent(outfile, level)
        outfile.write('information = %s,\n' % quote_python(self.getInformation()))
        showIndent(outfile, level)
        outfile.write('applicationErrorMessage = %s,\n' % quote_python(self.getApplicationErrorMessage()))
        showIndent(outfile, level)
        outfile.write('applicationName = %s,\n' % quote_python(self.getApplicationName()))
        showIndent(outfile, level)
        outfile.write('applicationInformation = %s,\n' % quote_python(self.getApplicationInformation()))
        showIndent(outfile, level)
        outfile.write('applicationSuccess = %s,\n' % self.getApplicationSuccess())
        if self.groupDiffractionImage:
            showIndent(outfile, level)
            outfile.write('groupDiffractionImage = DTCrystalGroupDiffractionImage(\n')
            self.groupDiffractionImage.exportLiteral(outfile, level, name_='groupDiffractionImage')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('blankImage = %s,\n' % self.getBlankImage())
        showIndent(outfile, level)
        outfile.write('powderIceRings = %s,\n' % self.getPowderIceRings())
        showIndent(outfile, level)
        outfile.write('beamX = %e,\n' % self.getBeamX())
        showIndent(outfile, level)
        outfile.write('beamY = %e,\n' % self.getBeamY())
        showIndent(outfile, level)
        outfile.write('cellA = %e,\n' % self.getCellA())
        showIndent(outfile, level)
        outfile.write('cellB = %e,\n' % self.getCellB())
        showIndent(outfile, level)
        outfile.write('cellC = %e,\n' % self.getCellC())
        showIndent(outfile, level)
        outfile.write('cellAlpha = %e,\n' % self.getCellAlpha())
        showIndent(outfile, level)
        outfile.write('cellBeta = %e,\n' % self.getCellBeta())
        showIndent(outfile, level)
        outfile.write('cellGamma = %e,\n' % self.getCellGamma())
        showIndent(outfile, level)
        outfile.write('mosaicity = %e,\n' % self.getMosaicity())
        showIndent(outfile, level)
        outfile.write('resolution = %e,\n' % self.getResolution())
        showIndent(outfile, level)
        outfile.write('IOverSigmaI = %e,\n' % self.getIOverSigmaI())
        showIndent(outfile, level)
        outfile.write('bravaisLattice = %s,\n' % quote_python(self.getBravaisLattice()))
        showIndent(outfile, level)
        outfile.write('phiStart = %e,\n' % self.getPhiStart())
        showIndent(outfile, level)
        outfile.write('phiEnd = %e,\n' % self.getPhiEnd())
        showIndent(outfile, level)
        outfile.write('rotation = %e,\n' % self.getRotation())
        showIndent(outfile, level)
        outfile.write('exposureTime = %e,\n' % self.getExposureTime())
        showIndent(outfile, level)
        outfile.write('generalInformation = %s,\n' % quote_python(self.getGeneralInformation()))
        showIndent(outfile, level)
        outfile.write('generalXMLObject = %s,\n' % quote_python(self.getGeneralXMLObject()))
    def exportLiteralHtml(self, outfile, level = 0, name_='DTCrystalReference'):
        level += 1
        self.exportLiteralAttributesHtml(outfile, level, name_)
        self.exportLiteralChildrenHtml(outfile, level, name_)
    def exportLiteralAttributesHtml(self, outfile, level, name_):
        pass
    def exportLiteralChildrenHtml(self, outfile, level, name_):
        showIndentHtml(outfile, level)
        outfile.write('date = <a  href:"#">%s</a><br>\n' % quote_python(self.getDate()))
        showIndentHtml(outfile, level)
        outfile.write('information = <a  href:"#">%s</a><br>\n' % quote_python(self.getInformation()))
        showIndentHtml(outfile, level)
        outfile.write('applicationErrorMessage = <a  href:"#">%s</a><br>\n' % quote_python(self.getApplicationErrorMessage()))
        showIndentHtml(outfile, level)
        outfile.write('applicationName = <a  href:"#">%s</a><br>\n' % quote_python(self.getApplicationName()))
        showIndentHtml(outfile, level)
        outfile.write('applicationInformation = <a  href:"#">%s</a><br>\n' % quote_python(self.getApplicationInformation()))
        showIndentHtml(outfile, level)
        outfile.write('applicationSuccess = <a  href:"#">%s</a><br>\n' % self.getApplicationSuccess())
        if self.groupDiffractionImage:
            showIndentHtml(outfile, level)
            outfile.write('groupDiffractionImage<br>\n')
            self.groupDiffractionImage.exportLiteralHtml(outfile, level, name_='groupDiffractionImage')
            showIndentHtml(outfile, level)
            outfile.write('<br>\n')
        showIndentHtml(outfile, level)
        outfile.write('blankImage = <a  href:"#">%s</a><br>\n' % self.getBlankImage())
        showIndentHtml(outfile, level)
        outfile.write('powderIceRings = <a  href:"#">%s</a><br>\n' % self.getPowderIceRings())
        showIndentHtml(outfile, level)
        outfile.write('beamX = <a  href:"#">%e</a><br>\n' % self.getBeamX())
        showIndentHtml(outfile, level)
        outfile.write('beamY = <a  href:"#">%e</a><br>\n' % self.getBeamY())
        showIndentHtml(outfile, level)
        outfile.write('cellA = <a  href:"#">%e</a><br>\n' % self.getCellA())
        showIndentHtml(outfile, level)
        outfile.write('cellB = <a  href:"#">%e</a><br>\n' % self.getCellB())
        showIndentHtml(outfile, level)
        outfile.write('cellC = <a  href:"#">%e</a><br>\n' % self.getCellC())
        showIndentHtml(outfile, level)
        outfile.write('cellAlpha = <a  href:"#">%e</a><br>\n' % self.getCellAlpha())
        showIndentHtml(outfile, level)
        outfile.write('cellBeta = <a  href:"#">%e</a><br>\n' % self.getCellBeta())
        showIndentHtml(outfile, level)
        outfile.write('cellGamma = <a  href:"#">%e</a><br>\n' % self.getCellGamma())
        showIndentHtml(outfile, level)
        outfile.write('mosaicity = <a  href:"#">%e</a><br>\n' % self.getMosaicity())
        showIndentHtml(outfile, level)
        outfile.write('resolution = <a  href:"#">%e</a><br>\n' % self.getResolution())
        showIndentHtml(outfile, level)
        outfile.write('IOverSigmaI = <a  href:"#">%e</a><br>\n' % self.getIOverSigmaI())
        showIndentHtml(outfile, level)
        outfile.write('bravaisLattice = <a  href:"#">%s</a><br>\n' % quote_python(self.getBravaisLattice()))
        showIndentHtml(outfile, level)
        outfile.write('phiStart = <a  href:"#">%e</a><br>\n' % self.getPhiStart())
        showIndentHtml(outfile, level)
        outfile.write('phiEnd = <a  href:"#">%e</a><br>\n' % self.getPhiEnd())
        showIndentHtml(outfile, level)
        outfile.write('rotation = <a  href:"#">%e</a><br>\n' % self.getRotation())
        showIndentHtml(outfile, level)
        outfile.write('exposureTime = <a  href:"#">%e</a><br>\n' % self.getExposureTime())
        showIndentHtml(outfile, level)
        outfile.write('generalInformation = <a  href:"#">%s</a><br>\n' % quote_python(self.getGeneralInformation()))
        showIndentHtml(outfile, level)
        outfile.write('generalXMLObject = <a  href:"#">%s</a><br>\n' % quote_python(self.getGeneralXMLObject()))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'date':
            date_ = ''
            for text__content_ in child_.childNodes:
                date_ += text__content_.nodeValue
            self.date = date_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'information':
            information_ = ''
            for text__content_ in child_.childNodes:
                information_ += text__content_.nodeValue
            self.information = information_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'applicationErrorMessage':
            applicationErrorMessage_ = ''
            for text__content_ in child_.childNodes:
                applicationErrorMessage_ += text__content_.nodeValue
            self.applicationErrorMessage = applicationErrorMessage_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'applicationName':
            applicationName_ = ''
            for text__content_ in child_.childNodes:
                applicationName_ += text__content_.nodeValue
            self.applicationName = applicationName_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'applicationInformation':
            applicationInformation_ = ''
            for text__content_ in child_.childNodes:
                applicationInformation_ += text__content_.nodeValue
            self.applicationInformation = applicationInformation_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'applicationSuccess':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', 'True', '1'):
                    ival_ = True
                elif sval_ in ('false', 'False', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.applicationSuccess = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'groupDiffractionImage':
            obj_ = DTCrystalGroupDiffractionImage.factory()
            obj_.build(child_)
            self.setGroupDiffractionImage(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'blankImage':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', 'True', '1'):
                    ival_ = True
                elif sval_ in ('false', 'False', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.blankImage = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'powderIceRings':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', 'True', '1'):
                    ival_ = True
                elif sval_ in ('false', 'False', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.powderIceRings = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'beamX':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.beamX = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'beamY':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.beamY = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cellA':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.cellA = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cellB':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.cellB = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cellC':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.cellC = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cellAlpha':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.cellAlpha = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cellBeta':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.cellBeta = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cellGamma':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.cellGamma = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'mosaicity':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.mosaicity = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'resolution':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.resolution = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'IOverSigmaI':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.IOverSigmaI = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'bravaisLattice':
            bravaisLattice_ = ''
            for text__content_ in child_.childNodes:
                bravaisLattice_ += text__content_.nodeValue
            self.bravaisLattice = bravaisLattice_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'phiStart':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.phiStart = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'phiEnd':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.phiEnd = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'rotation':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.rotation = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'exposureTime':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                self.exposureTime = fval_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'generalInformation':
            generalInformation_ = ''
            for text__content_ in child_.childNodes:
                generalInformation_ += text__content_.nodeValue
            self.generalInformation = generalInformation_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'generalXMLObject':
            generalXMLObject_ = ''
            for text__content_ in child_.childNodes:
                generalXMLObject_ += text__content_.nodeValue
            self.generalXMLObject = generalXMLObject_
# end class DTCrystalReference




def parse(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = DTCrystalDiffractionImage.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc.unlink()
#    doc = None
    return rootObj


def parseString(inString):
    doc = minidom.parseString(inString)
    rootNode = doc.documentElement
    rootObj = DTCrystalDiffractionImage.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc.unlink()
#    doc = None
#    sys.stdout.write('<?xml version="1.0" ?>\n')
#    rootObj.export(sys.stdout, 0, name_="DTCrystalDiffractionImage")
    return rootObj


# AAlib Modifications for marshalling and unmarshalling
# Creating program data constructs from XML
def unMarshalling( _inFileName ):
    return parse(  _inFileName )


# Serializing program data constructs to XML
def marshalling( _oObject, _inFileName ):
    oFile = open( _inFileName, "w" )
    oFile.write('<?xml version="1.0" ?>\n')
    _oObject.export( oFile, 0, name_="DTCrystalDiffractionImage" )
    oFile.close()

