#!/usr/bin/env python
#
#    Project: DiffractCTv1
#             http://www.edna-site.org
#
#    File: "$Id: $"
#
#    Copyright (C) 2008-2009 European Synchrotron Radiation Facility
#                            Grenoble, France
#
#    Principal author: Olof Svensson (svensson@esrf.fr) 
#						Jerome Kieffer (kieffer@esrf.fr)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as published
#    by the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    and the GNU Lesser General Public License  along with this program.  
#    If not, see <http://www.gnu.org/licenses/>.
#

#
#=============================================================================
#  		This file is generated by POGO
#	(Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import os, sys

#compatibility with former version of PyTango ....
if PyTango.__version_number__ < 700:
	PyTango.DeviceClass = PyTango.PyDeviceClass
	PyTango.Util = PyTango.PyUtil


# Append the EDNA kernel source directory to the python path
pyStrProgramPath = os.path.abspath(sys.argv[0])
pyStrBinPath = os.path.split(pyStrProgramPath)[0]
pyStrKernelPath = os.path.split(pyStrBinPath)[0]
pyStrEdnaHomePath = os.path.split(pyStrKernelPath)[0]
os.environ["EDNA_HOME"] = pyStrEdnaHomePath

sys.path.append(os.path.join(pyStrEdnaHomePath, "kernel", "src"))

# Import the plugin factory

from EDApplication import EDApplication
#from EDString import EDString
from EDVerbose import EDVerbose


#==================================================================
#   EDTangoServer Class Description:
#
#
#==================================================================
# 	Device States Description:
#
#   DevState.ON :       EDNA device is not running any plugin
#   DevState.RUNNING :  EDNA plugin is running
#==================================================================


class EDTangoServer(PyTango.Device_3Impl):

#--------- Add you global variables here --------------------------

#------------------------------------------------------------------
#	Device constructor
#------------------------------------------------------------------
	def __init__(self, cl, name):
		PyTango.Device_3Impl.__init__(self, cl, name)
		EDTangoServer.init_device(self)
		# Initialise the plugin factory
		self.m_edFactoryPlugin = EDApplication.getFactoryPlugin()
		EDVerbose.setVerboseDebugOn()

#------------------------------------------------------------------
#	Device destructor
#------------------------------------------------------------------
	def delete_device(self):
		print "[Device delete_device method] for device", self.get_name()


#------------------------------------------------------------------
#	Device initialization
#------------------------------------------------------------------
	def init_device(self):
		print "In ", self.get_name(), "::init_device()"
		self.set_state(PyTango.DevState.ON)
		self.get_device_properties(self.get_device_class())

#------------------------------------------------------------------
#	Always excuted hook method
#------------------------------------------------------------------
	def always_executed_hook(self):
		print "In ", self.get_name(), "::always_excuted_hook()"

#==================================================================
#
#	EDTangoServer read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#	Read Attribute Hardware
#------------------------------------------------------------------
	def read_attr_hardware(self, data):
		print "In ", self.get_name(), "::read_attr_hardware()"



#------------------------------------------------------------------
#	Read Output attribute
#------------------------------------------------------------------
	def read_Output(self, attr):
		print "In ", self.get_name(), "::read_Output()"

		#	Add your own code here

		attr_Output_read = "Hello Tango world"
		attr.set_value(attr_Output_read)



#==================================================================
#
#	EDTangoServer command methods
#
#==================================================================

#------------------------------------------------------------------
#	Start command:
#
#	Description: 
#	argin:  DevVarStringArray	plugin name, xml input
#------------------------------------------------------------------
	def Start(self, argin):
		print "In ", self.get_name(), "::Start()"
		#	Add your own code here
		pyStrPluginName = argin[0]
		edStringXsmlInput = str(argin[1])
		edPlugin = self.m_edFactoryPlugin.loadPlugin(pyStrPluginName)
		if (edPlugin is not None):
			print "Start of plugin execution : " + pyStrPluginName
			edPlugin.setDataInput(edStringXmlInput)
			edPlugin.connectSUCCESS(self.successPluginExecution)
			edPlugin.connectFAILURE(self.failurePluginExecution)
			edPlugin.execute()
		else:
			print "ERROR! Plugin not found : " + pyStrPluginName


	def successPluginExecution(self, _edObject):
		print "Plugin execution ended with success"


	def failurePluginExecution(self, _edObject):
		print "Plugin execution ended with failure"
#------------------------------------------------------------------
#	Abort command:
#
#	Description: 
#------------------------------------------------------------------
	def Abort(self):
		print "In ", self.get_name(), "::Abort()"
		#	Add your own code here


#==================================================================
#
#	EDTangoServerClass class definition
#
#==================================================================
class EDTangoServerClass(PyTango.DeviceClass):

	#	Class Properties
	class_property_list = {
		}


	#	Device Properties
	device_property_list = {
		'Parameters':
			[PyTango.DevVarStringArray,
			"Configuration parameters",
			[] ],
		}


	#	Command definitions
	cmd_list = {
		'Start':
			[[PyTango.DevVarStringArray, "plugin name, xml input"],
			[PyTango.DevVoid, ""]],
		'Abort':
			[[PyTango.DevVoid, ""],
			[PyTango.DevVoid, ""]],
		}


	#	Attribute definitions
	attr_list = {
		'Output':
			[[PyTango.DevString,
			PyTango.SCALAR,
			PyTango.READ]],
		}


#------------------------------------------------------------------
#	EDTangoServerClass Constructor
#------------------------------------------------------------------
	def __init__(self, name):
		PyTango.DeviceClass.__init__(self, name)
		self.set_type(name);
		print "In EDTangoServerClass  constructor"

#==================================================================
#
#	EDTangoServer class main method
#
#==================================================================
if __name__ == '__main__':
	try:
		py = PyTango.Util(sys.argv)
		py.add_TgClass(EDTangoServerClass, EDTangoServer, 'EDTangoServer')

		U = PyTango.Util.instance()
		U.server_init()
		U.server_run()

	except PyTango.DevFailed, e:
		print '-------> Received a DevFailed exception:', e
	except Exception, e:
		print '-------> An unforeseen exception occured....', e
